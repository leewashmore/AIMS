//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.261
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace GreenField.ServiceCaller.ModelFXDefinitions {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
    public partial class ServiceFault : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DescriptionField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CommodityResult", Namespace="http://schemas.datacontract.org/2004/07/GreenField.DAL", IsReference=true)]
    public partial class CommodityResult : GreenField.ServiceCaller.ModelFXDefinitions.ComplexObject {
        
        private string COMMODITY_IDField;
        
        private System.Nullable<float> CURRENT_YEAR_ENDField;
        
        private System.Nullable<System.DateTime> LASTUPDATEField;
        
        private System.Nullable<float> LONG_TERMField;
        
        private System.Nullable<float> NEXT_YEAR_ENDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string COMMODITY_ID {
            get {
                return this.COMMODITY_IDField;
            }
            set {
                if ((object.ReferenceEquals(this.COMMODITY_IDField, value) != true)) {
                    this.COMMODITY_IDField = value;
                    this.RaisePropertyChanged("COMMODITY_ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<float> CURRENT_YEAR_END {
            get {
                return this.CURRENT_YEAR_ENDField;
            }
            set {
                if ((this.CURRENT_YEAR_ENDField.Equals(value) != true)) {
                    this.CURRENT_YEAR_ENDField = value;
                    this.RaisePropertyChanged("CURRENT_YEAR_END");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> LASTUPDATE {
            get {
                return this.LASTUPDATEField;
            }
            set {
                if ((this.LASTUPDATEField.Equals(value) != true)) {
                    this.LASTUPDATEField = value;
                    this.RaisePropertyChanged("LASTUPDATE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<float> LONG_TERM {
            get {
                return this.LONG_TERMField;
            }
            set {
                if ((this.LONG_TERMField.Equals(value) != true)) {
                    this.LONG_TERMField = value;
                    this.RaisePropertyChanged("LONG_TERM");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<float> NEXT_YEAR_END {
            get {
                return this.NEXT_YEAR_ENDField;
            }
            set {
                if ((this.NEXT_YEAR_ENDField.Equals(value) != true)) {
                    this.NEXT_YEAR_ENDField = value;
                    this.RaisePropertyChanged("NEXT_YEAR_END");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StructuralObject", Namespace="http://schemas.datacontract.org/2004/07/System.Data.Objects.DataClasses", IsReference=true)]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenField.ServiceCaller.ModelFXDefinitions.ComplexObject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenField.ServiceCaller.ModelFXDefinitions.CommodityResult))]
    public partial class StructuralObject : object, System.ComponentModel.INotifyPropertyChanged {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ComplexObject", Namespace="http://schemas.datacontract.org/2004/07/System.Data.Objects.DataClasses", IsReference=true)]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenField.ServiceCaller.ModelFXDefinitions.CommodityResult))]
    public partial class ComplexObject : GreenField.ServiceCaller.ModelFXDefinitions.StructuralObject {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ModelFXDefinitions.ModelFXOperations")]
    public interface ModelFXOperations {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ModelFXOperations/RetrieveMacroDatabaseKeyAnnualReportData", ReplyAction="http://tempuri.org/ModelFXOperations/RetrieveMacroDatabaseKeyAnnualReportDataResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.ModelFXDefinitions.ServiceFault), Action="http://tempuri.org/ModelFXOperations/RetrieveMacroDatabaseKeyAnnualReportDataServ" +
            "iceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrieveMacroDatabaseKeyAnnualReportData(string countryNameVal, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.DataContracts.MacroDatabaseKeyAnnualReportData> EndRetrieveMacroDatabaseKeyAnnualReportData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ModelFXOperations/RetrieveCountrySelectionData", ReplyAction="http://tempuri.org/ModelFXOperations/RetrieveCountrySelectionDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.ModelFXDefinitions.ServiceFault), Action="http://tempuri.org/ModelFXOperations/RetrieveCountrySelectionDataServiceFaultFaul" +
            "t", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrieveCountrySelectionData(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.DataContracts.CountrySelectionData> EndRetrieveCountrySelectionData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ModelFXOperations/RetrieveMacroDatabaseKeyAnnualReportDataEMSu" +
            "mmary", ReplyAction="http://tempuri.org/ModelFXOperations/RetrieveMacroDatabaseKeyAnnualReportDataEMSu" +
            "mmaryResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.ModelFXDefinitions.ServiceFault), Action="http://tempuri.org/ModelFXOperations/RetrieveMacroDatabaseKeyAnnualReportDataEMSu" +
            "mmaryServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrieveMacroDatabaseKeyAnnualReportDataEMSummary(string countryNameVal, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.DataContracts.MacroDatabaseKeyAnnualReportData> EndRetrieveMacroDatabaseKeyAnnualReportDataEMSummary(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ModelFXOperations/RetrieveCommodityData", ReplyAction="http://tempuri.org/ModelFXOperations/RetrieveCommodityDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.ModelFXDefinitions.ServiceFault), Action="http://tempuri.org/ModelFXOperations/RetrieveCommodityDataServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrieveCommodityData(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.ModelFXDefinitions.CommodityResult> EndRetrieveCommodityData(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ModelFXOperationsChannel : GreenField.ServiceCaller.ModelFXDefinitions.ModelFXOperations, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveMacroDatabaseKeyAnnualReportDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveMacroDatabaseKeyAnnualReportDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.DataContracts.MacroDatabaseKeyAnnualReportData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.DataContracts.MacroDatabaseKeyAnnualReportData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveCountrySelectionDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveCountrySelectionDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.DataContracts.CountrySelectionData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.DataContracts.CountrySelectionData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveMacroDatabaseKeyAnnualReportDataEMSummaryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveMacroDatabaseKeyAnnualReportDataEMSummaryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.DataContracts.MacroDatabaseKeyAnnualReportData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.DataContracts.MacroDatabaseKeyAnnualReportData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveCommodityDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveCommodityDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.ModelFXDefinitions.CommodityResult> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.ModelFXDefinitions.CommodityResult>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ModelFXOperationsClient : System.ServiceModel.ClientBase<GreenField.ServiceCaller.ModelFXDefinitions.ModelFXOperations>, GreenField.ServiceCaller.ModelFXDefinitions.ModelFXOperations {
        
        private BeginOperationDelegate onBeginRetrieveMacroDatabaseKeyAnnualReportDataDelegate;
        
        private EndOperationDelegate onEndRetrieveMacroDatabaseKeyAnnualReportDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveMacroDatabaseKeyAnnualReportDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveCountrySelectionDataDelegate;
        
        private EndOperationDelegate onEndRetrieveCountrySelectionDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveCountrySelectionDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveMacroDatabaseKeyAnnualReportDataEMSummaryDelegate;
        
        private EndOperationDelegate onEndRetrieveMacroDatabaseKeyAnnualReportDataEMSummaryDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveMacroDatabaseKeyAnnualReportDataEMSummaryCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveCommodityDataDelegate;
        
        private EndOperationDelegate onEndRetrieveCommodityDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveCommodityDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public ModelFXOperationsClient() {
        }
        
        public ModelFXOperationsClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ModelFXOperationsClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ModelFXOperationsClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ModelFXOperationsClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<RetrieveMacroDatabaseKeyAnnualReportDataCompletedEventArgs> RetrieveMacroDatabaseKeyAnnualReportDataCompleted;
        
        public event System.EventHandler<RetrieveCountrySelectionDataCompletedEventArgs> RetrieveCountrySelectionDataCompleted;
        
        public event System.EventHandler<RetrieveMacroDatabaseKeyAnnualReportDataEMSummaryCompletedEventArgs> RetrieveMacroDatabaseKeyAnnualReportDataEMSummaryCompleted;
        
        public event System.EventHandler<RetrieveCommodityDataCompletedEventArgs> RetrieveCommodityDataCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.ModelFXDefinitions.ModelFXOperations.BeginRetrieveMacroDatabaseKeyAnnualReportData(string countryNameVal, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveMacroDatabaseKeyAnnualReportData(countryNameVal, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.DataContracts.MacroDatabaseKeyAnnualReportData> GreenField.ServiceCaller.ModelFXDefinitions.ModelFXOperations.EndRetrieveMacroDatabaseKeyAnnualReportData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveMacroDatabaseKeyAnnualReportData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveMacroDatabaseKeyAnnualReportData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string countryNameVal = ((string)(inValues[0]));
            return ((GreenField.ServiceCaller.ModelFXDefinitions.ModelFXOperations)(this)).BeginRetrieveMacroDatabaseKeyAnnualReportData(countryNameVal, callback, asyncState);
        }
        
        private object[] OnEndRetrieveMacroDatabaseKeyAnnualReportData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.DataContracts.MacroDatabaseKeyAnnualReportData> retVal = ((GreenField.ServiceCaller.ModelFXDefinitions.ModelFXOperations)(this)).EndRetrieveMacroDatabaseKeyAnnualReportData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveMacroDatabaseKeyAnnualReportDataCompleted(object state) {
            if ((this.RetrieveMacroDatabaseKeyAnnualReportDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveMacroDatabaseKeyAnnualReportDataCompleted(this, new RetrieveMacroDatabaseKeyAnnualReportDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveMacroDatabaseKeyAnnualReportDataAsync(string countryNameVal) {
            this.RetrieveMacroDatabaseKeyAnnualReportDataAsync(countryNameVal, null);
        }
        
        public void RetrieveMacroDatabaseKeyAnnualReportDataAsync(string countryNameVal, object userState) {
            if ((this.onBeginRetrieveMacroDatabaseKeyAnnualReportDataDelegate == null)) {
                this.onBeginRetrieveMacroDatabaseKeyAnnualReportDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveMacroDatabaseKeyAnnualReportData);
            }
            if ((this.onEndRetrieveMacroDatabaseKeyAnnualReportDataDelegate == null)) {
                this.onEndRetrieveMacroDatabaseKeyAnnualReportDataDelegate = new EndOperationDelegate(this.OnEndRetrieveMacroDatabaseKeyAnnualReportData);
            }
            if ((this.onRetrieveMacroDatabaseKeyAnnualReportDataCompletedDelegate == null)) {
                this.onRetrieveMacroDatabaseKeyAnnualReportDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveMacroDatabaseKeyAnnualReportDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveMacroDatabaseKeyAnnualReportDataDelegate, new object[] {
                        countryNameVal}, this.onEndRetrieveMacroDatabaseKeyAnnualReportDataDelegate, this.onRetrieveMacroDatabaseKeyAnnualReportDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.ModelFXDefinitions.ModelFXOperations.BeginRetrieveCountrySelectionData(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveCountrySelectionData(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.DataContracts.CountrySelectionData> GreenField.ServiceCaller.ModelFXDefinitions.ModelFXOperations.EndRetrieveCountrySelectionData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveCountrySelectionData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveCountrySelectionData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((GreenField.ServiceCaller.ModelFXDefinitions.ModelFXOperations)(this)).BeginRetrieveCountrySelectionData(callback, asyncState);
        }
        
        private object[] OnEndRetrieveCountrySelectionData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.DataContracts.CountrySelectionData> retVal = ((GreenField.ServiceCaller.ModelFXDefinitions.ModelFXOperations)(this)).EndRetrieveCountrySelectionData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveCountrySelectionDataCompleted(object state) {
            if ((this.RetrieveCountrySelectionDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveCountrySelectionDataCompleted(this, new RetrieveCountrySelectionDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveCountrySelectionDataAsync() {
            this.RetrieveCountrySelectionDataAsync(null);
        }
        
        public void RetrieveCountrySelectionDataAsync(object userState) {
            if ((this.onBeginRetrieveCountrySelectionDataDelegate == null)) {
                this.onBeginRetrieveCountrySelectionDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveCountrySelectionData);
            }
            if ((this.onEndRetrieveCountrySelectionDataDelegate == null)) {
                this.onEndRetrieveCountrySelectionDataDelegate = new EndOperationDelegate(this.OnEndRetrieveCountrySelectionData);
            }
            if ((this.onRetrieveCountrySelectionDataCompletedDelegate == null)) {
                this.onRetrieveCountrySelectionDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveCountrySelectionDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveCountrySelectionDataDelegate, null, this.onEndRetrieveCountrySelectionDataDelegate, this.onRetrieveCountrySelectionDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.ModelFXDefinitions.ModelFXOperations.BeginRetrieveMacroDatabaseKeyAnnualReportDataEMSummary(string countryNameVal, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveMacroDatabaseKeyAnnualReportDataEMSummary(countryNameVal, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.DataContracts.MacroDatabaseKeyAnnualReportData> GreenField.ServiceCaller.ModelFXDefinitions.ModelFXOperations.EndRetrieveMacroDatabaseKeyAnnualReportDataEMSummary(System.IAsyncResult result) {
            return base.Channel.EndRetrieveMacroDatabaseKeyAnnualReportDataEMSummary(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveMacroDatabaseKeyAnnualReportDataEMSummary(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string countryNameVal = ((string)(inValues[0]));
            return ((GreenField.ServiceCaller.ModelFXDefinitions.ModelFXOperations)(this)).BeginRetrieveMacroDatabaseKeyAnnualReportDataEMSummary(countryNameVal, callback, asyncState);
        }
        
        private object[] OnEndRetrieveMacroDatabaseKeyAnnualReportDataEMSummary(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.DataContracts.MacroDatabaseKeyAnnualReportData> retVal = ((GreenField.ServiceCaller.ModelFXDefinitions.ModelFXOperations)(this)).EndRetrieveMacroDatabaseKeyAnnualReportDataEMSummary(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveMacroDatabaseKeyAnnualReportDataEMSummaryCompleted(object state) {
            if ((this.RetrieveMacroDatabaseKeyAnnualReportDataEMSummaryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveMacroDatabaseKeyAnnualReportDataEMSummaryCompleted(this, new RetrieveMacroDatabaseKeyAnnualReportDataEMSummaryCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveMacroDatabaseKeyAnnualReportDataEMSummaryAsync(string countryNameVal) {
            this.RetrieveMacroDatabaseKeyAnnualReportDataEMSummaryAsync(countryNameVal, null);
        }
        
        public void RetrieveMacroDatabaseKeyAnnualReportDataEMSummaryAsync(string countryNameVal, object userState) {
            if ((this.onBeginRetrieveMacroDatabaseKeyAnnualReportDataEMSummaryDelegate == null)) {
                this.onBeginRetrieveMacroDatabaseKeyAnnualReportDataEMSummaryDelegate = new BeginOperationDelegate(this.OnBeginRetrieveMacroDatabaseKeyAnnualReportDataEMSummary);
            }
            if ((this.onEndRetrieveMacroDatabaseKeyAnnualReportDataEMSummaryDelegate == null)) {
                this.onEndRetrieveMacroDatabaseKeyAnnualReportDataEMSummaryDelegate = new EndOperationDelegate(this.OnEndRetrieveMacroDatabaseKeyAnnualReportDataEMSummary);
            }
            if ((this.onRetrieveMacroDatabaseKeyAnnualReportDataEMSummaryCompletedDelegate == null)) {
                this.onRetrieveMacroDatabaseKeyAnnualReportDataEMSummaryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveMacroDatabaseKeyAnnualReportDataEMSummaryCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveMacroDatabaseKeyAnnualReportDataEMSummaryDelegate, new object[] {
                        countryNameVal}, this.onEndRetrieveMacroDatabaseKeyAnnualReportDataEMSummaryDelegate, this.onRetrieveMacroDatabaseKeyAnnualReportDataEMSummaryCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.ModelFXDefinitions.ModelFXOperations.BeginRetrieveCommodityData(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveCommodityData(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.ModelFXDefinitions.CommodityResult> GreenField.ServiceCaller.ModelFXDefinitions.ModelFXOperations.EndRetrieveCommodityData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveCommodityData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveCommodityData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((GreenField.ServiceCaller.ModelFXDefinitions.ModelFXOperations)(this)).BeginRetrieveCommodityData(callback, asyncState);
        }
        
        private object[] OnEndRetrieveCommodityData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.ModelFXDefinitions.CommodityResult> retVal = ((GreenField.ServiceCaller.ModelFXDefinitions.ModelFXOperations)(this)).EndRetrieveCommodityData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveCommodityDataCompleted(object state) {
            if ((this.RetrieveCommodityDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveCommodityDataCompleted(this, new RetrieveCommodityDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveCommodityDataAsync() {
            this.RetrieveCommodityDataAsync(null);
        }
        
        public void RetrieveCommodityDataAsync(object userState) {
            if ((this.onBeginRetrieveCommodityDataDelegate == null)) {
                this.onBeginRetrieveCommodityDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveCommodityData);
            }
            if ((this.onEndRetrieveCommodityDataDelegate == null)) {
                this.onEndRetrieveCommodityDataDelegate = new EndOperationDelegate(this.OnEndRetrieveCommodityData);
            }
            if ((this.onRetrieveCommodityDataCompletedDelegate == null)) {
                this.onRetrieveCommodityDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveCommodityDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveCommodityDataDelegate, null, this.onEndRetrieveCommodityDataDelegate, this.onRetrieveCommodityDataCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override GreenField.ServiceCaller.ModelFXDefinitions.ModelFXOperations CreateChannel() {
            return new ModelFXOperationsClientChannel(this);
        }
        
        private class ModelFXOperationsClientChannel : ChannelBase<GreenField.ServiceCaller.ModelFXDefinitions.ModelFXOperations>, GreenField.ServiceCaller.ModelFXDefinitions.ModelFXOperations {
            
            public ModelFXOperationsClientChannel(System.ServiceModel.ClientBase<GreenField.ServiceCaller.ModelFXDefinitions.ModelFXOperations> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginRetrieveMacroDatabaseKeyAnnualReportData(string countryNameVal, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = countryNameVal;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveMacroDatabaseKeyAnnualReportData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.DataContracts.MacroDatabaseKeyAnnualReportData> EndRetrieveMacroDatabaseKeyAnnualReportData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.DataContracts.MacroDatabaseKeyAnnualReportData> _result = ((System.Collections.Generic.List<GreenField.DataContracts.MacroDatabaseKeyAnnualReportData>)(base.EndInvoke("RetrieveMacroDatabaseKeyAnnualReportData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveCountrySelectionData(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("RetrieveCountrySelectionData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.DataContracts.CountrySelectionData> EndRetrieveCountrySelectionData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.DataContracts.CountrySelectionData> _result = ((System.Collections.Generic.List<GreenField.DataContracts.CountrySelectionData>)(base.EndInvoke("RetrieveCountrySelectionData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveMacroDatabaseKeyAnnualReportDataEMSummary(string countryNameVal, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = countryNameVal;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveMacroDatabaseKeyAnnualReportDataEMSummary", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.DataContracts.MacroDatabaseKeyAnnualReportData> EndRetrieveMacroDatabaseKeyAnnualReportDataEMSummary(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.DataContracts.MacroDatabaseKeyAnnualReportData> _result = ((System.Collections.Generic.List<GreenField.DataContracts.MacroDatabaseKeyAnnualReportData>)(base.EndInvoke("RetrieveMacroDatabaseKeyAnnualReportDataEMSummary", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveCommodityData(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("RetrieveCommodityData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.ModelFXDefinitions.CommodityResult> EndRetrieveCommodityData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.ModelFXDefinitions.CommodityResult> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.ModelFXDefinitions.CommodityResult>)(base.EndInvoke("RetrieveCommodityData", _args, result)));
                return _result;
            }
        }
    }
}
