//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.261
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace GreenField.ServiceCaller.PerformanceDefinitions {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
    public partial class ServiceFault : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DescriptionField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MarketSnapshotSelectionData", Namespace="http://schemas.datacontract.org/2004/07/GreenField.DAL", IsReference=true)]
    public partial class MarketSnapshotSelectionData : GreenField.ServiceCaller.PerformanceDefinitions.ComplexObject {
        
        private string SnapshotNameField;
        
        private int SnapshotPreferenceIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SnapshotName {
            get {
                return this.SnapshotNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SnapshotNameField, value) != true)) {
                    this.SnapshotNameField = value;
                    this.RaisePropertyChanged("SnapshotName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SnapshotPreferenceId {
            get {
                return this.SnapshotPreferenceIdField;
            }
            set {
                if ((this.SnapshotPreferenceIdField.Equals(value) != true)) {
                    this.SnapshotPreferenceIdField = value;
                    this.RaisePropertyChanged("SnapshotPreferenceId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StructuralObject", Namespace="http://schemas.datacontract.org/2004/07/System.Data.Objects.DataClasses", IsReference=true)]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenField.ServiceCaller.PerformanceDefinitions.ComplexObject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotSelectionData))]
    public partial class StructuralObject : object, System.ComponentModel.INotifyPropertyChanged {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ComplexObject", Namespace="http://schemas.datacontract.org/2004/07/System.Data.Objects.DataClasses", IsReference=true)]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotSelectionData))]
    public partial class ComplexObject : GreenField.ServiceCaller.PerformanceDefinitions.StructuralObject {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MarketSnapshotPreference", Namespace="http://schemas.datacontract.org/2004/07/GreenField.DAL", IsReference=true)]
    public partial class MarketSnapshotPreference : GreenField.ServiceCaller.PerformanceDefinitions.ComplexObject {
        
        private string EntityNameField;
        
        private System.Nullable<int> EntityOrderField;
        
        private System.Nullable<int> EntityPreferenceIdField;
        
        private string EntityReturnTypeField;
        
        private string EntityTypeField;
        
        private string GroupNameField;
        
        private int GroupPreferenceIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EntityName {
            get {
                return this.EntityNameField;
            }
            set {
                if ((object.ReferenceEquals(this.EntityNameField, value) != true)) {
                    this.EntityNameField = value;
                    this.RaisePropertyChanged("EntityName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> EntityOrder {
            get {
                return this.EntityOrderField;
            }
            set {
                if ((this.EntityOrderField.Equals(value) != true)) {
                    this.EntityOrderField = value;
                    this.RaisePropertyChanged("EntityOrder");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> EntityPreferenceId {
            get {
                return this.EntityPreferenceIdField;
            }
            set {
                if ((this.EntityPreferenceIdField.Equals(value) != true)) {
                    this.EntityPreferenceIdField = value;
                    this.RaisePropertyChanged("EntityPreferenceId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EntityReturnType {
            get {
                return this.EntityReturnTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.EntityReturnTypeField, value) != true)) {
                    this.EntityReturnTypeField = value;
                    this.RaisePropertyChanged("EntityReturnType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EntityType {
            get {
                return this.EntityTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.EntityTypeField, value) != true)) {
                    this.EntityTypeField = value;
                    this.RaisePropertyChanged("EntityType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GroupName {
            get {
                return this.GroupNameField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupNameField, value) != true)) {
                    this.GroupNameField = value;
                    this.RaisePropertyChanged("GroupName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GroupPreferenceID {
            get {
                return this.GroupPreferenceIDField;
            }
            set {
                if ((this.GroupPreferenceIDField.Equals(value) != true)) {
                    this.GroupPreferenceIDField = value;
                    this.RaisePropertyChanged("GroupPreferenceID");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MarketPerformanceSnapshotData", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.DataContracts")]
    public partial class MarketPerformanceSnapshotData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Nullable<decimal> DateToDateReturnField;
        
        private System.Nullable<decimal> LastYearReturnField;
        
        private GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference MarketSnapshotPreferenceInfoField;
        
        private System.Nullable<decimal> MonthToDateReturnField;
        
        private System.Nullable<decimal> QuarterToDateReturnField;
        
        private System.Nullable<decimal> SecondLastYearReturnField;
        
        private System.Nullable<decimal> ThirdLastYearReturnField;
        
        private System.Nullable<decimal> WeekToDateReturnField;
        
        private System.Nullable<decimal> YearToDateReturnField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> DateToDateReturn {
            get {
                return this.DateToDateReturnField;
            }
            set {
                if ((this.DateToDateReturnField.Equals(value) != true)) {
                    this.DateToDateReturnField = value;
                    this.RaisePropertyChanged("DateToDateReturn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> LastYearReturn {
            get {
                return this.LastYearReturnField;
            }
            set {
                if ((this.LastYearReturnField.Equals(value) != true)) {
                    this.LastYearReturnField = value;
                    this.RaisePropertyChanged("LastYearReturn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference MarketSnapshotPreferenceInfo {
            get {
                return this.MarketSnapshotPreferenceInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.MarketSnapshotPreferenceInfoField, value) != true)) {
                    this.MarketSnapshotPreferenceInfoField = value;
                    this.RaisePropertyChanged("MarketSnapshotPreferenceInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> MonthToDateReturn {
            get {
                return this.MonthToDateReturnField;
            }
            set {
                if ((this.MonthToDateReturnField.Equals(value) != true)) {
                    this.MonthToDateReturnField = value;
                    this.RaisePropertyChanged("MonthToDateReturn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> QuarterToDateReturn {
            get {
                return this.QuarterToDateReturnField;
            }
            set {
                if ((this.QuarterToDateReturnField.Equals(value) != true)) {
                    this.QuarterToDateReturnField = value;
                    this.RaisePropertyChanged("QuarterToDateReturn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> SecondLastYearReturn {
            get {
                return this.SecondLastYearReturnField;
            }
            set {
                if ((this.SecondLastYearReturnField.Equals(value) != true)) {
                    this.SecondLastYearReturnField = value;
                    this.RaisePropertyChanged("SecondLastYearReturn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> ThirdLastYearReturn {
            get {
                return this.ThirdLastYearReturnField;
            }
            set {
                if ((this.ThirdLastYearReturnField.Equals(value) != true)) {
                    this.ThirdLastYearReturnField = value;
                    this.RaisePropertyChanged("ThirdLastYearReturn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> WeekToDateReturn {
            get {
                return this.WeekToDateReturnField;
            }
            set {
                if ((this.WeekToDateReturnField.Equals(value) != true)) {
                    this.WeekToDateReturnField = value;
                    this.RaisePropertyChanged("WeekToDateReturn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> YearToDateReturn {
            get {
                return this.YearToDateReturnField;
            }
            set {
                if ((this.YearToDateReturnField.Equals(value) != true)) {
                    this.YearToDateReturnField = value;
                    this.RaisePropertyChanged("YearToDateReturn");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PopulatedMarketPerformanceSnapshotData", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.DataContracts")]
    public partial class PopulatedMarketPerformanceSnapshotData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketPerformanceSnapshotData> MarketPerformanceSnapshotInfoField;
        
        private GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotSelectionData MarketSnapshotSelectionInfoField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketPerformanceSnapshotData> MarketPerformanceSnapshotInfo {
            get {
                return this.MarketPerformanceSnapshotInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.MarketPerformanceSnapshotInfoField, value) != true)) {
                    this.MarketPerformanceSnapshotInfoField = value;
                    this.RaisePropertyChanged("MarketPerformanceSnapshotInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotSelectionData MarketSnapshotSelectionInfo {
            get {
                return this.MarketSnapshotSelectionInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.MarketSnapshotSelectionInfoField, value) != true)) {
                    this.MarketSnapshotSelectionInfoField = value;
                    this.RaisePropertyChanged("MarketSnapshotSelectionInfo");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PerformanceDefinitions.PerformanceOperations")]
    public interface PerformanceOperations {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/PerformanceOperations/RetrieveRelativePerformanceUIData", ReplyAction="http://tempuri.org/PerformanceOperations/RetrieveRelativePerformanceUIDataRespons" +
            "e")]
        System.IAsyncResult BeginRetrieveRelativePerformanceUIData(System.Collections.Generic.Dictionary<string, string> objSelectedEntity, System.Nullable<System.DateTime> objEffectiveDate, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceUIData> EndRetrieveRelativePerformanceUIData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/PerformanceOperations/RetrieveBenchmarkChartReturnData", ReplyAction="http://tempuri.org/PerformanceOperations/RetrieveBenchmarkChartReturnDataResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.PerformanceDefinitions.ServiceFault), Action="http://tempuri.org/PerformanceOperations/RetrieveBenchmarkChartReturnDataServiceF" +
            "aultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrieveBenchmarkChartReturnData(System.Collections.Generic.Dictionary<string, string> objSelectedEntities, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.DataContracts.BenchmarkChartReturnData> EndRetrieveBenchmarkChartReturnData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/PerformanceOperations/RetrieveBenchmarkGridReturnData", ReplyAction="http://tempuri.org/PerformanceOperations/RetrieveBenchmarkGridReturnDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.PerformanceDefinitions.ServiceFault), Action="http://tempuri.org/PerformanceOperations/RetrieveBenchmarkGridReturnDataServiceFa" +
            "ultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrieveBenchmarkGridReturnData(System.Collections.Generic.Dictionary<string, string> objSelectedEntities, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.DataContracts.BenchmarkGridReturnData> EndRetrieveBenchmarkGridReturnData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/PerformanceOperations/RetrieveChartExtensionData", ReplyAction="http://tempuri.org/PerformanceOperations/RetrieveChartExtensionDataResponse")]
        System.IAsyncResult BeginRetrieveChartExtensionData(System.Collections.Generic.Dictionary<string, string> objSelectedEntities, System.DateTime objStartDate, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.DataContracts.ChartExtensionData> EndRetrieveChartExtensionData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/PerformanceOperations/RetrieveMarketSnapshotSelectionData", ReplyAction="http://tempuri.org/PerformanceOperations/RetrieveMarketSnapshotSelectionDataRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.PerformanceDefinitions.ServiceFault), Action="http://tempuri.org/PerformanceOperations/RetrieveMarketSnapshotSelectionDataServi" +
            "ceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrieveMarketSnapshotSelectionData(string userName, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotSelectionData> EndRetrieveMarketSnapshotSelectionData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/PerformanceOperations/RetrieveMarketSnapshotPreference", ReplyAction="http://tempuri.org/PerformanceOperations/RetrieveMarketSnapshotPreferenceResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.PerformanceDefinitions.ServiceFault), Action="http://tempuri.org/PerformanceOperations/RetrieveMarketSnapshotPreferenceServiceF" +
            "aultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrieveMarketSnapshotPreference(string userName, string snapshotName, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> EndRetrieveMarketSnapshotPreference(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/PerformanceOperations/RetrieveMarketPerformanceSnapshotData", ReplyAction="http://tempuri.org/PerformanceOperations/RetrieveMarketPerformanceSnapshotDataRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.PerformanceDefinitions.ServiceFault), Action="http://tempuri.org/PerformanceOperations/RetrieveMarketPerformanceSnapshotDataSer" +
            "viceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrieveMarketPerformanceSnapshotData(System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> marketSnapshotPreference, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketPerformanceSnapshotData> EndRetrieveMarketPerformanceSnapshotData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/PerformanceOperations/AddMarketSnapshotPerformance", ReplyAction="http://tempuri.org/PerformanceOperations/AddMarketSnapshotPerformanceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.PerformanceDefinitions.ServiceFault), Action="http://tempuri.org/PerformanceOperations/AddMarketSnapshotPerformanceServiceFault" +
            "Fault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginAddMarketSnapshotPerformance(string userId, string snapshotName, System.AsyncCallback callback, object asyncState);
        
        bool EndAddMarketSnapshotPerformance(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/PerformanceOperations/UpdateMarketSnapshotPerformance", ReplyAction="http://tempuri.org/PerformanceOperations/UpdateMarketSnapshotPerformanceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.PerformanceDefinitions.ServiceFault), Action="http://tempuri.org/PerformanceOperations/UpdateMarketSnapshotPerformanceServiceFa" +
            "ultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginUpdateMarketSnapshotPerformance(string userId, string snapshotName, int snapshotPreferenceId, System.AsyncCallback callback, object asyncState);
        
        bool EndUpdateMarketSnapshotPerformance(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/PerformanceOperations/AddMarketSnapshotGroupPreference", ReplyAction="http://tempuri.org/PerformanceOperations/AddMarketSnapshotGroupPreferenceResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.PerformanceDefinitions.ServiceFault), Action="http://tempuri.org/PerformanceOperations/AddMarketSnapshotGroupPreferenceServiceF" +
            "aultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginAddMarketSnapshotGroupPreference(int snapshotPreferenceId, string groupName, System.AsyncCallback callback, object asyncState);
        
        bool EndAddMarketSnapshotGroupPreference(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/PerformanceOperations/RemoveMarketSnapshotGroupPreference", ReplyAction="http://tempuri.org/PerformanceOperations/RemoveMarketSnapshotGroupPreferenceRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.PerformanceDefinitions.ServiceFault), Action="http://tempuri.org/PerformanceOperations/RemoveMarketSnapshotGroupPreferenceServi" +
            "ceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRemoveMarketSnapshotGroupPreference(int groupPreferenceId, System.AsyncCallback callback, object asyncState);
        
        bool EndRemoveMarketSnapshotGroupPreference(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/PerformanceOperations/AddMarketSnapshotEntityPreference", ReplyAction="http://tempuri.org/PerformanceOperations/AddMarketSnapshotEntityPreferenceRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.PerformanceDefinitions.ServiceFault), Action="http://tempuri.org/PerformanceOperations/AddMarketSnapshotEntityPreferenceService" +
            "FaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginAddMarketSnapshotEntityPreference(GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference marketSnapshotPreference, System.AsyncCallback callback, object asyncState);
        
        bool EndAddMarketSnapshotEntityPreference(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/PerformanceOperations/RemoveMarketSnapshotEntityPreference", ReplyAction="http://tempuri.org/PerformanceOperations/RemoveMarketSnapshotEntityPreferenceResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.PerformanceDefinitions.ServiceFault), Action="http://tempuri.org/PerformanceOperations/RemoveMarketSnapshotEntityPreferenceServ" +
            "iceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRemoveMarketSnapshotEntityPreference(GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference marketSnapshotPreference, System.AsyncCallback callback, object asyncState);
        
        bool EndRemoveMarketSnapshotEntityPreference(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/PerformanceOperations/SaveMarketSnapshotPreference", ReplyAction="http://tempuri.org/PerformanceOperations/SaveMarketSnapshotPreferenceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.PerformanceDefinitions.ServiceFault), Action="http://tempuri.org/PerformanceOperations/SaveMarketSnapshotPreferenceServiceFault" +
            "Fault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginSaveMarketSnapshotPreference(string userName, GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotSelectionData marketSnapshotSelectionData, System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> createEntityPreferenceInfo, System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> updateEntityPreferenceInfo, System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> deleteEntityPreferenceInfo, System.Collections.Generic.List<int> deleteGroupPreferenceInfo, System.Collections.Generic.List<string> createGroupPreferenceInfo, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> EndSaveMarketSnapshotPreference(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/PerformanceOperations/SaveAsMarketSnapshotPreference", ReplyAction="http://tempuri.org/PerformanceOperations/SaveAsMarketSnapshotPreferenceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.PerformanceDefinitions.ServiceFault), Action="http://tempuri.org/PerformanceOperations/SaveAsMarketSnapshotPreferenceServiceFau" +
            "ltFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginSaveAsMarketSnapshotPreference(string userName, string snapshotName, System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> snapshotPreference, System.AsyncCallback callback, object asyncState);
        
        GreenField.ServiceCaller.PerformanceDefinitions.PopulatedMarketPerformanceSnapshotData EndSaveAsMarketSnapshotPreference(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/PerformanceOperations/RemoveMarketSnapshotPreference", ReplyAction="http://tempuri.org/PerformanceOperations/RemoveMarketSnapshotPreferenceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.PerformanceDefinitions.ServiceFault), Action="http://tempuri.org/PerformanceOperations/RemoveMarketSnapshotPreferenceServiceFau" +
            "ltFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRemoveMarketSnapshotPreference(string userName, string snapshotName, System.AsyncCallback callback, object asyncState);
        
        bool EndRemoveMarketSnapshotPreference(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface PerformanceOperationsChannel : GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveRelativePerformanceUIDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveRelativePerformanceUIDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceUIData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceUIData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveBenchmarkChartReturnDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveBenchmarkChartReturnDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.DataContracts.BenchmarkChartReturnData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.DataContracts.BenchmarkChartReturnData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveBenchmarkGridReturnDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveBenchmarkGridReturnDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.DataContracts.BenchmarkGridReturnData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.DataContracts.BenchmarkGridReturnData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveChartExtensionDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveChartExtensionDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.DataContracts.ChartExtensionData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.DataContracts.ChartExtensionData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveMarketSnapshotSelectionDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveMarketSnapshotSelectionDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotSelectionData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotSelectionData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveMarketSnapshotPreferenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveMarketSnapshotPreferenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveMarketPerformanceSnapshotDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveMarketPerformanceSnapshotDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketPerformanceSnapshotData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketPerformanceSnapshotData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddMarketSnapshotPerformanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddMarketSnapshotPerformanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateMarketSnapshotPerformanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateMarketSnapshotPerformanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddMarketSnapshotGroupPreferenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddMarketSnapshotGroupPreferenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RemoveMarketSnapshotGroupPreferenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RemoveMarketSnapshotGroupPreferenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddMarketSnapshotEntityPreferenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddMarketSnapshotEntityPreferenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RemoveMarketSnapshotEntityPreferenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RemoveMarketSnapshotEntityPreferenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveMarketSnapshotPreferenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveMarketSnapshotPreferenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveAsMarketSnapshotPreferenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveAsMarketSnapshotPreferenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public GreenField.ServiceCaller.PerformanceDefinitions.PopulatedMarketPerformanceSnapshotData Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((GreenField.ServiceCaller.PerformanceDefinitions.PopulatedMarketPerformanceSnapshotData)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RemoveMarketSnapshotPreferenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RemoveMarketSnapshotPreferenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PerformanceOperationsClient : System.ServiceModel.ClientBase<GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations>, GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations {
        
        private BeginOperationDelegate onBeginRetrieveRelativePerformanceUIDataDelegate;
        
        private EndOperationDelegate onEndRetrieveRelativePerformanceUIDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveRelativePerformanceUIDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveBenchmarkChartReturnDataDelegate;
        
        private EndOperationDelegate onEndRetrieveBenchmarkChartReturnDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveBenchmarkChartReturnDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveBenchmarkGridReturnDataDelegate;
        
        private EndOperationDelegate onEndRetrieveBenchmarkGridReturnDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveBenchmarkGridReturnDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveChartExtensionDataDelegate;
        
        private EndOperationDelegate onEndRetrieveChartExtensionDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveChartExtensionDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveMarketSnapshotSelectionDataDelegate;
        
        private EndOperationDelegate onEndRetrieveMarketSnapshotSelectionDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveMarketSnapshotSelectionDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveMarketSnapshotPreferenceDelegate;
        
        private EndOperationDelegate onEndRetrieveMarketSnapshotPreferenceDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveMarketSnapshotPreferenceCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveMarketPerformanceSnapshotDataDelegate;
        
        private EndOperationDelegate onEndRetrieveMarketPerformanceSnapshotDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveMarketPerformanceSnapshotDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddMarketSnapshotPerformanceDelegate;
        
        private EndOperationDelegate onEndAddMarketSnapshotPerformanceDelegate;
        
        private System.Threading.SendOrPostCallback onAddMarketSnapshotPerformanceCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateMarketSnapshotPerformanceDelegate;
        
        private EndOperationDelegate onEndUpdateMarketSnapshotPerformanceDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateMarketSnapshotPerformanceCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddMarketSnapshotGroupPreferenceDelegate;
        
        private EndOperationDelegate onEndAddMarketSnapshotGroupPreferenceDelegate;
        
        private System.Threading.SendOrPostCallback onAddMarketSnapshotGroupPreferenceCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveMarketSnapshotGroupPreferenceDelegate;
        
        private EndOperationDelegate onEndRemoveMarketSnapshotGroupPreferenceDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveMarketSnapshotGroupPreferenceCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddMarketSnapshotEntityPreferenceDelegate;
        
        private EndOperationDelegate onEndAddMarketSnapshotEntityPreferenceDelegate;
        
        private System.Threading.SendOrPostCallback onAddMarketSnapshotEntityPreferenceCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveMarketSnapshotEntityPreferenceDelegate;
        
        private EndOperationDelegate onEndRemoveMarketSnapshotEntityPreferenceDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveMarketSnapshotEntityPreferenceCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveMarketSnapshotPreferenceDelegate;
        
        private EndOperationDelegate onEndSaveMarketSnapshotPreferenceDelegate;
        
        private System.Threading.SendOrPostCallback onSaveMarketSnapshotPreferenceCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveAsMarketSnapshotPreferenceDelegate;
        
        private EndOperationDelegate onEndSaveAsMarketSnapshotPreferenceDelegate;
        
        private System.Threading.SendOrPostCallback onSaveAsMarketSnapshotPreferenceCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveMarketSnapshotPreferenceDelegate;
        
        private EndOperationDelegate onEndRemoveMarketSnapshotPreferenceDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveMarketSnapshotPreferenceCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public PerformanceOperationsClient() {
        }
        
        public PerformanceOperationsClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PerformanceOperationsClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PerformanceOperationsClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PerformanceOperationsClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<RetrieveRelativePerformanceUIDataCompletedEventArgs> RetrieveRelativePerformanceUIDataCompleted;
        
        public event System.EventHandler<RetrieveBenchmarkChartReturnDataCompletedEventArgs> RetrieveBenchmarkChartReturnDataCompleted;
        
        public event System.EventHandler<RetrieveBenchmarkGridReturnDataCompletedEventArgs> RetrieveBenchmarkGridReturnDataCompleted;
        
        public event System.EventHandler<RetrieveChartExtensionDataCompletedEventArgs> RetrieveChartExtensionDataCompleted;
        
        public event System.EventHandler<RetrieveMarketSnapshotSelectionDataCompletedEventArgs> RetrieveMarketSnapshotSelectionDataCompleted;
        
        public event System.EventHandler<RetrieveMarketSnapshotPreferenceCompletedEventArgs> RetrieveMarketSnapshotPreferenceCompleted;
        
        public event System.EventHandler<RetrieveMarketPerformanceSnapshotDataCompletedEventArgs> RetrieveMarketPerformanceSnapshotDataCompleted;
        
        public event System.EventHandler<AddMarketSnapshotPerformanceCompletedEventArgs> AddMarketSnapshotPerformanceCompleted;
        
        public event System.EventHandler<UpdateMarketSnapshotPerformanceCompletedEventArgs> UpdateMarketSnapshotPerformanceCompleted;
        
        public event System.EventHandler<AddMarketSnapshotGroupPreferenceCompletedEventArgs> AddMarketSnapshotGroupPreferenceCompleted;
        
        public event System.EventHandler<RemoveMarketSnapshotGroupPreferenceCompletedEventArgs> RemoveMarketSnapshotGroupPreferenceCompleted;
        
        public event System.EventHandler<AddMarketSnapshotEntityPreferenceCompletedEventArgs> AddMarketSnapshotEntityPreferenceCompleted;
        
        public event System.EventHandler<RemoveMarketSnapshotEntityPreferenceCompletedEventArgs> RemoveMarketSnapshotEntityPreferenceCompleted;
        
        public event System.EventHandler<SaveMarketSnapshotPreferenceCompletedEventArgs> SaveMarketSnapshotPreferenceCompleted;
        
        public event System.EventHandler<SaveAsMarketSnapshotPreferenceCompletedEventArgs> SaveAsMarketSnapshotPreferenceCompleted;
        
        public event System.EventHandler<RemoveMarketSnapshotPreferenceCompletedEventArgs> RemoveMarketSnapshotPreferenceCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.BeginRetrieveRelativePerformanceUIData(System.Collections.Generic.Dictionary<string, string> objSelectedEntity, System.Nullable<System.DateTime> objEffectiveDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveRelativePerformanceUIData(objSelectedEntity, objEffectiveDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceUIData> GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.EndRetrieveRelativePerformanceUIData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveRelativePerformanceUIData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveRelativePerformanceUIData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.Dictionary<string, string> objSelectedEntity = ((System.Collections.Generic.Dictionary<string, string>)(inValues[0]));
            System.Nullable<System.DateTime> objEffectiveDate = ((System.Nullable<System.DateTime>)(inValues[1]));
            return ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).BeginRetrieveRelativePerformanceUIData(objSelectedEntity, objEffectiveDate, callback, asyncState);
        }
        
        private object[] OnEndRetrieveRelativePerformanceUIData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceUIData> retVal = ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).EndRetrieveRelativePerformanceUIData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveRelativePerformanceUIDataCompleted(object state) {
            if ((this.RetrieveRelativePerformanceUIDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveRelativePerformanceUIDataCompleted(this, new RetrieveRelativePerformanceUIDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveRelativePerformanceUIDataAsync(System.Collections.Generic.Dictionary<string, string> objSelectedEntity, System.Nullable<System.DateTime> objEffectiveDate) {
            this.RetrieveRelativePerformanceUIDataAsync(objSelectedEntity, objEffectiveDate, null);
        }
        
        public void RetrieveRelativePerformanceUIDataAsync(System.Collections.Generic.Dictionary<string, string> objSelectedEntity, System.Nullable<System.DateTime> objEffectiveDate, object userState) {
            if ((this.onBeginRetrieveRelativePerformanceUIDataDelegate == null)) {
                this.onBeginRetrieveRelativePerformanceUIDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveRelativePerformanceUIData);
            }
            if ((this.onEndRetrieveRelativePerformanceUIDataDelegate == null)) {
                this.onEndRetrieveRelativePerformanceUIDataDelegate = new EndOperationDelegate(this.OnEndRetrieveRelativePerformanceUIData);
            }
            if ((this.onRetrieveRelativePerformanceUIDataCompletedDelegate == null)) {
                this.onRetrieveRelativePerformanceUIDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveRelativePerformanceUIDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveRelativePerformanceUIDataDelegate, new object[] {
                        objSelectedEntity,
                        objEffectiveDate}, this.onEndRetrieveRelativePerformanceUIDataDelegate, this.onRetrieveRelativePerformanceUIDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.BeginRetrieveBenchmarkChartReturnData(System.Collections.Generic.Dictionary<string, string> objSelectedEntities, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveBenchmarkChartReturnData(objSelectedEntities, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.DataContracts.BenchmarkChartReturnData> GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.EndRetrieveBenchmarkChartReturnData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveBenchmarkChartReturnData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveBenchmarkChartReturnData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.Dictionary<string, string> objSelectedEntities = ((System.Collections.Generic.Dictionary<string, string>)(inValues[0]));
            return ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).BeginRetrieveBenchmarkChartReturnData(objSelectedEntities, callback, asyncState);
        }
        
        private object[] OnEndRetrieveBenchmarkChartReturnData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.DataContracts.BenchmarkChartReturnData> retVal = ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).EndRetrieveBenchmarkChartReturnData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveBenchmarkChartReturnDataCompleted(object state) {
            if ((this.RetrieveBenchmarkChartReturnDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveBenchmarkChartReturnDataCompleted(this, new RetrieveBenchmarkChartReturnDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveBenchmarkChartReturnDataAsync(System.Collections.Generic.Dictionary<string, string> objSelectedEntities) {
            this.RetrieveBenchmarkChartReturnDataAsync(objSelectedEntities, null);
        }
        
        public void RetrieveBenchmarkChartReturnDataAsync(System.Collections.Generic.Dictionary<string, string> objSelectedEntities, object userState) {
            if ((this.onBeginRetrieveBenchmarkChartReturnDataDelegate == null)) {
                this.onBeginRetrieveBenchmarkChartReturnDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveBenchmarkChartReturnData);
            }
            if ((this.onEndRetrieveBenchmarkChartReturnDataDelegate == null)) {
                this.onEndRetrieveBenchmarkChartReturnDataDelegate = new EndOperationDelegate(this.OnEndRetrieveBenchmarkChartReturnData);
            }
            if ((this.onRetrieveBenchmarkChartReturnDataCompletedDelegate == null)) {
                this.onRetrieveBenchmarkChartReturnDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveBenchmarkChartReturnDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveBenchmarkChartReturnDataDelegate, new object[] {
                        objSelectedEntities}, this.onEndRetrieveBenchmarkChartReturnDataDelegate, this.onRetrieveBenchmarkChartReturnDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.BeginRetrieveBenchmarkGridReturnData(System.Collections.Generic.Dictionary<string, string> objSelectedEntities, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveBenchmarkGridReturnData(objSelectedEntities, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.DataContracts.BenchmarkGridReturnData> GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.EndRetrieveBenchmarkGridReturnData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveBenchmarkGridReturnData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveBenchmarkGridReturnData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.Dictionary<string, string> objSelectedEntities = ((System.Collections.Generic.Dictionary<string, string>)(inValues[0]));
            return ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).BeginRetrieveBenchmarkGridReturnData(objSelectedEntities, callback, asyncState);
        }
        
        private object[] OnEndRetrieveBenchmarkGridReturnData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.DataContracts.BenchmarkGridReturnData> retVal = ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).EndRetrieveBenchmarkGridReturnData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveBenchmarkGridReturnDataCompleted(object state) {
            if ((this.RetrieveBenchmarkGridReturnDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveBenchmarkGridReturnDataCompleted(this, new RetrieveBenchmarkGridReturnDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveBenchmarkGridReturnDataAsync(System.Collections.Generic.Dictionary<string, string> objSelectedEntities) {
            this.RetrieveBenchmarkGridReturnDataAsync(objSelectedEntities, null);
        }
        
        public void RetrieveBenchmarkGridReturnDataAsync(System.Collections.Generic.Dictionary<string, string> objSelectedEntities, object userState) {
            if ((this.onBeginRetrieveBenchmarkGridReturnDataDelegate == null)) {
                this.onBeginRetrieveBenchmarkGridReturnDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveBenchmarkGridReturnData);
            }
            if ((this.onEndRetrieveBenchmarkGridReturnDataDelegate == null)) {
                this.onEndRetrieveBenchmarkGridReturnDataDelegate = new EndOperationDelegate(this.OnEndRetrieveBenchmarkGridReturnData);
            }
            if ((this.onRetrieveBenchmarkGridReturnDataCompletedDelegate == null)) {
                this.onRetrieveBenchmarkGridReturnDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveBenchmarkGridReturnDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveBenchmarkGridReturnDataDelegate, new object[] {
                        objSelectedEntities}, this.onEndRetrieveBenchmarkGridReturnDataDelegate, this.onRetrieveBenchmarkGridReturnDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.BeginRetrieveChartExtensionData(System.Collections.Generic.Dictionary<string, string> objSelectedEntities, System.DateTime objStartDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveChartExtensionData(objSelectedEntities, objStartDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.DataContracts.ChartExtensionData> GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.EndRetrieveChartExtensionData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveChartExtensionData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveChartExtensionData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.Dictionary<string, string> objSelectedEntities = ((System.Collections.Generic.Dictionary<string, string>)(inValues[0]));
            System.DateTime objStartDate = ((System.DateTime)(inValues[1]));
            return ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).BeginRetrieveChartExtensionData(objSelectedEntities, objStartDate, callback, asyncState);
        }
        
        private object[] OnEndRetrieveChartExtensionData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.DataContracts.ChartExtensionData> retVal = ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).EndRetrieveChartExtensionData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveChartExtensionDataCompleted(object state) {
            if ((this.RetrieveChartExtensionDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveChartExtensionDataCompleted(this, new RetrieveChartExtensionDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveChartExtensionDataAsync(System.Collections.Generic.Dictionary<string, string> objSelectedEntities, System.DateTime objStartDate) {
            this.RetrieveChartExtensionDataAsync(objSelectedEntities, objStartDate, null);
        }
        
        public void RetrieveChartExtensionDataAsync(System.Collections.Generic.Dictionary<string, string> objSelectedEntities, System.DateTime objStartDate, object userState) {
            if ((this.onBeginRetrieveChartExtensionDataDelegate == null)) {
                this.onBeginRetrieveChartExtensionDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveChartExtensionData);
            }
            if ((this.onEndRetrieveChartExtensionDataDelegate == null)) {
                this.onEndRetrieveChartExtensionDataDelegate = new EndOperationDelegate(this.OnEndRetrieveChartExtensionData);
            }
            if ((this.onRetrieveChartExtensionDataCompletedDelegate == null)) {
                this.onRetrieveChartExtensionDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveChartExtensionDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveChartExtensionDataDelegate, new object[] {
                        objSelectedEntities,
                        objStartDate}, this.onEndRetrieveChartExtensionDataDelegate, this.onRetrieveChartExtensionDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.BeginRetrieveMarketSnapshotSelectionData(string userName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveMarketSnapshotSelectionData(userName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotSelectionData> GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.EndRetrieveMarketSnapshotSelectionData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveMarketSnapshotSelectionData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveMarketSnapshotSelectionData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userName = ((string)(inValues[0]));
            return ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).BeginRetrieveMarketSnapshotSelectionData(userName, callback, asyncState);
        }
        
        private object[] OnEndRetrieveMarketSnapshotSelectionData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotSelectionData> retVal = ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).EndRetrieveMarketSnapshotSelectionData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveMarketSnapshotSelectionDataCompleted(object state) {
            if ((this.RetrieveMarketSnapshotSelectionDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveMarketSnapshotSelectionDataCompleted(this, new RetrieveMarketSnapshotSelectionDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveMarketSnapshotSelectionDataAsync(string userName) {
            this.RetrieveMarketSnapshotSelectionDataAsync(userName, null);
        }
        
        public void RetrieveMarketSnapshotSelectionDataAsync(string userName, object userState) {
            if ((this.onBeginRetrieveMarketSnapshotSelectionDataDelegate == null)) {
                this.onBeginRetrieveMarketSnapshotSelectionDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveMarketSnapshotSelectionData);
            }
            if ((this.onEndRetrieveMarketSnapshotSelectionDataDelegate == null)) {
                this.onEndRetrieveMarketSnapshotSelectionDataDelegate = new EndOperationDelegate(this.OnEndRetrieveMarketSnapshotSelectionData);
            }
            if ((this.onRetrieveMarketSnapshotSelectionDataCompletedDelegate == null)) {
                this.onRetrieveMarketSnapshotSelectionDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveMarketSnapshotSelectionDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveMarketSnapshotSelectionDataDelegate, new object[] {
                        userName}, this.onEndRetrieveMarketSnapshotSelectionDataDelegate, this.onRetrieveMarketSnapshotSelectionDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.BeginRetrieveMarketSnapshotPreference(string userName, string snapshotName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveMarketSnapshotPreference(userName, snapshotName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.EndRetrieveMarketSnapshotPreference(System.IAsyncResult result) {
            return base.Channel.EndRetrieveMarketSnapshotPreference(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveMarketSnapshotPreference(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userName = ((string)(inValues[0]));
            string snapshotName = ((string)(inValues[1]));
            return ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).BeginRetrieveMarketSnapshotPreference(userName, snapshotName, callback, asyncState);
        }
        
        private object[] OnEndRetrieveMarketSnapshotPreference(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> retVal = ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).EndRetrieveMarketSnapshotPreference(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveMarketSnapshotPreferenceCompleted(object state) {
            if ((this.RetrieveMarketSnapshotPreferenceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveMarketSnapshotPreferenceCompleted(this, new RetrieveMarketSnapshotPreferenceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveMarketSnapshotPreferenceAsync(string userName, string snapshotName) {
            this.RetrieveMarketSnapshotPreferenceAsync(userName, snapshotName, null);
        }
        
        public void RetrieveMarketSnapshotPreferenceAsync(string userName, string snapshotName, object userState) {
            if ((this.onBeginRetrieveMarketSnapshotPreferenceDelegate == null)) {
                this.onBeginRetrieveMarketSnapshotPreferenceDelegate = new BeginOperationDelegate(this.OnBeginRetrieveMarketSnapshotPreference);
            }
            if ((this.onEndRetrieveMarketSnapshotPreferenceDelegate == null)) {
                this.onEndRetrieveMarketSnapshotPreferenceDelegate = new EndOperationDelegate(this.OnEndRetrieveMarketSnapshotPreference);
            }
            if ((this.onRetrieveMarketSnapshotPreferenceCompletedDelegate == null)) {
                this.onRetrieveMarketSnapshotPreferenceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveMarketSnapshotPreferenceCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveMarketSnapshotPreferenceDelegate, new object[] {
                        userName,
                        snapshotName}, this.onEndRetrieveMarketSnapshotPreferenceDelegate, this.onRetrieveMarketSnapshotPreferenceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.BeginRetrieveMarketPerformanceSnapshotData(System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> marketSnapshotPreference, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveMarketPerformanceSnapshotData(marketSnapshotPreference, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketPerformanceSnapshotData> GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.EndRetrieveMarketPerformanceSnapshotData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveMarketPerformanceSnapshotData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveMarketPerformanceSnapshotData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> marketSnapshotPreference = ((System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference>)(inValues[0]));
            return ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).BeginRetrieveMarketPerformanceSnapshotData(marketSnapshotPreference, callback, asyncState);
        }
        
        private object[] OnEndRetrieveMarketPerformanceSnapshotData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketPerformanceSnapshotData> retVal = ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).EndRetrieveMarketPerformanceSnapshotData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveMarketPerformanceSnapshotDataCompleted(object state) {
            if ((this.RetrieveMarketPerformanceSnapshotDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveMarketPerformanceSnapshotDataCompleted(this, new RetrieveMarketPerformanceSnapshotDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveMarketPerformanceSnapshotDataAsync(System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> marketSnapshotPreference) {
            this.RetrieveMarketPerformanceSnapshotDataAsync(marketSnapshotPreference, null);
        }
        
        public void RetrieveMarketPerformanceSnapshotDataAsync(System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> marketSnapshotPreference, object userState) {
            if ((this.onBeginRetrieveMarketPerformanceSnapshotDataDelegate == null)) {
                this.onBeginRetrieveMarketPerformanceSnapshotDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveMarketPerformanceSnapshotData);
            }
            if ((this.onEndRetrieveMarketPerformanceSnapshotDataDelegate == null)) {
                this.onEndRetrieveMarketPerformanceSnapshotDataDelegate = new EndOperationDelegate(this.OnEndRetrieveMarketPerformanceSnapshotData);
            }
            if ((this.onRetrieveMarketPerformanceSnapshotDataCompletedDelegate == null)) {
                this.onRetrieveMarketPerformanceSnapshotDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveMarketPerformanceSnapshotDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveMarketPerformanceSnapshotDataDelegate, new object[] {
                        marketSnapshotPreference}, this.onEndRetrieveMarketPerformanceSnapshotDataDelegate, this.onRetrieveMarketPerformanceSnapshotDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.BeginAddMarketSnapshotPerformance(string userId, string snapshotName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddMarketSnapshotPerformance(userId, snapshotName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.EndAddMarketSnapshotPerformance(System.IAsyncResult result) {
            return base.Channel.EndAddMarketSnapshotPerformance(result);
        }
        
        private System.IAsyncResult OnBeginAddMarketSnapshotPerformance(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userId = ((string)(inValues[0]));
            string snapshotName = ((string)(inValues[1]));
            return ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).BeginAddMarketSnapshotPerformance(userId, snapshotName, callback, asyncState);
        }
        
        private object[] OnEndAddMarketSnapshotPerformance(System.IAsyncResult result) {
            bool retVal = ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).EndAddMarketSnapshotPerformance(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddMarketSnapshotPerformanceCompleted(object state) {
            if ((this.AddMarketSnapshotPerformanceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddMarketSnapshotPerformanceCompleted(this, new AddMarketSnapshotPerformanceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddMarketSnapshotPerformanceAsync(string userId, string snapshotName) {
            this.AddMarketSnapshotPerformanceAsync(userId, snapshotName, null);
        }
        
        public void AddMarketSnapshotPerformanceAsync(string userId, string snapshotName, object userState) {
            if ((this.onBeginAddMarketSnapshotPerformanceDelegate == null)) {
                this.onBeginAddMarketSnapshotPerformanceDelegate = new BeginOperationDelegate(this.OnBeginAddMarketSnapshotPerformance);
            }
            if ((this.onEndAddMarketSnapshotPerformanceDelegate == null)) {
                this.onEndAddMarketSnapshotPerformanceDelegate = new EndOperationDelegate(this.OnEndAddMarketSnapshotPerformance);
            }
            if ((this.onAddMarketSnapshotPerformanceCompletedDelegate == null)) {
                this.onAddMarketSnapshotPerformanceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddMarketSnapshotPerformanceCompleted);
            }
            base.InvokeAsync(this.onBeginAddMarketSnapshotPerformanceDelegate, new object[] {
                        userId,
                        snapshotName}, this.onEndAddMarketSnapshotPerformanceDelegate, this.onAddMarketSnapshotPerformanceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.BeginUpdateMarketSnapshotPerformance(string userId, string snapshotName, int snapshotPreferenceId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateMarketSnapshotPerformance(userId, snapshotName, snapshotPreferenceId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.EndUpdateMarketSnapshotPerformance(System.IAsyncResult result) {
            return base.Channel.EndUpdateMarketSnapshotPerformance(result);
        }
        
        private System.IAsyncResult OnBeginUpdateMarketSnapshotPerformance(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userId = ((string)(inValues[0]));
            string snapshotName = ((string)(inValues[1]));
            int snapshotPreferenceId = ((int)(inValues[2]));
            return ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).BeginUpdateMarketSnapshotPerformance(userId, snapshotName, snapshotPreferenceId, callback, asyncState);
        }
        
        private object[] OnEndUpdateMarketSnapshotPerformance(System.IAsyncResult result) {
            bool retVal = ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).EndUpdateMarketSnapshotPerformance(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateMarketSnapshotPerformanceCompleted(object state) {
            if ((this.UpdateMarketSnapshotPerformanceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateMarketSnapshotPerformanceCompleted(this, new UpdateMarketSnapshotPerformanceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateMarketSnapshotPerformanceAsync(string userId, string snapshotName, int snapshotPreferenceId) {
            this.UpdateMarketSnapshotPerformanceAsync(userId, snapshotName, snapshotPreferenceId, null);
        }
        
        public void UpdateMarketSnapshotPerformanceAsync(string userId, string snapshotName, int snapshotPreferenceId, object userState) {
            if ((this.onBeginUpdateMarketSnapshotPerformanceDelegate == null)) {
                this.onBeginUpdateMarketSnapshotPerformanceDelegate = new BeginOperationDelegate(this.OnBeginUpdateMarketSnapshotPerformance);
            }
            if ((this.onEndUpdateMarketSnapshotPerformanceDelegate == null)) {
                this.onEndUpdateMarketSnapshotPerformanceDelegate = new EndOperationDelegate(this.OnEndUpdateMarketSnapshotPerformance);
            }
            if ((this.onUpdateMarketSnapshotPerformanceCompletedDelegate == null)) {
                this.onUpdateMarketSnapshotPerformanceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateMarketSnapshotPerformanceCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateMarketSnapshotPerformanceDelegate, new object[] {
                        userId,
                        snapshotName,
                        snapshotPreferenceId}, this.onEndUpdateMarketSnapshotPerformanceDelegate, this.onUpdateMarketSnapshotPerformanceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.BeginAddMarketSnapshotGroupPreference(int snapshotPreferenceId, string groupName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddMarketSnapshotGroupPreference(snapshotPreferenceId, groupName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.EndAddMarketSnapshotGroupPreference(System.IAsyncResult result) {
            return base.Channel.EndAddMarketSnapshotGroupPreference(result);
        }
        
        private System.IAsyncResult OnBeginAddMarketSnapshotGroupPreference(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int snapshotPreferenceId = ((int)(inValues[0]));
            string groupName = ((string)(inValues[1]));
            return ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).BeginAddMarketSnapshotGroupPreference(snapshotPreferenceId, groupName, callback, asyncState);
        }
        
        private object[] OnEndAddMarketSnapshotGroupPreference(System.IAsyncResult result) {
            bool retVal = ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).EndAddMarketSnapshotGroupPreference(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddMarketSnapshotGroupPreferenceCompleted(object state) {
            if ((this.AddMarketSnapshotGroupPreferenceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddMarketSnapshotGroupPreferenceCompleted(this, new AddMarketSnapshotGroupPreferenceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddMarketSnapshotGroupPreferenceAsync(int snapshotPreferenceId, string groupName) {
            this.AddMarketSnapshotGroupPreferenceAsync(snapshotPreferenceId, groupName, null);
        }
        
        public void AddMarketSnapshotGroupPreferenceAsync(int snapshotPreferenceId, string groupName, object userState) {
            if ((this.onBeginAddMarketSnapshotGroupPreferenceDelegate == null)) {
                this.onBeginAddMarketSnapshotGroupPreferenceDelegate = new BeginOperationDelegate(this.OnBeginAddMarketSnapshotGroupPreference);
            }
            if ((this.onEndAddMarketSnapshotGroupPreferenceDelegate == null)) {
                this.onEndAddMarketSnapshotGroupPreferenceDelegate = new EndOperationDelegate(this.OnEndAddMarketSnapshotGroupPreference);
            }
            if ((this.onAddMarketSnapshotGroupPreferenceCompletedDelegate == null)) {
                this.onAddMarketSnapshotGroupPreferenceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddMarketSnapshotGroupPreferenceCompleted);
            }
            base.InvokeAsync(this.onBeginAddMarketSnapshotGroupPreferenceDelegate, new object[] {
                        snapshotPreferenceId,
                        groupName}, this.onEndAddMarketSnapshotGroupPreferenceDelegate, this.onAddMarketSnapshotGroupPreferenceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.BeginRemoveMarketSnapshotGroupPreference(int groupPreferenceId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveMarketSnapshotGroupPreference(groupPreferenceId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.EndRemoveMarketSnapshotGroupPreference(System.IAsyncResult result) {
            return base.Channel.EndRemoveMarketSnapshotGroupPreference(result);
        }
        
        private System.IAsyncResult OnBeginRemoveMarketSnapshotGroupPreference(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int groupPreferenceId = ((int)(inValues[0]));
            return ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).BeginRemoveMarketSnapshotGroupPreference(groupPreferenceId, callback, asyncState);
        }
        
        private object[] OnEndRemoveMarketSnapshotGroupPreference(System.IAsyncResult result) {
            bool retVal = ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).EndRemoveMarketSnapshotGroupPreference(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRemoveMarketSnapshotGroupPreferenceCompleted(object state) {
            if ((this.RemoveMarketSnapshotGroupPreferenceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveMarketSnapshotGroupPreferenceCompleted(this, new RemoveMarketSnapshotGroupPreferenceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveMarketSnapshotGroupPreferenceAsync(int groupPreferenceId) {
            this.RemoveMarketSnapshotGroupPreferenceAsync(groupPreferenceId, null);
        }
        
        public void RemoveMarketSnapshotGroupPreferenceAsync(int groupPreferenceId, object userState) {
            if ((this.onBeginRemoveMarketSnapshotGroupPreferenceDelegate == null)) {
                this.onBeginRemoveMarketSnapshotGroupPreferenceDelegate = new BeginOperationDelegate(this.OnBeginRemoveMarketSnapshotGroupPreference);
            }
            if ((this.onEndRemoveMarketSnapshotGroupPreferenceDelegate == null)) {
                this.onEndRemoveMarketSnapshotGroupPreferenceDelegate = new EndOperationDelegate(this.OnEndRemoveMarketSnapshotGroupPreference);
            }
            if ((this.onRemoveMarketSnapshotGroupPreferenceCompletedDelegate == null)) {
                this.onRemoveMarketSnapshotGroupPreferenceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveMarketSnapshotGroupPreferenceCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveMarketSnapshotGroupPreferenceDelegate, new object[] {
                        groupPreferenceId}, this.onEndRemoveMarketSnapshotGroupPreferenceDelegate, this.onRemoveMarketSnapshotGroupPreferenceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.BeginAddMarketSnapshotEntityPreference(GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference marketSnapshotPreference, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddMarketSnapshotEntityPreference(marketSnapshotPreference, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.EndAddMarketSnapshotEntityPreference(System.IAsyncResult result) {
            return base.Channel.EndAddMarketSnapshotEntityPreference(result);
        }
        
        private System.IAsyncResult OnBeginAddMarketSnapshotEntityPreference(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference marketSnapshotPreference = ((GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference)(inValues[0]));
            return ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).BeginAddMarketSnapshotEntityPreference(marketSnapshotPreference, callback, asyncState);
        }
        
        private object[] OnEndAddMarketSnapshotEntityPreference(System.IAsyncResult result) {
            bool retVal = ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).EndAddMarketSnapshotEntityPreference(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddMarketSnapshotEntityPreferenceCompleted(object state) {
            if ((this.AddMarketSnapshotEntityPreferenceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddMarketSnapshotEntityPreferenceCompleted(this, new AddMarketSnapshotEntityPreferenceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddMarketSnapshotEntityPreferenceAsync(GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference marketSnapshotPreference) {
            this.AddMarketSnapshotEntityPreferenceAsync(marketSnapshotPreference, null);
        }
        
        public void AddMarketSnapshotEntityPreferenceAsync(GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference marketSnapshotPreference, object userState) {
            if ((this.onBeginAddMarketSnapshotEntityPreferenceDelegate == null)) {
                this.onBeginAddMarketSnapshotEntityPreferenceDelegate = new BeginOperationDelegate(this.OnBeginAddMarketSnapshotEntityPreference);
            }
            if ((this.onEndAddMarketSnapshotEntityPreferenceDelegate == null)) {
                this.onEndAddMarketSnapshotEntityPreferenceDelegate = new EndOperationDelegate(this.OnEndAddMarketSnapshotEntityPreference);
            }
            if ((this.onAddMarketSnapshotEntityPreferenceCompletedDelegate == null)) {
                this.onAddMarketSnapshotEntityPreferenceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddMarketSnapshotEntityPreferenceCompleted);
            }
            base.InvokeAsync(this.onBeginAddMarketSnapshotEntityPreferenceDelegate, new object[] {
                        marketSnapshotPreference}, this.onEndAddMarketSnapshotEntityPreferenceDelegate, this.onAddMarketSnapshotEntityPreferenceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.BeginRemoveMarketSnapshotEntityPreference(GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference marketSnapshotPreference, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveMarketSnapshotEntityPreference(marketSnapshotPreference, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.EndRemoveMarketSnapshotEntityPreference(System.IAsyncResult result) {
            return base.Channel.EndRemoveMarketSnapshotEntityPreference(result);
        }
        
        private System.IAsyncResult OnBeginRemoveMarketSnapshotEntityPreference(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference marketSnapshotPreference = ((GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference)(inValues[0]));
            return ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).BeginRemoveMarketSnapshotEntityPreference(marketSnapshotPreference, callback, asyncState);
        }
        
        private object[] OnEndRemoveMarketSnapshotEntityPreference(System.IAsyncResult result) {
            bool retVal = ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).EndRemoveMarketSnapshotEntityPreference(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRemoveMarketSnapshotEntityPreferenceCompleted(object state) {
            if ((this.RemoveMarketSnapshotEntityPreferenceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveMarketSnapshotEntityPreferenceCompleted(this, new RemoveMarketSnapshotEntityPreferenceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveMarketSnapshotEntityPreferenceAsync(GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference marketSnapshotPreference) {
            this.RemoveMarketSnapshotEntityPreferenceAsync(marketSnapshotPreference, null);
        }
        
        public void RemoveMarketSnapshotEntityPreferenceAsync(GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference marketSnapshotPreference, object userState) {
            if ((this.onBeginRemoveMarketSnapshotEntityPreferenceDelegate == null)) {
                this.onBeginRemoveMarketSnapshotEntityPreferenceDelegate = new BeginOperationDelegate(this.OnBeginRemoveMarketSnapshotEntityPreference);
            }
            if ((this.onEndRemoveMarketSnapshotEntityPreferenceDelegate == null)) {
                this.onEndRemoveMarketSnapshotEntityPreferenceDelegate = new EndOperationDelegate(this.OnEndRemoveMarketSnapshotEntityPreference);
            }
            if ((this.onRemoveMarketSnapshotEntityPreferenceCompletedDelegate == null)) {
                this.onRemoveMarketSnapshotEntityPreferenceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveMarketSnapshotEntityPreferenceCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveMarketSnapshotEntityPreferenceDelegate, new object[] {
                        marketSnapshotPreference}, this.onEndRemoveMarketSnapshotEntityPreferenceDelegate, this.onRemoveMarketSnapshotEntityPreferenceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.BeginSaveMarketSnapshotPreference(string userName, GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotSelectionData marketSnapshotSelectionData, System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> createEntityPreferenceInfo, System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> updateEntityPreferenceInfo, System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> deleteEntityPreferenceInfo, System.Collections.Generic.List<int> deleteGroupPreferenceInfo, System.Collections.Generic.List<string> createGroupPreferenceInfo, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveMarketSnapshotPreference(userName, marketSnapshotSelectionData, createEntityPreferenceInfo, updateEntityPreferenceInfo, deleteEntityPreferenceInfo, deleteGroupPreferenceInfo, createGroupPreferenceInfo, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.EndSaveMarketSnapshotPreference(System.IAsyncResult result) {
            return base.Channel.EndSaveMarketSnapshotPreference(result);
        }
        
        private System.IAsyncResult OnBeginSaveMarketSnapshotPreference(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userName = ((string)(inValues[0]));
            GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotSelectionData marketSnapshotSelectionData = ((GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotSelectionData)(inValues[1]));
            System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> createEntityPreferenceInfo = ((System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference>)(inValues[2]));
            System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> updateEntityPreferenceInfo = ((System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference>)(inValues[3]));
            System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> deleteEntityPreferenceInfo = ((System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference>)(inValues[4]));
            System.Collections.Generic.List<int> deleteGroupPreferenceInfo = ((System.Collections.Generic.List<int>)(inValues[5]));
            System.Collections.Generic.List<string> createGroupPreferenceInfo = ((System.Collections.Generic.List<string>)(inValues[6]));
            return ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).BeginSaveMarketSnapshotPreference(userName, marketSnapshotSelectionData, createEntityPreferenceInfo, updateEntityPreferenceInfo, deleteEntityPreferenceInfo, deleteGroupPreferenceInfo, createGroupPreferenceInfo, callback, asyncState);
        }
        
        private object[] OnEndSaveMarketSnapshotPreference(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> retVal = ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).EndSaveMarketSnapshotPreference(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveMarketSnapshotPreferenceCompleted(object state) {
            if ((this.SaveMarketSnapshotPreferenceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveMarketSnapshotPreferenceCompleted(this, new SaveMarketSnapshotPreferenceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveMarketSnapshotPreferenceAsync(string userName, GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotSelectionData marketSnapshotSelectionData, System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> createEntityPreferenceInfo, System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> updateEntityPreferenceInfo, System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> deleteEntityPreferenceInfo, System.Collections.Generic.List<int> deleteGroupPreferenceInfo, System.Collections.Generic.List<string> createGroupPreferenceInfo) {
            this.SaveMarketSnapshotPreferenceAsync(userName, marketSnapshotSelectionData, createEntityPreferenceInfo, updateEntityPreferenceInfo, deleteEntityPreferenceInfo, deleteGroupPreferenceInfo, createGroupPreferenceInfo, null);
        }
        
        public void SaveMarketSnapshotPreferenceAsync(string userName, GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotSelectionData marketSnapshotSelectionData, System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> createEntityPreferenceInfo, System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> updateEntityPreferenceInfo, System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> deleteEntityPreferenceInfo, System.Collections.Generic.List<int> deleteGroupPreferenceInfo, System.Collections.Generic.List<string> createGroupPreferenceInfo, object userState) {
            if ((this.onBeginSaveMarketSnapshotPreferenceDelegate == null)) {
                this.onBeginSaveMarketSnapshotPreferenceDelegate = new BeginOperationDelegate(this.OnBeginSaveMarketSnapshotPreference);
            }
            if ((this.onEndSaveMarketSnapshotPreferenceDelegate == null)) {
                this.onEndSaveMarketSnapshotPreferenceDelegate = new EndOperationDelegate(this.OnEndSaveMarketSnapshotPreference);
            }
            if ((this.onSaveMarketSnapshotPreferenceCompletedDelegate == null)) {
                this.onSaveMarketSnapshotPreferenceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveMarketSnapshotPreferenceCompleted);
            }
            base.InvokeAsync(this.onBeginSaveMarketSnapshotPreferenceDelegate, new object[] {
                        userName,
                        marketSnapshotSelectionData,
                        createEntityPreferenceInfo,
                        updateEntityPreferenceInfo,
                        deleteEntityPreferenceInfo,
                        deleteGroupPreferenceInfo,
                        createGroupPreferenceInfo}, this.onEndSaveMarketSnapshotPreferenceDelegate, this.onSaveMarketSnapshotPreferenceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.BeginSaveAsMarketSnapshotPreference(string userName, string snapshotName, System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> snapshotPreference, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveAsMarketSnapshotPreference(userName, snapshotName, snapshotPreference, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        GreenField.ServiceCaller.PerformanceDefinitions.PopulatedMarketPerformanceSnapshotData GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.EndSaveAsMarketSnapshotPreference(System.IAsyncResult result) {
            return base.Channel.EndSaveAsMarketSnapshotPreference(result);
        }
        
        private System.IAsyncResult OnBeginSaveAsMarketSnapshotPreference(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userName = ((string)(inValues[0]));
            string snapshotName = ((string)(inValues[1]));
            System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> snapshotPreference = ((System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference>)(inValues[2]));
            return ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).BeginSaveAsMarketSnapshotPreference(userName, snapshotName, snapshotPreference, callback, asyncState);
        }
        
        private object[] OnEndSaveAsMarketSnapshotPreference(System.IAsyncResult result) {
            GreenField.ServiceCaller.PerformanceDefinitions.PopulatedMarketPerformanceSnapshotData retVal = ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).EndSaveAsMarketSnapshotPreference(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveAsMarketSnapshotPreferenceCompleted(object state) {
            if ((this.SaveAsMarketSnapshotPreferenceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveAsMarketSnapshotPreferenceCompleted(this, new SaveAsMarketSnapshotPreferenceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveAsMarketSnapshotPreferenceAsync(string userName, string snapshotName, System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> snapshotPreference) {
            this.SaveAsMarketSnapshotPreferenceAsync(userName, snapshotName, snapshotPreference, null);
        }
        
        public void SaveAsMarketSnapshotPreferenceAsync(string userName, string snapshotName, System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> snapshotPreference, object userState) {
            if ((this.onBeginSaveAsMarketSnapshotPreferenceDelegate == null)) {
                this.onBeginSaveAsMarketSnapshotPreferenceDelegate = new BeginOperationDelegate(this.OnBeginSaveAsMarketSnapshotPreference);
            }
            if ((this.onEndSaveAsMarketSnapshotPreferenceDelegate == null)) {
                this.onEndSaveAsMarketSnapshotPreferenceDelegate = new EndOperationDelegate(this.OnEndSaveAsMarketSnapshotPreference);
            }
            if ((this.onSaveAsMarketSnapshotPreferenceCompletedDelegate == null)) {
                this.onSaveAsMarketSnapshotPreferenceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveAsMarketSnapshotPreferenceCompleted);
            }
            base.InvokeAsync(this.onBeginSaveAsMarketSnapshotPreferenceDelegate, new object[] {
                        userName,
                        snapshotName,
                        snapshotPreference}, this.onEndSaveAsMarketSnapshotPreferenceDelegate, this.onSaveAsMarketSnapshotPreferenceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.BeginRemoveMarketSnapshotPreference(string userName, string snapshotName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveMarketSnapshotPreference(userName, snapshotName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.EndRemoveMarketSnapshotPreference(System.IAsyncResult result) {
            return base.Channel.EndRemoveMarketSnapshotPreference(result);
        }
        
        private System.IAsyncResult OnBeginRemoveMarketSnapshotPreference(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userName = ((string)(inValues[0]));
            string snapshotName = ((string)(inValues[1]));
            return ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).BeginRemoveMarketSnapshotPreference(userName, snapshotName, callback, asyncState);
        }
        
        private object[] OnEndRemoveMarketSnapshotPreference(System.IAsyncResult result) {
            bool retVal = ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).EndRemoveMarketSnapshotPreference(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRemoveMarketSnapshotPreferenceCompleted(object state) {
            if ((this.RemoveMarketSnapshotPreferenceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveMarketSnapshotPreferenceCompleted(this, new RemoveMarketSnapshotPreferenceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveMarketSnapshotPreferenceAsync(string userName, string snapshotName) {
            this.RemoveMarketSnapshotPreferenceAsync(userName, snapshotName, null);
        }
        
        public void RemoveMarketSnapshotPreferenceAsync(string userName, string snapshotName, object userState) {
            if ((this.onBeginRemoveMarketSnapshotPreferenceDelegate == null)) {
                this.onBeginRemoveMarketSnapshotPreferenceDelegate = new BeginOperationDelegate(this.OnBeginRemoveMarketSnapshotPreference);
            }
            if ((this.onEndRemoveMarketSnapshotPreferenceDelegate == null)) {
                this.onEndRemoveMarketSnapshotPreferenceDelegate = new EndOperationDelegate(this.OnEndRemoveMarketSnapshotPreference);
            }
            if ((this.onRemoveMarketSnapshotPreferenceCompletedDelegate == null)) {
                this.onRemoveMarketSnapshotPreferenceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveMarketSnapshotPreferenceCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveMarketSnapshotPreferenceDelegate, new object[] {
                        userName,
                        snapshotName}, this.onEndRemoveMarketSnapshotPreferenceDelegate, this.onRemoveMarketSnapshotPreferenceCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations CreateChannel() {
            return new PerformanceOperationsClientChannel(this);
        }
        
        private class PerformanceOperationsClientChannel : ChannelBase<GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations>, GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations {
            
            public PerformanceOperationsClientChannel(System.ServiceModel.ClientBase<GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginRetrieveRelativePerformanceUIData(System.Collections.Generic.Dictionary<string, string> objSelectedEntity, System.Nullable<System.DateTime> objEffectiveDate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = objSelectedEntity;
                _args[1] = objEffectiveDate;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveRelativePerformanceUIData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceUIData> EndRetrieveRelativePerformanceUIData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceUIData> _result = ((System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceUIData>)(base.EndInvoke("RetrieveRelativePerformanceUIData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveBenchmarkChartReturnData(System.Collections.Generic.Dictionary<string, string> objSelectedEntities, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = objSelectedEntities;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveBenchmarkChartReturnData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.DataContracts.BenchmarkChartReturnData> EndRetrieveBenchmarkChartReturnData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.DataContracts.BenchmarkChartReturnData> _result = ((System.Collections.Generic.List<GreenField.DataContracts.BenchmarkChartReturnData>)(base.EndInvoke("RetrieveBenchmarkChartReturnData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveBenchmarkGridReturnData(System.Collections.Generic.Dictionary<string, string> objSelectedEntities, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = objSelectedEntities;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveBenchmarkGridReturnData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.DataContracts.BenchmarkGridReturnData> EndRetrieveBenchmarkGridReturnData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.DataContracts.BenchmarkGridReturnData> _result = ((System.Collections.Generic.List<GreenField.DataContracts.BenchmarkGridReturnData>)(base.EndInvoke("RetrieveBenchmarkGridReturnData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveChartExtensionData(System.Collections.Generic.Dictionary<string, string> objSelectedEntities, System.DateTime objStartDate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = objSelectedEntities;
                _args[1] = objStartDate;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveChartExtensionData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.DataContracts.ChartExtensionData> EndRetrieveChartExtensionData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.DataContracts.ChartExtensionData> _result = ((System.Collections.Generic.List<GreenField.DataContracts.ChartExtensionData>)(base.EndInvoke("RetrieveChartExtensionData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveMarketSnapshotSelectionData(string userName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = userName;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveMarketSnapshotSelectionData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotSelectionData> EndRetrieveMarketSnapshotSelectionData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotSelectionData> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotSelectionData>)(base.EndInvoke("RetrieveMarketSnapshotSelectionData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveMarketSnapshotPreference(string userName, string snapshotName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = userName;
                _args[1] = snapshotName;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveMarketSnapshotPreference", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> EndRetrieveMarketSnapshotPreference(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference>)(base.EndInvoke("RetrieveMarketSnapshotPreference", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveMarketPerformanceSnapshotData(System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> marketSnapshotPreference, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = marketSnapshotPreference;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveMarketPerformanceSnapshotData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketPerformanceSnapshotData> EndRetrieveMarketPerformanceSnapshotData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketPerformanceSnapshotData> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketPerformanceSnapshotData>)(base.EndInvoke("RetrieveMarketPerformanceSnapshotData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddMarketSnapshotPerformance(string userId, string snapshotName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = userId;
                _args[1] = snapshotName;
                System.IAsyncResult _result = base.BeginInvoke("AddMarketSnapshotPerformance", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndAddMarketSnapshotPerformance(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("AddMarketSnapshotPerformance", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateMarketSnapshotPerformance(string userId, string snapshotName, int snapshotPreferenceId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = userId;
                _args[1] = snapshotName;
                _args[2] = snapshotPreferenceId;
                System.IAsyncResult _result = base.BeginInvoke("UpdateMarketSnapshotPerformance", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndUpdateMarketSnapshotPerformance(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("UpdateMarketSnapshotPerformance", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddMarketSnapshotGroupPreference(int snapshotPreferenceId, string groupName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = snapshotPreferenceId;
                _args[1] = groupName;
                System.IAsyncResult _result = base.BeginInvoke("AddMarketSnapshotGroupPreference", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndAddMarketSnapshotGroupPreference(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("AddMarketSnapshotGroupPreference", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRemoveMarketSnapshotGroupPreference(int groupPreferenceId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = groupPreferenceId;
                System.IAsyncResult _result = base.BeginInvoke("RemoveMarketSnapshotGroupPreference", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndRemoveMarketSnapshotGroupPreference(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("RemoveMarketSnapshotGroupPreference", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddMarketSnapshotEntityPreference(GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference marketSnapshotPreference, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = marketSnapshotPreference;
                System.IAsyncResult _result = base.BeginInvoke("AddMarketSnapshotEntityPreference", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndAddMarketSnapshotEntityPreference(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("AddMarketSnapshotEntityPreference", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRemoveMarketSnapshotEntityPreference(GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference marketSnapshotPreference, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = marketSnapshotPreference;
                System.IAsyncResult _result = base.BeginInvoke("RemoveMarketSnapshotEntityPreference", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndRemoveMarketSnapshotEntityPreference(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("RemoveMarketSnapshotEntityPreference", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSaveMarketSnapshotPreference(string userName, GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotSelectionData marketSnapshotSelectionData, System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> createEntityPreferenceInfo, System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> updateEntityPreferenceInfo, System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> deleteEntityPreferenceInfo, System.Collections.Generic.List<int> deleteGroupPreferenceInfo, System.Collections.Generic.List<string> createGroupPreferenceInfo, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[7];
                _args[0] = userName;
                _args[1] = marketSnapshotSelectionData;
                _args[2] = createEntityPreferenceInfo;
                _args[3] = updateEntityPreferenceInfo;
                _args[4] = deleteEntityPreferenceInfo;
                _args[5] = deleteGroupPreferenceInfo;
                _args[6] = createGroupPreferenceInfo;
                System.IAsyncResult _result = base.BeginInvoke("SaveMarketSnapshotPreference", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> EndSaveMarketSnapshotPreference(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference>)(base.EndInvoke("SaveMarketSnapshotPreference", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSaveAsMarketSnapshotPreference(string userName, string snapshotName, System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> snapshotPreference, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = userName;
                _args[1] = snapshotName;
                _args[2] = snapshotPreference;
                System.IAsyncResult _result = base.BeginInvoke("SaveAsMarketSnapshotPreference", _args, callback, asyncState);
                return _result;
            }
            
            public GreenField.ServiceCaller.PerformanceDefinitions.PopulatedMarketPerformanceSnapshotData EndSaveAsMarketSnapshotPreference(System.IAsyncResult result) {
                object[] _args = new object[0];
                GreenField.ServiceCaller.PerformanceDefinitions.PopulatedMarketPerformanceSnapshotData _result = ((GreenField.ServiceCaller.PerformanceDefinitions.PopulatedMarketPerformanceSnapshotData)(base.EndInvoke("SaveAsMarketSnapshotPreference", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRemoveMarketSnapshotPreference(string userName, string snapshotName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = userName;
                _args[1] = snapshotName;
                System.IAsyncResult _result = base.BeginInvoke("RemoveMarketSnapshotPreference", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndRemoveMarketSnapshotPreference(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("RemoveMarketSnapshotPreference", _args, result)));
                return _result;
            }
        }
    }
}
