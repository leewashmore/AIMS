//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace GreenField.ServiceCaller.PerformanceDefinitions {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
    public partial class ServiceFault : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DescriptionField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MarketSnapshotSelectionData", Namespace="http://schemas.datacontract.org/2004/07/GreenField.DAL", IsReference=true)]
    public partial class MarketSnapshotSelectionData : GreenField.ServiceCaller.PerformanceDefinitions.ComplexObject {
        
        private string SnapshotNameField;
        
        private int SnapshotPreferenceIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SnapshotName {
            get {
                return this.SnapshotNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SnapshotNameField, value) != true)) {
                    this.SnapshotNameField = value;
                    this.RaisePropertyChanged("SnapshotName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SnapshotPreferenceId {
            get {
                return this.SnapshotPreferenceIdField;
            }
            set {
                if ((this.SnapshotPreferenceIdField.Equals(value) != true)) {
                    this.SnapshotPreferenceIdField = value;
                    this.RaisePropertyChanged("SnapshotPreferenceId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StructuralObject", Namespace="http://schemas.datacontract.org/2004/07/System.Data.Objects.DataClasses", IsReference=true)]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenField.ServiceCaller.PerformanceDefinitions.ComplexObject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotSelectionData))]
    public partial class StructuralObject : object, System.ComponentModel.INotifyPropertyChanged {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ComplexObject", Namespace="http://schemas.datacontract.org/2004/07/System.Data.Objects.DataClasses", IsReference=true)]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotSelectionData))]
    public partial class ComplexObject : GreenField.ServiceCaller.PerformanceDefinitions.StructuralObject {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MarketSnapshotPreference", Namespace="http://schemas.datacontract.org/2004/07/GreenField.DAL", IsReference=true)]
    public partial class MarketSnapshotPreference : GreenField.ServiceCaller.PerformanceDefinitions.ComplexObject {
        
        private string EntityIdField;
        
        private string EntityNameField;
        
        private string EntityNodeTypeField;
        
        private string EntityNodeValueCodeField;
        
        private string EntityNodeValueNameField;
        
        private System.Nullable<int> EntityOrderField;
        
        private System.Nullable<int> EntityPreferenceIdField;
        
        private string EntityReturnTypeField;
        
        private string EntityTypeField;
        
        private string GroupNameField;
        
        private int GroupPreferenceIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EntityId {
            get {
                return this.EntityIdField;
            }
            set {
                if ((object.ReferenceEquals(this.EntityIdField, value) != true)) {
                    this.EntityIdField = value;
                    this.RaisePropertyChanged("EntityId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EntityName {
            get {
                return this.EntityNameField;
            }
            set {
                if ((object.ReferenceEquals(this.EntityNameField, value) != true)) {
                    this.EntityNameField = value;
                    this.RaisePropertyChanged("EntityName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EntityNodeType {
            get {
                return this.EntityNodeTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.EntityNodeTypeField, value) != true)) {
                    this.EntityNodeTypeField = value;
                    this.RaisePropertyChanged("EntityNodeType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EntityNodeValueCode {
            get {
                return this.EntityNodeValueCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.EntityNodeValueCodeField, value) != true)) {
                    this.EntityNodeValueCodeField = value;
                    this.RaisePropertyChanged("EntityNodeValueCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EntityNodeValueName {
            get {
                return this.EntityNodeValueNameField;
            }
            set {
                if ((object.ReferenceEquals(this.EntityNodeValueNameField, value) != true)) {
                    this.EntityNodeValueNameField = value;
                    this.RaisePropertyChanged("EntityNodeValueName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> EntityOrder {
            get {
                return this.EntityOrderField;
            }
            set {
                if ((this.EntityOrderField.Equals(value) != true)) {
                    this.EntityOrderField = value;
                    this.RaisePropertyChanged("EntityOrder");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> EntityPreferenceId {
            get {
                return this.EntityPreferenceIdField;
            }
            set {
                if ((this.EntityPreferenceIdField.Equals(value) != true)) {
                    this.EntityPreferenceIdField = value;
                    this.RaisePropertyChanged("EntityPreferenceId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EntityReturnType {
            get {
                return this.EntityReturnTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.EntityReturnTypeField, value) != true)) {
                    this.EntityReturnTypeField = value;
                    this.RaisePropertyChanged("EntityReturnType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EntityType {
            get {
                return this.EntityTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.EntityTypeField, value) != true)) {
                    this.EntityTypeField = value;
                    this.RaisePropertyChanged("EntityType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GroupName {
            get {
                return this.GroupNameField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupNameField, value) != true)) {
                    this.GroupNameField = value;
                    this.RaisePropertyChanged("GroupName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GroupPreferenceID {
            get {
                return this.GroupPreferenceIDField;
            }
            set {
                if ((this.GroupPreferenceIDField.Equals(value) != true)) {
                    this.GroupPreferenceIDField = value;
                    this.RaisePropertyChanged("GroupPreferenceID");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MarketSnapshotPerformanceData", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.DataContracts")]
    public partial class MarketSnapshotPerformanceData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Nullable<decimal> DateToDateReturnField;
        
        private System.Nullable<decimal> LastYearReturnField;
        
        private GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference MarketSnapshotPreferenceInfoField;
        
        private System.Nullable<decimal> MonthToDateReturnField;
        
        private System.Nullable<decimal> QuarterToDateReturnField;
        
        private System.Nullable<decimal> SecondLastYearReturnField;
        
        private System.Nullable<decimal> ThirdLastYearReturnField;
        
        private System.Nullable<decimal> WeekToDateReturnField;
        
        private System.Nullable<decimal> YearToDateReturnField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> DateToDateReturn {
            get {
                return this.DateToDateReturnField;
            }
            set {
                if ((this.DateToDateReturnField.Equals(value) != true)) {
                    this.DateToDateReturnField = value;
                    this.RaisePropertyChanged("DateToDateReturn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> LastYearReturn {
            get {
                return this.LastYearReturnField;
            }
            set {
                if ((this.LastYearReturnField.Equals(value) != true)) {
                    this.LastYearReturnField = value;
                    this.RaisePropertyChanged("LastYearReturn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference MarketSnapshotPreferenceInfo {
            get {
                return this.MarketSnapshotPreferenceInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.MarketSnapshotPreferenceInfoField, value) != true)) {
                    this.MarketSnapshotPreferenceInfoField = value;
                    this.RaisePropertyChanged("MarketSnapshotPreferenceInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> MonthToDateReturn {
            get {
                return this.MonthToDateReturnField;
            }
            set {
                if ((this.MonthToDateReturnField.Equals(value) != true)) {
                    this.MonthToDateReturnField = value;
                    this.RaisePropertyChanged("MonthToDateReturn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> QuarterToDateReturn {
            get {
                return this.QuarterToDateReturnField;
            }
            set {
                if ((this.QuarterToDateReturnField.Equals(value) != true)) {
                    this.QuarterToDateReturnField = value;
                    this.RaisePropertyChanged("QuarterToDateReturn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> SecondLastYearReturn {
            get {
                return this.SecondLastYearReturnField;
            }
            set {
                if ((this.SecondLastYearReturnField.Equals(value) != true)) {
                    this.SecondLastYearReturnField = value;
                    this.RaisePropertyChanged("SecondLastYearReturn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> ThirdLastYearReturn {
            get {
                return this.ThirdLastYearReturnField;
            }
            set {
                if ((this.ThirdLastYearReturnField.Equals(value) != true)) {
                    this.ThirdLastYearReturnField = value;
                    this.RaisePropertyChanged("ThirdLastYearReturn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> WeekToDateReturn {
            get {
                return this.WeekToDateReturnField;
            }
            set {
                if ((this.WeekToDateReturnField.Equals(value) != true)) {
                    this.WeekToDateReturnField = value;
                    this.RaisePropertyChanged("WeekToDateReturn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> YearToDateReturn {
            get {
                return this.YearToDateReturnField;
            }
            set {
                if ((this.YearToDateReturnField.Equals(value) != true)) {
                    this.YearToDateReturnField = value;
                    this.RaisePropertyChanged("YearToDateReturn");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PopulatedMarketSnapshotPerformanceData", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.DataContracts")]
    public partial class PopulatedMarketSnapshotPerformanceData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPerformanceData> MarketPerformanceSnapshotInfoField;
        
        private GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotSelectionData MarketSnapshotSelectionInfoField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPerformanceData> MarketPerformanceSnapshotInfo {
            get {
                return this.MarketPerformanceSnapshotInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.MarketPerformanceSnapshotInfoField, value) != true)) {
                    this.MarketPerformanceSnapshotInfoField = value;
                    this.RaisePropertyChanged("MarketPerformanceSnapshotInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotSelectionData MarketSnapshotSelectionInfo {
            get {
                return this.MarketSnapshotSelectionInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.MarketSnapshotSelectionInfoField, value) != true)) {
                    this.MarketSnapshotSelectionInfoField = value;
                    this.RaisePropertyChanged("MarketSnapshotSelectionInfo");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PerformanceDefinitions.PerformanceOperations")]
    public interface PerformanceOperations {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/PerformanceOperations/RetrieveRelativePerformanceUIData", ReplyAction="http://tempuri.org/PerformanceOperations/RetrieveRelativePerformanceUIDataRespons" +
            "e")]
        System.IAsyncResult BeginRetrieveRelativePerformanceUIData(System.Collections.Generic.Dictionary<string, string> objSelectedEntity, System.DateTime objEffectiveDate, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceUIData> EndRetrieveRelativePerformanceUIData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/PerformanceOperations/RetrieveBenchmarkChartReturnData", ReplyAction="http://tempuri.org/PerformanceOperations/RetrieveBenchmarkChartReturnDataResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.PerformanceDefinitions.ServiceFault), Action="http://tempuri.org/PerformanceOperations/RetrieveBenchmarkChartReturnDataServiceF" +
            "aultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrieveBenchmarkChartReturnData(System.Collections.Generic.Dictionary<string, string> objSelectedEntities, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.DataContracts.BenchmarkChartReturnData> EndRetrieveBenchmarkChartReturnData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/PerformanceOperations/RetrieveBenchmarkGridReturnData", ReplyAction="http://tempuri.org/PerformanceOperations/RetrieveBenchmarkGridReturnDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.PerformanceDefinitions.ServiceFault), Action="http://tempuri.org/PerformanceOperations/RetrieveBenchmarkGridReturnDataServiceFa" +
            "ultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrieveBenchmarkGridReturnData(System.Collections.Generic.Dictionary<string, string> objSelectedEntities, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.DataContracts.BenchmarkGridReturnData> EndRetrieveBenchmarkGridReturnData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/PerformanceOperations/RetrieveChartExtensionData", ReplyAction="http://tempuri.org/PerformanceOperations/RetrieveChartExtensionDataResponse")]
        System.IAsyncResult BeginRetrieveChartExtensionData(System.Collections.Generic.Dictionary<string, string> objSelectedEntities, System.DateTime objStartDate, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.DataContracts.ChartExtensionData> EndRetrieveChartExtensionData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/PerformanceOperations/RetrieveBenchmarkFilterSelectionData", ReplyAction="http://tempuri.org/PerformanceOperations/RetrieveBenchmarkFilterSelectionDataResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.PerformanceDefinitions.ServiceFault), Action="http://tempuri.org/PerformanceOperations/RetrieveBenchmarkFilterSelectionDataServ" +
            "iceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrieveBenchmarkFilterSelectionData(string benchmarkCode, string benchmarkName, string filterType, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.DataContracts.BenchmarkFilterSelectionData> EndRetrieveBenchmarkFilterSelectionData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/PerformanceOperations/RetrieveMarketSnapshotSelectionData", ReplyAction="http://tempuri.org/PerformanceOperations/RetrieveMarketSnapshotSelectionDataRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.PerformanceDefinitions.ServiceFault), Action="http://tempuri.org/PerformanceOperations/RetrieveMarketSnapshotSelectionDataServi" +
            "ceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrieveMarketSnapshotSelectionData(string userName, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotSelectionData> EndRetrieveMarketSnapshotSelectionData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/PerformanceOperations/RetrieveMarketSnapshotPreference", ReplyAction="http://tempuri.org/PerformanceOperations/RetrieveMarketSnapshotPreferenceResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.PerformanceDefinitions.ServiceFault), Action="http://tempuri.org/PerformanceOperations/RetrieveMarketSnapshotPreferenceServiceF" +
            "aultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrieveMarketSnapshotPreference(int snapshotPreferenceId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> EndRetrieveMarketSnapshotPreference(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/PerformanceOperations/RetrieveMarketSnapshotPerformanceData", ReplyAction="http://tempuri.org/PerformanceOperations/RetrieveMarketSnapshotPerformanceDataRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.PerformanceDefinitions.ServiceFault), Action="http://tempuri.org/PerformanceOperations/RetrieveMarketSnapshotPerformanceDataSer" +
            "viceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrieveMarketSnapshotPerformanceData(System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> marketSnapshotPreference, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPerformanceData> EndRetrieveMarketSnapshotPerformanceData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/PerformanceOperations/SaveMarketSnapshotPreference", ReplyAction="http://tempuri.org/PerformanceOperations/SaveMarketSnapshotPreferenceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.PerformanceDefinitions.ServiceFault), Action="http://tempuri.org/PerformanceOperations/SaveMarketSnapshotPreferenceServiceFault" +
            "Fault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginSaveMarketSnapshotPreference(string updateXML, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> EndSaveMarketSnapshotPreference(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/PerformanceOperations/SaveAsMarketSnapshotPreference", ReplyAction="http://tempuri.org/PerformanceOperations/SaveAsMarketSnapshotPreferenceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.PerformanceDefinitions.ServiceFault), Action="http://tempuri.org/PerformanceOperations/SaveAsMarketSnapshotPreferenceServiceFau" +
            "ltFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginSaveAsMarketSnapshotPreference(string updateXML, System.AsyncCallback callback, object asyncState);
        
        GreenField.ServiceCaller.PerformanceDefinitions.PopulatedMarketSnapshotPerformanceData EndSaveAsMarketSnapshotPreference(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/PerformanceOperations/RemoveMarketSnapshotPreference", ReplyAction="http://tempuri.org/PerformanceOperations/RemoveMarketSnapshotPreferenceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.PerformanceDefinitions.ServiceFault), Action="http://tempuri.org/PerformanceOperations/RemoveMarketSnapshotPreferenceServiceFau" +
            "ltFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRemoveMarketSnapshotPreference(string userName, string snapshotName, System.AsyncCallback callback, object asyncState);
        
        bool EndRemoveMarketSnapshotPreference(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/PerformanceOperations/RetrieveRelativePerformanceSectorData", ReplyAction="http://tempuri.org/PerformanceOperations/RetrieveRelativePerformanceSectorDataRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.PerformanceDefinitions.ServiceFault), Action="http://tempuri.org/PerformanceOperations/RetrieveRelativePerformanceSectorDataSer" +
            "viceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrieveRelativePerformanceSectorData(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceSectorData> EndRetrieveRelativePerformanceSectorData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/PerformanceOperations/RetrieveRelativePerformanceData", ReplyAction="http://tempuri.org/PerformanceOperations/RetrieveRelativePerformanceDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.PerformanceDefinitions.ServiceFault), Action="http://tempuri.org/PerformanceOperations/RetrieveRelativePerformanceDataServiceFa" +
            "ultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrieveRelativePerformanceData(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string period, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceData> EndRetrieveRelativePerformanceData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/PerformanceOperations/RetrieveRelativePerformanceCountryActive" +
            "PositionData", ReplyAction="http://tempuri.org/PerformanceOperations/RetrieveRelativePerformanceCountryActive" +
            "PositionDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.PerformanceDefinitions.ServiceFault), Action="http://tempuri.org/PerformanceOperations/RetrieveRelativePerformanceCountryActive" +
            "PositionDataServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrieveRelativePerformanceCountryActivePositionData(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string period, string countryID, string sectorID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceActivePositionData> EndRetrieveRelativePerformanceCountryActivePositionData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/PerformanceOperations/RetrieveRelativePerformanceSectorActiveP" +
            "ositionData", ReplyAction="http://tempuri.org/PerformanceOperations/RetrieveRelativePerformanceSectorActiveP" +
            "ositionDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.PerformanceDefinitions.ServiceFault), Action="http://tempuri.org/PerformanceOperations/RetrieveRelativePerformanceSectorActiveP" +
            "ositionDataServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrieveRelativePerformanceSectorActivePositionData(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string period, string countryID, string sectorID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceActivePositionData> EndRetrieveRelativePerformanceSectorActivePositionData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/PerformanceOperations/RetrieveRelativePerformanceSecurityActiv" +
            "ePositionData", ReplyAction="http://tempuri.org/PerformanceOperations/RetrieveRelativePerformanceSecurityActiv" +
            "ePositionDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.PerformanceDefinitions.ServiceFault), Action="http://tempuri.org/PerformanceOperations/RetrieveRelativePerformanceSecurityActiv" +
            "ePositionDataServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrieveRelativePerformanceSecurityActivePositionData(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string period, string countryID, string sectorID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceActivePositionData> EndRetrieveRelativePerformanceSecurityActivePositionData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/PerformanceOperations/RetrieveRelativePerformanceSecurityData", ReplyAction="http://tempuri.org/PerformanceOperations/RetrieveRelativePerformanceSecurityDataR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.PerformanceDefinitions.ServiceFault), Action="http://tempuri.org/PerformanceOperations/RetrieveRelativePerformanceSecurityDataS" +
            "erviceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrieveRelativePerformanceSecurityData(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string period, string countryID, string sectorID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceSecurityData> EndRetrieveRelativePerformanceSecurityData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/PerformanceOperations/RetrieveMarketCapitalizationData", ReplyAction="http://tempuri.org/PerformanceOperations/RetrieveMarketCapitalizationDataResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.PerformanceDefinitions.ServiceFault), Action="http://tempuri.org/PerformanceOperations/RetrieveMarketCapitalizationDataServiceF" +
            "aultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrieveMarketCapitalizationData(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string filterType, string filterValue, bool isExCashSecurity, bool lookThruEnabled, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.DataContracts.MarketCapitalizationData> EndRetrieveMarketCapitalizationData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/PerformanceOperations/RetrievePerformanceGridData", ReplyAction="http://tempuri.org/PerformanceOperations/RetrievePerformanceGridDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.PerformanceDefinitions.ServiceFault), Action="http://tempuri.org/PerformanceOperations/RetrievePerformanceGridDataServiceFaultF" +
            "ault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrievePerformanceGridData(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string country, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.DataContracts.PerformanceGridData> EndRetrievePerformanceGridData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/PerformanceOperations/RetrievePerformanceGraphData", ReplyAction="http://tempuri.org/PerformanceOperations/RetrievePerformanceGraphDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.PerformanceDefinitions.ServiceFault), Action="http://tempuri.org/PerformanceOperations/RetrievePerformanceGraphDataServiceFault" +
            "Fault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrievePerformanceGraphData(GreenField.DataContracts.PortfolioSelectionData fundSelectionData, System.DateTime effectiveDate, string period, string country, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.DataContracts.PerformanceGraphData> EndRetrievePerformanceGraphData(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface PerformanceOperationsChannel : GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveRelativePerformanceUIDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveRelativePerformanceUIDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceUIData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceUIData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveBenchmarkChartReturnDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveBenchmarkChartReturnDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.DataContracts.BenchmarkChartReturnData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.DataContracts.BenchmarkChartReturnData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveBenchmarkGridReturnDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveBenchmarkGridReturnDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.DataContracts.BenchmarkGridReturnData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.DataContracts.BenchmarkGridReturnData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveChartExtensionDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveChartExtensionDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.DataContracts.ChartExtensionData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.DataContracts.ChartExtensionData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveBenchmarkFilterSelectionDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveBenchmarkFilterSelectionDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.DataContracts.BenchmarkFilterSelectionData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.DataContracts.BenchmarkFilterSelectionData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveMarketSnapshotSelectionDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveMarketSnapshotSelectionDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotSelectionData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotSelectionData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveMarketSnapshotPreferenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveMarketSnapshotPreferenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveMarketSnapshotPerformanceDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveMarketSnapshotPerformanceDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPerformanceData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPerformanceData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveMarketSnapshotPreferenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveMarketSnapshotPreferenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveAsMarketSnapshotPreferenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveAsMarketSnapshotPreferenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public GreenField.ServiceCaller.PerformanceDefinitions.PopulatedMarketSnapshotPerformanceData Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((GreenField.ServiceCaller.PerformanceDefinitions.PopulatedMarketSnapshotPerformanceData)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RemoveMarketSnapshotPreferenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RemoveMarketSnapshotPreferenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveRelativePerformanceSectorDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveRelativePerformanceSectorDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceSectorData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceSectorData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveRelativePerformanceDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveRelativePerformanceDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveRelativePerformanceCountryActivePositionDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveRelativePerformanceCountryActivePositionDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceActivePositionData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceActivePositionData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveRelativePerformanceSectorActivePositionDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveRelativePerformanceSectorActivePositionDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceActivePositionData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceActivePositionData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveRelativePerformanceSecurityActivePositionDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveRelativePerformanceSecurityActivePositionDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceActivePositionData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceActivePositionData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveRelativePerformanceSecurityDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveRelativePerformanceSecurityDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceSecurityData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceSecurityData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveMarketCapitalizationDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveMarketCapitalizationDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.DataContracts.MarketCapitalizationData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.DataContracts.MarketCapitalizationData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrievePerformanceGridDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrievePerformanceGridDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.DataContracts.PerformanceGridData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.DataContracts.PerformanceGridData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrievePerformanceGraphDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrievePerformanceGraphDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.DataContracts.PerformanceGraphData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.DataContracts.PerformanceGraphData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PerformanceOperationsClient : System.ServiceModel.ClientBase<GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations>, GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations {
        
        private BeginOperationDelegate onBeginRetrieveRelativePerformanceUIDataDelegate;
        
        private EndOperationDelegate onEndRetrieveRelativePerformanceUIDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveRelativePerformanceUIDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveBenchmarkChartReturnDataDelegate;
        
        private EndOperationDelegate onEndRetrieveBenchmarkChartReturnDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveBenchmarkChartReturnDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveBenchmarkGridReturnDataDelegate;
        
        private EndOperationDelegate onEndRetrieveBenchmarkGridReturnDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveBenchmarkGridReturnDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveChartExtensionDataDelegate;
        
        private EndOperationDelegate onEndRetrieveChartExtensionDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveChartExtensionDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveBenchmarkFilterSelectionDataDelegate;
        
        private EndOperationDelegate onEndRetrieveBenchmarkFilterSelectionDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveBenchmarkFilterSelectionDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveMarketSnapshotSelectionDataDelegate;
        
        private EndOperationDelegate onEndRetrieveMarketSnapshotSelectionDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveMarketSnapshotSelectionDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveMarketSnapshotPreferenceDelegate;
        
        private EndOperationDelegate onEndRetrieveMarketSnapshotPreferenceDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveMarketSnapshotPreferenceCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveMarketSnapshotPerformanceDataDelegate;
        
        private EndOperationDelegate onEndRetrieveMarketSnapshotPerformanceDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveMarketSnapshotPerformanceDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveMarketSnapshotPreferenceDelegate;
        
        private EndOperationDelegate onEndSaveMarketSnapshotPreferenceDelegate;
        
        private System.Threading.SendOrPostCallback onSaveMarketSnapshotPreferenceCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveAsMarketSnapshotPreferenceDelegate;
        
        private EndOperationDelegate onEndSaveAsMarketSnapshotPreferenceDelegate;
        
        private System.Threading.SendOrPostCallback onSaveAsMarketSnapshotPreferenceCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveMarketSnapshotPreferenceDelegate;
        
        private EndOperationDelegate onEndRemoveMarketSnapshotPreferenceDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveMarketSnapshotPreferenceCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveRelativePerformanceSectorDataDelegate;
        
        private EndOperationDelegate onEndRetrieveRelativePerformanceSectorDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveRelativePerformanceSectorDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveRelativePerformanceDataDelegate;
        
        private EndOperationDelegate onEndRetrieveRelativePerformanceDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveRelativePerformanceDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveRelativePerformanceCountryActivePositionDataDelegate;
        
        private EndOperationDelegate onEndRetrieveRelativePerformanceCountryActivePositionDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveRelativePerformanceCountryActivePositionDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveRelativePerformanceSectorActivePositionDataDelegate;
        
        private EndOperationDelegate onEndRetrieveRelativePerformanceSectorActivePositionDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveRelativePerformanceSectorActivePositionDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveRelativePerformanceSecurityActivePositionDataDelegate;
        
        private EndOperationDelegate onEndRetrieveRelativePerformanceSecurityActivePositionDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveRelativePerformanceSecurityActivePositionDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveRelativePerformanceSecurityDataDelegate;
        
        private EndOperationDelegate onEndRetrieveRelativePerformanceSecurityDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveRelativePerformanceSecurityDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveMarketCapitalizationDataDelegate;
        
        private EndOperationDelegate onEndRetrieveMarketCapitalizationDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveMarketCapitalizationDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrievePerformanceGridDataDelegate;
        
        private EndOperationDelegate onEndRetrievePerformanceGridDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrievePerformanceGridDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrievePerformanceGraphDataDelegate;
        
        private EndOperationDelegate onEndRetrievePerformanceGraphDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrievePerformanceGraphDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public PerformanceOperationsClient() {
        }
        
        public PerformanceOperationsClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PerformanceOperationsClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PerformanceOperationsClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PerformanceOperationsClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<RetrieveRelativePerformanceUIDataCompletedEventArgs> RetrieveRelativePerformanceUIDataCompleted;
        
        public event System.EventHandler<RetrieveBenchmarkChartReturnDataCompletedEventArgs> RetrieveBenchmarkChartReturnDataCompleted;
        
        public event System.EventHandler<RetrieveBenchmarkGridReturnDataCompletedEventArgs> RetrieveBenchmarkGridReturnDataCompleted;
        
        public event System.EventHandler<RetrieveChartExtensionDataCompletedEventArgs> RetrieveChartExtensionDataCompleted;
        
        public event System.EventHandler<RetrieveBenchmarkFilterSelectionDataCompletedEventArgs> RetrieveBenchmarkFilterSelectionDataCompleted;
        
        public event System.EventHandler<RetrieveMarketSnapshotSelectionDataCompletedEventArgs> RetrieveMarketSnapshotSelectionDataCompleted;
        
        public event System.EventHandler<RetrieveMarketSnapshotPreferenceCompletedEventArgs> RetrieveMarketSnapshotPreferenceCompleted;
        
        public event System.EventHandler<RetrieveMarketSnapshotPerformanceDataCompletedEventArgs> RetrieveMarketSnapshotPerformanceDataCompleted;
        
        public event System.EventHandler<SaveMarketSnapshotPreferenceCompletedEventArgs> SaveMarketSnapshotPreferenceCompleted;
        
        public event System.EventHandler<SaveAsMarketSnapshotPreferenceCompletedEventArgs> SaveAsMarketSnapshotPreferenceCompleted;
        
        public event System.EventHandler<RemoveMarketSnapshotPreferenceCompletedEventArgs> RemoveMarketSnapshotPreferenceCompleted;
        
        public event System.EventHandler<RetrieveRelativePerformanceSectorDataCompletedEventArgs> RetrieveRelativePerformanceSectorDataCompleted;
        
        public event System.EventHandler<RetrieveRelativePerformanceDataCompletedEventArgs> RetrieveRelativePerformanceDataCompleted;
        
        public event System.EventHandler<RetrieveRelativePerformanceCountryActivePositionDataCompletedEventArgs> RetrieveRelativePerformanceCountryActivePositionDataCompleted;
        
        public event System.EventHandler<RetrieveRelativePerformanceSectorActivePositionDataCompletedEventArgs> RetrieveRelativePerformanceSectorActivePositionDataCompleted;
        
        public event System.EventHandler<RetrieveRelativePerformanceSecurityActivePositionDataCompletedEventArgs> RetrieveRelativePerformanceSecurityActivePositionDataCompleted;
        
        public event System.EventHandler<RetrieveRelativePerformanceSecurityDataCompletedEventArgs> RetrieveRelativePerformanceSecurityDataCompleted;
        
        public event System.EventHandler<RetrieveMarketCapitalizationDataCompletedEventArgs> RetrieveMarketCapitalizationDataCompleted;
        
        public event System.EventHandler<RetrievePerformanceGridDataCompletedEventArgs> RetrievePerformanceGridDataCompleted;
        
        public event System.EventHandler<RetrievePerformanceGraphDataCompletedEventArgs> RetrievePerformanceGraphDataCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.BeginRetrieveRelativePerformanceUIData(System.Collections.Generic.Dictionary<string, string> objSelectedEntity, System.DateTime objEffectiveDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveRelativePerformanceUIData(objSelectedEntity, objEffectiveDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceUIData> GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.EndRetrieveRelativePerformanceUIData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveRelativePerformanceUIData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveRelativePerformanceUIData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.Dictionary<string, string> objSelectedEntity = ((System.Collections.Generic.Dictionary<string, string>)(inValues[0]));
            System.DateTime objEffectiveDate = ((System.DateTime)(inValues[1]));
            return ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).BeginRetrieveRelativePerformanceUIData(objSelectedEntity, objEffectiveDate, callback, asyncState);
        }
        
        private object[] OnEndRetrieveRelativePerformanceUIData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceUIData> retVal = ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).EndRetrieveRelativePerformanceUIData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveRelativePerformanceUIDataCompleted(object state) {
            if ((this.RetrieveRelativePerformanceUIDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveRelativePerformanceUIDataCompleted(this, new RetrieveRelativePerformanceUIDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveRelativePerformanceUIDataAsync(System.Collections.Generic.Dictionary<string, string> objSelectedEntity, System.DateTime objEffectiveDate) {
            this.RetrieveRelativePerformanceUIDataAsync(objSelectedEntity, objEffectiveDate, null);
        }
        
        public void RetrieveRelativePerformanceUIDataAsync(System.Collections.Generic.Dictionary<string, string> objSelectedEntity, System.DateTime objEffectiveDate, object userState) {
            if ((this.onBeginRetrieveRelativePerformanceUIDataDelegate == null)) {
                this.onBeginRetrieveRelativePerformanceUIDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveRelativePerformanceUIData);
            }
            if ((this.onEndRetrieveRelativePerformanceUIDataDelegate == null)) {
                this.onEndRetrieveRelativePerformanceUIDataDelegate = new EndOperationDelegate(this.OnEndRetrieveRelativePerformanceUIData);
            }
            if ((this.onRetrieveRelativePerformanceUIDataCompletedDelegate == null)) {
                this.onRetrieveRelativePerformanceUIDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveRelativePerformanceUIDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveRelativePerformanceUIDataDelegate, new object[] {
                        objSelectedEntity,
                        objEffectiveDate}, this.onEndRetrieveRelativePerformanceUIDataDelegate, this.onRetrieveRelativePerformanceUIDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.BeginRetrieveBenchmarkChartReturnData(System.Collections.Generic.Dictionary<string, string> objSelectedEntities, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveBenchmarkChartReturnData(objSelectedEntities, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.DataContracts.BenchmarkChartReturnData> GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.EndRetrieveBenchmarkChartReturnData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveBenchmarkChartReturnData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveBenchmarkChartReturnData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.Dictionary<string, string> objSelectedEntities = ((System.Collections.Generic.Dictionary<string, string>)(inValues[0]));
            return ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).BeginRetrieveBenchmarkChartReturnData(objSelectedEntities, callback, asyncState);
        }
        
        private object[] OnEndRetrieveBenchmarkChartReturnData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.DataContracts.BenchmarkChartReturnData> retVal = ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).EndRetrieveBenchmarkChartReturnData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveBenchmarkChartReturnDataCompleted(object state) {
            if ((this.RetrieveBenchmarkChartReturnDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveBenchmarkChartReturnDataCompleted(this, new RetrieveBenchmarkChartReturnDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveBenchmarkChartReturnDataAsync(System.Collections.Generic.Dictionary<string, string> objSelectedEntities) {
            this.RetrieveBenchmarkChartReturnDataAsync(objSelectedEntities, null);
        }
        
        public void RetrieveBenchmarkChartReturnDataAsync(System.Collections.Generic.Dictionary<string, string> objSelectedEntities, object userState) {
            if ((this.onBeginRetrieveBenchmarkChartReturnDataDelegate == null)) {
                this.onBeginRetrieveBenchmarkChartReturnDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveBenchmarkChartReturnData);
            }
            if ((this.onEndRetrieveBenchmarkChartReturnDataDelegate == null)) {
                this.onEndRetrieveBenchmarkChartReturnDataDelegate = new EndOperationDelegate(this.OnEndRetrieveBenchmarkChartReturnData);
            }
            if ((this.onRetrieveBenchmarkChartReturnDataCompletedDelegate == null)) {
                this.onRetrieveBenchmarkChartReturnDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveBenchmarkChartReturnDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveBenchmarkChartReturnDataDelegate, new object[] {
                        objSelectedEntities}, this.onEndRetrieveBenchmarkChartReturnDataDelegate, this.onRetrieveBenchmarkChartReturnDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.BeginRetrieveBenchmarkGridReturnData(System.Collections.Generic.Dictionary<string, string> objSelectedEntities, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveBenchmarkGridReturnData(objSelectedEntities, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.DataContracts.BenchmarkGridReturnData> GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.EndRetrieveBenchmarkGridReturnData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveBenchmarkGridReturnData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveBenchmarkGridReturnData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.Dictionary<string, string> objSelectedEntities = ((System.Collections.Generic.Dictionary<string, string>)(inValues[0]));
            return ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).BeginRetrieveBenchmarkGridReturnData(objSelectedEntities, callback, asyncState);
        }
        
        private object[] OnEndRetrieveBenchmarkGridReturnData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.DataContracts.BenchmarkGridReturnData> retVal = ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).EndRetrieveBenchmarkGridReturnData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveBenchmarkGridReturnDataCompleted(object state) {
            if ((this.RetrieveBenchmarkGridReturnDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveBenchmarkGridReturnDataCompleted(this, new RetrieveBenchmarkGridReturnDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveBenchmarkGridReturnDataAsync(System.Collections.Generic.Dictionary<string, string> objSelectedEntities) {
            this.RetrieveBenchmarkGridReturnDataAsync(objSelectedEntities, null);
        }
        
        public void RetrieveBenchmarkGridReturnDataAsync(System.Collections.Generic.Dictionary<string, string> objSelectedEntities, object userState) {
            if ((this.onBeginRetrieveBenchmarkGridReturnDataDelegate == null)) {
                this.onBeginRetrieveBenchmarkGridReturnDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveBenchmarkGridReturnData);
            }
            if ((this.onEndRetrieveBenchmarkGridReturnDataDelegate == null)) {
                this.onEndRetrieveBenchmarkGridReturnDataDelegate = new EndOperationDelegate(this.OnEndRetrieveBenchmarkGridReturnData);
            }
            if ((this.onRetrieveBenchmarkGridReturnDataCompletedDelegate == null)) {
                this.onRetrieveBenchmarkGridReturnDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveBenchmarkGridReturnDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveBenchmarkGridReturnDataDelegate, new object[] {
                        objSelectedEntities}, this.onEndRetrieveBenchmarkGridReturnDataDelegate, this.onRetrieveBenchmarkGridReturnDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.BeginRetrieveChartExtensionData(System.Collections.Generic.Dictionary<string, string> objSelectedEntities, System.DateTime objStartDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveChartExtensionData(objSelectedEntities, objStartDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.DataContracts.ChartExtensionData> GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.EndRetrieveChartExtensionData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveChartExtensionData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveChartExtensionData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.Dictionary<string, string> objSelectedEntities = ((System.Collections.Generic.Dictionary<string, string>)(inValues[0]));
            System.DateTime objStartDate = ((System.DateTime)(inValues[1]));
            return ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).BeginRetrieveChartExtensionData(objSelectedEntities, objStartDate, callback, asyncState);
        }
        
        private object[] OnEndRetrieveChartExtensionData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.DataContracts.ChartExtensionData> retVal = ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).EndRetrieveChartExtensionData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveChartExtensionDataCompleted(object state) {
            if ((this.RetrieveChartExtensionDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveChartExtensionDataCompleted(this, new RetrieveChartExtensionDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveChartExtensionDataAsync(System.Collections.Generic.Dictionary<string, string> objSelectedEntities, System.DateTime objStartDate) {
            this.RetrieveChartExtensionDataAsync(objSelectedEntities, objStartDate, null);
        }
        
        public void RetrieveChartExtensionDataAsync(System.Collections.Generic.Dictionary<string, string> objSelectedEntities, System.DateTime objStartDate, object userState) {
            if ((this.onBeginRetrieveChartExtensionDataDelegate == null)) {
                this.onBeginRetrieveChartExtensionDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveChartExtensionData);
            }
            if ((this.onEndRetrieveChartExtensionDataDelegate == null)) {
                this.onEndRetrieveChartExtensionDataDelegate = new EndOperationDelegate(this.OnEndRetrieveChartExtensionData);
            }
            if ((this.onRetrieveChartExtensionDataCompletedDelegate == null)) {
                this.onRetrieveChartExtensionDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveChartExtensionDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveChartExtensionDataDelegate, new object[] {
                        objSelectedEntities,
                        objStartDate}, this.onEndRetrieveChartExtensionDataDelegate, this.onRetrieveChartExtensionDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.BeginRetrieveBenchmarkFilterSelectionData(string benchmarkCode, string benchmarkName, string filterType, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveBenchmarkFilterSelectionData(benchmarkCode, benchmarkName, filterType, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.DataContracts.BenchmarkFilterSelectionData> GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.EndRetrieveBenchmarkFilterSelectionData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveBenchmarkFilterSelectionData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveBenchmarkFilterSelectionData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string benchmarkCode = ((string)(inValues[0]));
            string benchmarkName = ((string)(inValues[1]));
            string filterType = ((string)(inValues[2]));
            return ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).BeginRetrieveBenchmarkFilterSelectionData(benchmarkCode, benchmarkName, filterType, callback, asyncState);
        }
        
        private object[] OnEndRetrieveBenchmarkFilterSelectionData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.DataContracts.BenchmarkFilterSelectionData> retVal = ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).EndRetrieveBenchmarkFilterSelectionData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveBenchmarkFilterSelectionDataCompleted(object state) {
            if ((this.RetrieveBenchmarkFilterSelectionDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveBenchmarkFilterSelectionDataCompleted(this, new RetrieveBenchmarkFilterSelectionDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveBenchmarkFilterSelectionDataAsync(string benchmarkCode, string benchmarkName, string filterType) {
            this.RetrieveBenchmarkFilterSelectionDataAsync(benchmarkCode, benchmarkName, filterType, null);
        }
        
        public void RetrieveBenchmarkFilterSelectionDataAsync(string benchmarkCode, string benchmarkName, string filterType, object userState) {
            if ((this.onBeginRetrieveBenchmarkFilterSelectionDataDelegate == null)) {
                this.onBeginRetrieveBenchmarkFilterSelectionDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveBenchmarkFilterSelectionData);
            }
            if ((this.onEndRetrieveBenchmarkFilterSelectionDataDelegate == null)) {
                this.onEndRetrieveBenchmarkFilterSelectionDataDelegate = new EndOperationDelegate(this.OnEndRetrieveBenchmarkFilterSelectionData);
            }
            if ((this.onRetrieveBenchmarkFilterSelectionDataCompletedDelegate == null)) {
                this.onRetrieveBenchmarkFilterSelectionDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveBenchmarkFilterSelectionDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveBenchmarkFilterSelectionDataDelegate, new object[] {
                        benchmarkCode,
                        benchmarkName,
                        filterType}, this.onEndRetrieveBenchmarkFilterSelectionDataDelegate, this.onRetrieveBenchmarkFilterSelectionDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.BeginRetrieveMarketSnapshotSelectionData(string userName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveMarketSnapshotSelectionData(userName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotSelectionData> GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.EndRetrieveMarketSnapshotSelectionData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveMarketSnapshotSelectionData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveMarketSnapshotSelectionData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userName = ((string)(inValues[0]));
            return ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).BeginRetrieveMarketSnapshotSelectionData(userName, callback, asyncState);
        }
        
        private object[] OnEndRetrieveMarketSnapshotSelectionData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotSelectionData> retVal = ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).EndRetrieveMarketSnapshotSelectionData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveMarketSnapshotSelectionDataCompleted(object state) {
            if ((this.RetrieveMarketSnapshotSelectionDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveMarketSnapshotSelectionDataCompleted(this, new RetrieveMarketSnapshotSelectionDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveMarketSnapshotSelectionDataAsync(string userName) {
            this.RetrieveMarketSnapshotSelectionDataAsync(userName, null);
        }
        
        public void RetrieveMarketSnapshotSelectionDataAsync(string userName, object userState) {
            if ((this.onBeginRetrieveMarketSnapshotSelectionDataDelegate == null)) {
                this.onBeginRetrieveMarketSnapshotSelectionDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveMarketSnapshotSelectionData);
            }
            if ((this.onEndRetrieveMarketSnapshotSelectionDataDelegate == null)) {
                this.onEndRetrieveMarketSnapshotSelectionDataDelegate = new EndOperationDelegate(this.OnEndRetrieveMarketSnapshotSelectionData);
            }
            if ((this.onRetrieveMarketSnapshotSelectionDataCompletedDelegate == null)) {
                this.onRetrieveMarketSnapshotSelectionDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveMarketSnapshotSelectionDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveMarketSnapshotSelectionDataDelegate, new object[] {
                        userName}, this.onEndRetrieveMarketSnapshotSelectionDataDelegate, this.onRetrieveMarketSnapshotSelectionDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.BeginRetrieveMarketSnapshotPreference(int snapshotPreferenceId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveMarketSnapshotPreference(snapshotPreferenceId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.EndRetrieveMarketSnapshotPreference(System.IAsyncResult result) {
            return base.Channel.EndRetrieveMarketSnapshotPreference(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveMarketSnapshotPreference(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int snapshotPreferenceId = ((int)(inValues[0]));
            return ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).BeginRetrieveMarketSnapshotPreference(snapshotPreferenceId, callback, asyncState);
        }
        
        private object[] OnEndRetrieveMarketSnapshotPreference(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> retVal = ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).EndRetrieveMarketSnapshotPreference(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveMarketSnapshotPreferenceCompleted(object state) {
            if ((this.RetrieveMarketSnapshotPreferenceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveMarketSnapshotPreferenceCompleted(this, new RetrieveMarketSnapshotPreferenceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveMarketSnapshotPreferenceAsync(int snapshotPreferenceId) {
            this.RetrieveMarketSnapshotPreferenceAsync(snapshotPreferenceId, null);
        }
        
        public void RetrieveMarketSnapshotPreferenceAsync(int snapshotPreferenceId, object userState) {
            if ((this.onBeginRetrieveMarketSnapshotPreferenceDelegate == null)) {
                this.onBeginRetrieveMarketSnapshotPreferenceDelegate = new BeginOperationDelegate(this.OnBeginRetrieveMarketSnapshotPreference);
            }
            if ((this.onEndRetrieveMarketSnapshotPreferenceDelegate == null)) {
                this.onEndRetrieveMarketSnapshotPreferenceDelegate = new EndOperationDelegate(this.OnEndRetrieveMarketSnapshotPreference);
            }
            if ((this.onRetrieveMarketSnapshotPreferenceCompletedDelegate == null)) {
                this.onRetrieveMarketSnapshotPreferenceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveMarketSnapshotPreferenceCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveMarketSnapshotPreferenceDelegate, new object[] {
                        snapshotPreferenceId}, this.onEndRetrieveMarketSnapshotPreferenceDelegate, this.onRetrieveMarketSnapshotPreferenceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.BeginRetrieveMarketSnapshotPerformanceData(System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> marketSnapshotPreference, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveMarketSnapshotPerformanceData(marketSnapshotPreference, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPerformanceData> GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.EndRetrieveMarketSnapshotPerformanceData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveMarketSnapshotPerformanceData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveMarketSnapshotPerformanceData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> marketSnapshotPreference = ((System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference>)(inValues[0]));
            return ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).BeginRetrieveMarketSnapshotPerformanceData(marketSnapshotPreference, callback, asyncState);
        }
        
        private object[] OnEndRetrieveMarketSnapshotPerformanceData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPerformanceData> retVal = ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).EndRetrieveMarketSnapshotPerformanceData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveMarketSnapshotPerformanceDataCompleted(object state) {
            if ((this.RetrieveMarketSnapshotPerformanceDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveMarketSnapshotPerformanceDataCompleted(this, new RetrieveMarketSnapshotPerformanceDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveMarketSnapshotPerformanceDataAsync(System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> marketSnapshotPreference) {
            this.RetrieveMarketSnapshotPerformanceDataAsync(marketSnapshotPreference, null);
        }
        
        public void RetrieveMarketSnapshotPerformanceDataAsync(System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> marketSnapshotPreference, object userState) {
            if ((this.onBeginRetrieveMarketSnapshotPerformanceDataDelegate == null)) {
                this.onBeginRetrieveMarketSnapshotPerformanceDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveMarketSnapshotPerformanceData);
            }
            if ((this.onEndRetrieveMarketSnapshotPerformanceDataDelegate == null)) {
                this.onEndRetrieveMarketSnapshotPerformanceDataDelegate = new EndOperationDelegate(this.OnEndRetrieveMarketSnapshotPerformanceData);
            }
            if ((this.onRetrieveMarketSnapshotPerformanceDataCompletedDelegate == null)) {
                this.onRetrieveMarketSnapshotPerformanceDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveMarketSnapshotPerformanceDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveMarketSnapshotPerformanceDataDelegate, new object[] {
                        marketSnapshotPreference}, this.onEndRetrieveMarketSnapshotPerformanceDataDelegate, this.onRetrieveMarketSnapshotPerformanceDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.BeginSaveMarketSnapshotPreference(string updateXML, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveMarketSnapshotPreference(updateXML, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.EndSaveMarketSnapshotPreference(System.IAsyncResult result) {
            return base.Channel.EndSaveMarketSnapshotPreference(result);
        }
        
        private System.IAsyncResult OnBeginSaveMarketSnapshotPreference(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string updateXML = ((string)(inValues[0]));
            return ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).BeginSaveMarketSnapshotPreference(updateXML, callback, asyncState);
        }
        
        private object[] OnEndSaveMarketSnapshotPreference(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> retVal = ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).EndSaveMarketSnapshotPreference(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveMarketSnapshotPreferenceCompleted(object state) {
            if ((this.SaveMarketSnapshotPreferenceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveMarketSnapshotPreferenceCompleted(this, new SaveMarketSnapshotPreferenceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveMarketSnapshotPreferenceAsync(string updateXML) {
            this.SaveMarketSnapshotPreferenceAsync(updateXML, null);
        }
        
        public void SaveMarketSnapshotPreferenceAsync(string updateXML, object userState) {
            if ((this.onBeginSaveMarketSnapshotPreferenceDelegate == null)) {
                this.onBeginSaveMarketSnapshotPreferenceDelegate = new BeginOperationDelegate(this.OnBeginSaveMarketSnapshotPreference);
            }
            if ((this.onEndSaveMarketSnapshotPreferenceDelegate == null)) {
                this.onEndSaveMarketSnapshotPreferenceDelegate = new EndOperationDelegate(this.OnEndSaveMarketSnapshotPreference);
            }
            if ((this.onSaveMarketSnapshotPreferenceCompletedDelegate == null)) {
                this.onSaveMarketSnapshotPreferenceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveMarketSnapshotPreferenceCompleted);
            }
            base.InvokeAsync(this.onBeginSaveMarketSnapshotPreferenceDelegate, new object[] {
                        updateXML}, this.onEndSaveMarketSnapshotPreferenceDelegate, this.onSaveMarketSnapshotPreferenceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.BeginSaveAsMarketSnapshotPreference(string updateXML, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveAsMarketSnapshotPreference(updateXML, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        GreenField.ServiceCaller.PerformanceDefinitions.PopulatedMarketSnapshotPerformanceData GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.EndSaveAsMarketSnapshotPreference(System.IAsyncResult result) {
            return base.Channel.EndSaveAsMarketSnapshotPreference(result);
        }
        
        private System.IAsyncResult OnBeginSaveAsMarketSnapshotPreference(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string updateXML = ((string)(inValues[0]));
            return ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).BeginSaveAsMarketSnapshotPreference(updateXML, callback, asyncState);
        }
        
        private object[] OnEndSaveAsMarketSnapshotPreference(System.IAsyncResult result) {
            GreenField.ServiceCaller.PerformanceDefinitions.PopulatedMarketSnapshotPerformanceData retVal = ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).EndSaveAsMarketSnapshotPreference(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveAsMarketSnapshotPreferenceCompleted(object state) {
            if ((this.SaveAsMarketSnapshotPreferenceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveAsMarketSnapshotPreferenceCompleted(this, new SaveAsMarketSnapshotPreferenceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveAsMarketSnapshotPreferenceAsync(string updateXML) {
            this.SaveAsMarketSnapshotPreferenceAsync(updateXML, null);
        }
        
        public void SaveAsMarketSnapshotPreferenceAsync(string updateXML, object userState) {
            if ((this.onBeginSaveAsMarketSnapshotPreferenceDelegate == null)) {
                this.onBeginSaveAsMarketSnapshotPreferenceDelegate = new BeginOperationDelegate(this.OnBeginSaveAsMarketSnapshotPreference);
            }
            if ((this.onEndSaveAsMarketSnapshotPreferenceDelegate == null)) {
                this.onEndSaveAsMarketSnapshotPreferenceDelegate = new EndOperationDelegate(this.OnEndSaveAsMarketSnapshotPreference);
            }
            if ((this.onSaveAsMarketSnapshotPreferenceCompletedDelegate == null)) {
                this.onSaveAsMarketSnapshotPreferenceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveAsMarketSnapshotPreferenceCompleted);
            }
            base.InvokeAsync(this.onBeginSaveAsMarketSnapshotPreferenceDelegate, new object[] {
                        updateXML}, this.onEndSaveAsMarketSnapshotPreferenceDelegate, this.onSaveAsMarketSnapshotPreferenceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.BeginRemoveMarketSnapshotPreference(string userName, string snapshotName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveMarketSnapshotPreference(userName, snapshotName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.EndRemoveMarketSnapshotPreference(System.IAsyncResult result) {
            return base.Channel.EndRemoveMarketSnapshotPreference(result);
        }
        
        private System.IAsyncResult OnBeginRemoveMarketSnapshotPreference(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userName = ((string)(inValues[0]));
            string snapshotName = ((string)(inValues[1]));
            return ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).BeginRemoveMarketSnapshotPreference(userName, snapshotName, callback, asyncState);
        }
        
        private object[] OnEndRemoveMarketSnapshotPreference(System.IAsyncResult result) {
            bool retVal = ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).EndRemoveMarketSnapshotPreference(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRemoveMarketSnapshotPreferenceCompleted(object state) {
            if ((this.RemoveMarketSnapshotPreferenceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveMarketSnapshotPreferenceCompleted(this, new RemoveMarketSnapshotPreferenceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveMarketSnapshotPreferenceAsync(string userName, string snapshotName) {
            this.RemoveMarketSnapshotPreferenceAsync(userName, snapshotName, null);
        }
        
        public void RemoveMarketSnapshotPreferenceAsync(string userName, string snapshotName, object userState) {
            if ((this.onBeginRemoveMarketSnapshotPreferenceDelegate == null)) {
                this.onBeginRemoveMarketSnapshotPreferenceDelegate = new BeginOperationDelegate(this.OnBeginRemoveMarketSnapshotPreference);
            }
            if ((this.onEndRemoveMarketSnapshotPreferenceDelegate == null)) {
                this.onEndRemoveMarketSnapshotPreferenceDelegate = new EndOperationDelegate(this.OnEndRemoveMarketSnapshotPreference);
            }
            if ((this.onRemoveMarketSnapshotPreferenceCompletedDelegate == null)) {
                this.onRemoveMarketSnapshotPreferenceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveMarketSnapshotPreferenceCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveMarketSnapshotPreferenceDelegate, new object[] {
                        userName,
                        snapshotName}, this.onEndRemoveMarketSnapshotPreferenceDelegate, this.onRemoveMarketSnapshotPreferenceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.BeginRetrieveRelativePerformanceSectorData(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveRelativePerformanceSectorData(portfolioSelectionData, effectiveDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceSectorData> GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.EndRetrieveRelativePerformanceSectorData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveRelativePerformanceSectorData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveRelativePerformanceSectorData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData = ((GreenField.DataContracts.PortfolioSelectionData)(inValues[0]));
            System.DateTime effectiveDate = ((System.DateTime)(inValues[1]));
            return ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).BeginRetrieveRelativePerformanceSectorData(portfolioSelectionData, effectiveDate, callback, asyncState);
        }
        
        private object[] OnEndRetrieveRelativePerformanceSectorData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceSectorData> retVal = ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).EndRetrieveRelativePerformanceSectorData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveRelativePerformanceSectorDataCompleted(object state) {
            if ((this.RetrieveRelativePerformanceSectorDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveRelativePerformanceSectorDataCompleted(this, new RetrieveRelativePerformanceSectorDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveRelativePerformanceSectorDataAsync(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate) {
            this.RetrieveRelativePerformanceSectorDataAsync(portfolioSelectionData, effectiveDate, null);
        }
        
        public void RetrieveRelativePerformanceSectorDataAsync(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, object userState) {
            if ((this.onBeginRetrieveRelativePerformanceSectorDataDelegate == null)) {
                this.onBeginRetrieveRelativePerformanceSectorDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveRelativePerformanceSectorData);
            }
            if ((this.onEndRetrieveRelativePerformanceSectorDataDelegate == null)) {
                this.onEndRetrieveRelativePerformanceSectorDataDelegate = new EndOperationDelegate(this.OnEndRetrieveRelativePerformanceSectorData);
            }
            if ((this.onRetrieveRelativePerformanceSectorDataCompletedDelegate == null)) {
                this.onRetrieveRelativePerformanceSectorDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveRelativePerformanceSectorDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveRelativePerformanceSectorDataDelegate, new object[] {
                        portfolioSelectionData,
                        effectiveDate}, this.onEndRetrieveRelativePerformanceSectorDataDelegate, this.onRetrieveRelativePerformanceSectorDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.BeginRetrieveRelativePerformanceData(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string period, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveRelativePerformanceData(portfolioSelectionData, effectiveDate, period, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceData> GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.EndRetrieveRelativePerformanceData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveRelativePerformanceData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveRelativePerformanceData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData = ((GreenField.DataContracts.PortfolioSelectionData)(inValues[0]));
            System.DateTime effectiveDate = ((System.DateTime)(inValues[1]));
            string period = ((string)(inValues[2]));
            return ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).BeginRetrieveRelativePerformanceData(portfolioSelectionData, effectiveDate, period, callback, asyncState);
        }
        
        private object[] OnEndRetrieveRelativePerformanceData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceData> retVal = ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).EndRetrieveRelativePerformanceData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveRelativePerformanceDataCompleted(object state) {
            if ((this.RetrieveRelativePerformanceDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveRelativePerformanceDataCompleted(this, new RetrieveRelativePerformanceDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveRelativePerformanceDataAsync(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string period) {
            this.RetrieveRelativePerformanceDataAsync(portfolioSelectionData, effectiveDate, period, null);
        }
        
        public void RetrieveRelativePerformanceDataAsync(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string period, object userState) {
            if ((this.onBeginRetrieveRelativePerformanceDataDelegate == null)) {
                this.onBeginRetrieveRelativePerformanceDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveRelativePerformanceData);
            }
            if ((this.onEndRetrieveRelativePerformanceDataDelegate == null)) {
                this.onEndRetrieveRelativePerformanceDataDelegate = new EndOperationDelegate(this.OnEndRetrieveRelativePerformanceData);
            }
            if ((this.onRetrieveRelativePerformanceDataCompletedDelegate == null)) {
                this.onRetrieveRelativePerformanceDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveRelativePerformanceDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveRelativePerformanceDataDelegate, new object[] {
                        portfolioSelectionData,
                        effectiveDate,
                        period}, this.onEndRetrieveRelativePerformanceDataDelegate, this.onRetrieveRelativePerformanceDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.BeginRetrieveRelativePerformanceCountryActivePositionData(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string period, string countryID, string sectorID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveRelativePerformanceCountryActivePositionData(portfolioSelectionData, effectiveDate, period, countryID, sectorID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceActivePositionData> GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.EndRetrieveRelativePerformanceCountryActivePositionData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveRelativePerformanceCountryActivePositionData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveRelativePerformanceCountryActivePositionData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData = ((GreenField.DataContracts.PortfolioSelectionData)(inValues[0]));
            System.DateTime effectiveDate = ((System.DateTime)(inValues[1]));
            string period = ((string)(inValues[2]));
            string countryID = ((string)(inValues[3]));
            string sectorID = ((string)(inValues[4]));
            return ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).BeginRetrieveRelativePerformanceCountryActivePositionData(portfolioSelectionData, effectiveDate, period, countryID, sectorID, callback, asyncState);
        }
        
        private object[] OnEndRetrieveRelativePerformanceCountryActivePositionData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceActivePositionData> retVal = ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).EndRetrieveRelativePerformanceCountryActivePositionData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveRelativePerformanceCountryActivePositionDataCompleted(object state) {
            if ((this.RetrieveRelativePerformanceCountryActivePositionDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveRelativePerformanceCountryActivePositionDataCompleted(this, new RetrieveRelativePerformanceCountryActivePositionDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveRelativePerformanceCountryActivePositionDataAsync(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string period, string countryID, string sectorID) {
            this.RetrieveRelativePerformanceCountryActivePositionDataAsync(portfolioSelectionData, effectiveDate, period, countryID, sectorID, null);
        }
        
        public void RetrieveRelativePerformanceCountryActivePositionDataAsync(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string period, string countryID, string sectorID, object userState) {
            if ((this.onBeginRetrieveRelativePerformanceCountryActivePositionDataDelegate == null)) {
                this.onBeginRetrieveRelativePerformanceCountryActivePositionDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveRelativePerformanceCountryActivePositionData);
            }
            if ((this.onEndRetrieveRelativePerformanceCountryActivePositionDataDelegate == null)) {
                this.onEndRetrieveRelativePerformanceCountryActivePositionDataDelegate = new EndOperationDelegate(this.OnEndRetrieveRelativePerformanceCountryActivePositionData);
            }
            if ((this.onRetrieveRelativePerformanceCountryActivePositionDataCompletedDelegate == null)) {
                this.onRetrieveRelativePerformanceCountryActivePositionDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveRelativePerformanceCountryActivePositionDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveRelativePerformanceCountryActivePositionDataDelegate, new object[] {
                        portfolioSelectionData,
                        effectiveDate,
                        period,
                        countryID,
                        sectorID}, this.onEndRetrieveRelativePerformanceCountryActivePositionDataDelegate, this.onRetrieveRelativePerformanceCountryActivePositionDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.BeginRetrieveRelativePerformanceSectorActivePositionData(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string period, string countryID, string sectorID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveRelativePerformanceSectorActivePositionData(portfolioSelectionData, effectiveDate, period, countryID, sectorID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceActivePositionData> GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.EndRetrieveRelativePerformanceSectorActivePositionData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveRelativePerformanceSectorActivePositionData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveRelativePerformanceSectorActivePositionData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData = ((GreenField.DataContracts.PortfolioSelectionData)(inValues[0]));
            System.DateTime effectiveDate = ((System.DateTime)(inValues[1]));
            string period = ((string)(inValues[2]));
            string countryID = ((string)(inValues[3]));
            string sectorID = ((string)(inValues[4]));
            return ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).BeginRetrieveRelativePerformanceSectorActivePositionData(portfolioSelectionData, effectiveDate, period, countryID, sectorID, callback, asyncState);
        }
        
        private object[] OnEndRetrieveRelativePerformanceSectorActivePositionData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceActivePositionData> retVal = ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).EndRetrieveRelativePerformanceSectorActivePositionData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveRelativePerformanceSectorActivePositionDataCompleted(object state) {
            if ((this.RetrieveRelativePerformanceSectorActivePositionDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveRelativePerformanceSectorActivePositionDataCompleted(this, new RetrieveRelativePerformanceSectorActivePositionDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveRelativePerformanceSectorActivePositionDataAsync(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string period, string countryID, string sectorID) {
            this.RetrieveRelativePerformanceSectorActivePositionDataAsync(portfolioSelectionData, effectiveDate, period, countryID, sectorID, null);
        }
        
        public void RetrieveRelativePerformanceSectorActivePositionDataAsync(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string period, string countryID, string sectorID, object userState) {
            if ((this.onBeginRetrieveRelativePerformanceSectorActivePositionDataDelegate == null)) {
                this.onBeginRetrieveRelativePerformanceSectorActivePositionDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveRelativePerformanceSectorActivePositionData);
            }
            if ((this.onEndRetrieveRelativePerformanceSectorActivePositionDataDelegate == null)) {
                this.onEndRetrieveRelativePerformanceSectorActivePositionDataDelegate = new EndOperationDelegate(this.OnEndRetrieveRelativePerformanceSectorActivePositionData);
            }
            if ((this.onRetrieveRelativePerformanceSectorActivePositionDataCompletedDelegate == null)) {
                this.onRetrieveRelativePerformanceSectorActivePositionDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveRelativePerformanceSectorActivePositionDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveRelativePerformanceSectorActivePositionDataDelegate, new object[] {
                        portfolioSelectionData,
                        effectiveDate,
                        period,
                        countryID,
                        sectorID}, this.onEndRetrieveRelativePerformanceSectorActivePositionDataDelegate, this.onRetrieveRelativePerformanceSectorActivePositionDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.BeginRetrieveRelativePerformanceSecurityActivePositionData(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string period, string countryID, string sectorID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveRelativePerformanceSecurityActivePositionData(portfolioSelectionData, effectiveDate, period, countryID, sectorID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceActivePositionData> GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.EndRetrieveRelativePerformanceSecurityActivePositionData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveRelativePerformanceSecurityActivePositionData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveRelativePerformanceSecurityActivePositionData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData = ((GreenField.DataContracts.PortfolioSelectionData)(inValues[0]));
            System.DateTime effectiveDate = ((System.DateTime)(inValues[1]));
            string period = ((string)(inValues[2]));
            string countryID = ((string)(inValues[3]));
            string sectorID = ((string)(inValues[4]));
            return ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).BeginRetrieveRelativePerformanceSecurityActivePositionData(portfolioSelectionData, effectiveDate, period, countryID, sectorID, callback, asyncState);
        }
        
        private object[] OnEndRetrieveRelativePerformanceSecurityActivePositionData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceActivePositionData> retVal = ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).EndRetrieveRelativePerformanceSecurityActivePositionData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveRelativePerformanceSecurityActivePositionDataCompleted(object state) {
            if ((this.RetrieveRelativePerformanceSecurityActivePositionDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveRelativePerformanceSecurityActivePositionDataCompleted(this, new RetrieveRelativePerformanceSecurityActivePositionDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveRelativePerformanceSecurityActivePositionDataAsync(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string period, string countryID, string sectorID) {
            this.RetrieveRelativePerformanceSecurityActivePositionDataAsync(portfolioSelectionData, effectiveDate, period, countryID, sectorID, null);
        }
        
        public void RetrieveRelativePerformanceSecurityActivePositionDataAsync(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string period, string countryID, string sectorID, object userState) {
            if ((this.onBeginRetrieveRelativePerformanceSecurityActivePositionDataDelegate == null)) {
                this.onBeginRetrieveRelativePerformanceSecurityActivePositionDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveRelativePerformanceSecurityActivePositionData);
            }
            if ((this.onEndRetrieveRelativePerformanceSecurityActivePositionDataDelegate == null)) {
                this.onEndRetrieveRelativePerformanceSecurityActivePositionDataDelegate = new EndOperationDelegate(this.OnEndRetrieveRelativePerformanceSecurityActivePositionData);
            }
            if ((this.onRetrieveRelativePerformanceSecurityActivePositionDataCompletedDelegate == null)) {
                this.onRetrieveRelativePerformanceSecurityActivePositionDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveRelativePerformanceSecurityActivePositionDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveRelativePerformanceSecurityActivePositionDataDelegate, new object[] {
                        portfolioSelectionData,
                        effectiveDate,
                        period,
                        countryID,
                        sectorID}, this.onEndRetrieveRelativePerformanceSecurityActivePositionDataDelegate, this.onRetrieveRelativePerformanceSecurityActivePositionDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.BeginRetrieveRelativePerformanceSecurityData(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string period, string countryID, string sectorID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveRelativePerformanceSecurityData(portfolioSelectionData, effectiveDate, period, countryID, sectorID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceSecurityData> GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.EndRetrieveRelativePerformanceSecurityData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveRelativePerformanceSecurityData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveRelativePerformanceSecurityData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData = ((GreenField.DataContracts.PortfolioSelectionData)(inValues[0]));
            System.DateTime effectiveDate = ((System.DateTime)(inValues[1]));
            string period = ((string)(inValues[2]));
            string countryID = ((string)(inValues[3]));
            string sectorID = ((string)(inValues[4]));
            return ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).BeginRetrieveRelativePerformanceSecurityData(portfolioSelectionData, effectiveDate, period, countryID, sectorID, callback, asyncState);
        }
        
        private object[] OnEndRetrieveRelativePerformanceSecurityData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceSecurityData> retVal = ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).EndRetrieveRelativePerformanceSecurityData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveRelativePerformanceSecurityDataCompleted(object state) {
            if ((this.RetrieveRelativePerformanceSecurityDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveRelativePerformanceSecurityDataCompleted(this, new RetrieveRelativePerformanceSecurityDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveRelativePerformanceSecurityDataAsync(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string period, string countryID, string sectorID) {
            this.RetrieveRelativePerformanceSecurityDataAsync(portfolioSelectionData, effectiveDate, period, countryID, sectorID, null);
        }
        
        public void RetrieveRelativePerformanceSecurityDataAsync(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string period, string countryID, string sectorID, object userState) {
            if ((this.onBeginRetrieveRelativePerformanceSecurityDataDelegate == null)) {
                this.onBeginRetrieveRelativePerformanceSecurityDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveRelativePerformanceSecurityData);
            }
            if ((this.onEndRetrieveRelativePerformanceSecurityDataDelegate == null)) {
                this.onEndRetrieveRelativePerformanceSecurityDataDelegate = new EndOperationDelegate(this.OnEndRetrieveRelativePerformanceSecurityData);
            }
            if ((this.onRetrieveRelativePerformanceSecurityDataCompletedDelegate == null)) {
                this.onRetrieveRelativePerformanceSecurityDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveRelativePerformanceSecurityDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveRelativePerformanceSecurityDataDelegate, new object[] {
                        portfolioSelectionData,
                        effectiveDate,
                        period,
                        countryID,
                        sectorID}, this.onEndRetrieveRelativePerformanceSecurityDataDelegate, this.onRetrieveRelativePerformanceSecurityDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.BeginRetrieveMarketCapitalizationData(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string filterType, string filterValue, bool isExCashSecurity, bool lookThruEnabled, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveMarketCapitalizationData(portfolioSelectionData, effectiveDate, filterType, filterValue, isExCashSecurity, lookThruEnabled, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.DataContracts.MarketCapitalizationData> GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.EndRetrieveMarketCapitalizationData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveMarketCapitalizationData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveMarketCapitalizationData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData = ((GreenField.DataContracts.PortfolioSelectionData)(inValues[0]));
            System.DateTime effectiveDate = ((System.DateTime)(inValues[1]));
            string filterType = ((string)(inValues[2]));
            string filterValue = ((string)(inValues[3]));
            bool isExCashSecurity = ((bool)(inValues[4]));
            bool lookThruEnabled = ((bool)(inValues[5]));
            return ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).BeginRetrieveMarketCapitalizationData(portfolioSelectionData, effectiveDate, filterType, filterValue, isExCashSecurity, lookThruEnabled, callback, asyncState);
        }
        
        private object[] OnEndRetrieveMarketCapitalizationData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.DataContracts.MarketCapitalizationData> retVal = ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).EndRetrieveMarketCapitalizationData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveMarketCapitalizationDataCompleted(object state) {
            if ((this.RetrieveMarketCapitalizationDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveMarketCapitalizationDataCompleted(this, new RetrieveMarketCapitalizationDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveMarketCapitalizationDataAsync(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string filterType, string filterValue, bool isExCashSecurity, bool lookThruEnabled) {
            this.RetrieveMarketCapitalizationDataAsync(portfolioSelectionData, effectiveDate, filterType, filterValue, isExCashSecurity, lookThruEnabled, null);
        }
        
        public void RetrieveMarketCapitalizationDataAsync(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string filterType, string filterValue, bool isExCashSecurity, bool lookThruEnabled, object userState) {
            if ((this.onBeginRetrieveMarketCapitalizationDataDelegate == null)) {
                this.onBeginRetrieveMarketCapitalizationDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveMarketCapitalizationData);
            }
            if ((this.onEndRetrieveMarketCapitalizationDataDelegate == null)) {
                this.onEndRetrieveMarketCapitalizationDataDelegate = new EndOperationDelegate(this.OnEndRetrieveMarketCapitalizationData);
            }
            if ((this.onRetrieveMarketCapitalizationDataCompletedDelegate == null)) {
                this.onRetrieveMarketCapitalizationDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveMarketCapitalizationDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveMarketCapitalizationDataDelegate, new object[] {
                        portfolioSelectionData,
                        effectiveDate,
                        filterType,
                        filterValue,
                        isExCashSecurity,
                        lookThruEnabled}, this.onEndRetrieveMarketCapitalizationDataDelegate, this.onRetrieveMarketCapitalizationDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.BeginRetrievePerformanceGridData(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string country, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrievePerformanceGridData(portfolioSelectionData, effectiveDate, country, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.DataContracts.PerformanceGridData> GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.EndRetrievePerformanceGridData(System.IAsyncResult result) {
            return base.Channel.EndRetrievePerformanceGridData(result);
        }
        
        private System.IAsyncResult OnBeginRetrievePerformanceGridData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData = ((GreenField.DataContracts.PortfolioSelectionData)(inValues[0]));
            System.DateTime effectiveDate = ((System.DateTime)(inValues[1]));
            string country = ((string)(inValues[2]));
            return ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).BeginRetrievePerformanceGridData(portfolioSelectionData, effectiveDate, country, callback, asyncState);
        }
        
        private object[] OnEndRetrievePerformanceGridData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.DataContracts.PerformanceGridData> retVal = ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).EndRetrievePerformanceGridData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrievePerformanceGridDataCompleted(object state) {
            if ((this.RetrievePerformanceGridDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrievePerformanceGridDataCompleted(this, new RetrievePerformanceGridDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrievePerformanceGridDataAsync(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string country) {
            this.RetrievePerformanceGridDataAsync(portfolioSelectionData, effectiveDate, country, null);
        }
        
        public void RetrievePerformanceGridDataAsync(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string country, object userState) {
            if ((this.onBeginRetrievePerformanceGridDataDelegate == null)) {
                this.onBeginRetrievePerformanceGridDataDelegate = new BeginOperationDelegate(this.OnBeginRetrievePerformanceGridData);
            }
            if ((this.onEndRetrievePerformanceGridDataDelegate == null)) {
                this.onEndRetrievePerformanceGridDataDelegate = new EndOperationDelegate(this.OnEndRetrievePerformanceGridData);
            }
            if ((this.onRetrievePerformanceGridDataCompletedDelegate == null)) {
                this.onRetrievePerformanceGridDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrievePerformanceGridDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrievePerformanceGridDataDelegate, new object[] {
                        portfolioSelectionData,
                        effectiveDate,
                        country}, this.onEndRetrievePerformanceGridDataDelegate, this.onRetrievePerformanceGridDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.BeginRetrievePerformanceGraphData(GreenField.DataContracts.PortfolioSelectionData fundSelectionData, System.DateTime effectiveDate, string period, string country, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrievePerformanceGraphData(fundSelectionData, effectiveDate, period, country, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.DataContracts.PerformanceGraphData> GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations.EndRetrievePerformanceGraphData(System.IAsyncResult result) {
            return base.Channel.EndRetrievePerformanceGraphData(result);
        }
        
        private System.IAsyncResult OnBeginRetrievePerformanceGraphData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.DataContracts.PortfolioSelectionData fundSelectionData = ((GreenField.DataContracts.PortfolioSelectionData)(inValues[0]));
            System.DateTime effectiveDate = ((System.DateTime)(inValues[1]));
            string period = ((string)(inValues[2]));
            string country = ((string)(inValues[3]));
            return ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).BeginRetrievePerformanceGraphData(fundSelectionData, effectiveDate, period, country, callback, asyncState);
        }
        
        private object[] OnEndRetrievePerformanceGraphData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.DataContracts.PerformanceGraphData> retVal = ((GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations)(this)).EndRetrievePerformanceGraphData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrievePerformanceGraphDataCompleted(object state) {
            if ((this.RetrievePerformanceGraphDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrievePerformanceGraphDataCompleted(this, new RetrievePerformanceGraphDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrievePerformanceGraphDataAsync(GreenField.DataContracts.PortfolioSelectionData fundSelectionData, System.DateTime effectiveDate, string period, string country) {
            this.RetrievePerformanceGraphDataAsync(fundSelectionData, effectiveDate, period, country, null);
        }
        
        public void RetrievePerformanceGraphDataAsync(GreenField.DataContracts.PortfolioSelectionData fundSelectionData, System.DateTime effectiveDate, string period, string country, object userState) {
            if ((this.onBeginRetrievePerformanceGraphDataDelegate == null)) {
                this.onBeginRetrievePerformanceGraphDataDelegate = new BeginOperationDelegate(this.OnBeginRetrievePerformanceGraphData);
            }
            if ((this.onEndRetrievePerformanceGraphDataDelegate == null)) {
                this.onEndRetrievePerformanceGraphDataDelegate = new EndOperationDelegate(this.OnEndRetrievePerformanceGraphData);
            }
            if ((this.onRetrievePerformanceGraphDataCompletedDelegate == null)) {
                this.onRetrievePerformanceGraphDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrievePerformanceGraphDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrievePerformanceGraphDataDelegate, new object[] {
                        fundSelectionData,
                        effectiveDate,
                        period,
                        country}, this.onEndRetrievePerformanceGraphDataDelegate, this.onRetrievePerformanceGraphDataCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations CreateChannel() {
            return new PerformanceOperationsClientChannel(this);
        }
        
        private class PerformanceOperationsClientChannel : ChannelBase<GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations>, GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations {
            
            public PerformanceOperationsClientChannel(System.ServiceModel.ClientBase<GreenField.ServiceCaller.PerformanceDefinitions.PerformanceOperations> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginRetrieveRelativePerformanceUIData(System.Collections.Generic.Dictionary<string, string> objSelectedEntity, System.DateTime objEffectiveDate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = objSelectedEntity;
                _args[1] = objEffectiveDate;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveRelativePerformanceUIData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceUIData> EndRetrieveRelativePerformanceUIData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceUIData> _result = ((System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceUIData>)(base.EndInvoke("RetrieveRelativePerformanceUIData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveBenchmarkChartReturnData(System.Collections.Generic.Dictionary<string, string> objSelectedEntities, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = objSelectedEntities;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveBenchmarkChartReturnData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.DataContracts.BenchmarkChartReturnData> EndRetrieveBenchmarkChartReturnData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.DataContracts.BenchmarkChartReturnData> _result = ((System.Collections.Generic.List<GreenField.DataContracts.BenchmarkChartReturnData>)(base.EndInvoke("RetrieveBenchmarkChartReturnData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveBenchmarkGridReturnData(System.Collections.Generic.Dictionary<string, string> objSelectedEntities, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = objSelectedEntities;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveBenchmarkGridReturnData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.DataContracts.BenchmarkGridReturnData> EndRetrieveBenchmarkGridReturnData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.DataContracts.BenchmarkGridReturnData> _result = ((System.Collections.Generic.List<GreenField.DataContracts.BenchmarkGridReturnData>)(base.EndInvoke("RetrieveBenchmarkGridReturnData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveChartExtensionData(System.Collections.Generic.Dictionary<string, string> objSelectedEntities, System.DateTime objStartDate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = objSelectedEntities;
                _args[1] = objStartDate;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveChartExtensionData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.DataContracts.ChartExtensionData> EndRetrieveChartExtensionData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.DataContracts.ChartExtensionData> _result = ((System.Collections.Generic.List<GreenField.DataContracts.ChartExtensionData>)(base.EndInvoke("RetrieveChartExtensionData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveBenchmarkFilterSelectionData(string benchmarkCode, string benchmarkName, string filterType, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = benchmarkCode;
                _args[1] = benchmarkName;
                _args[2] = filterType;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveBenchmarkFilterSelectionData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.DataContracts.BenchmarkFilterSelectionData> EndRetrieveBenchmarkFilterSelectionData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.DataContracts.BenchmarkFilterSelectionData> _result = ((System.Collections.Generic.List<GreenField.DataContracts.BenchmarkFilterSelectionData>)(base.EndInvoke("RetrieveBenchmarkFilterSelectionData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveMarketSnapshotSelectionData(string userName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = userName;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveMarketSnapshotSelectionData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotSelectionData> EndRetrieveMarketSnapshotSelectionData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotSelectionData> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotSelectionData>)(base.EndInvoke("RetrieveMarketSnapshotSelectionData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveMarketSnapshotPreference(int snapshotPreferenceId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = snapshotPreferenceId;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveMarketSnapshotPreference", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> EndRetrieveMarketSnapshotPreference(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference>)(base.EndInvoke("RetrieveMarketSnapshotPreference", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveMarketSnapshotPerformanceData(System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> marketSnapshotPreference, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = marketSnapshotPreference;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveMarketSnapshotPerformanceData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPerformanceData> EndRetrieveMarketSnapshotPerformanceData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPerformanceData> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPerformanceData>)(base.EndInvoke("RetrieveMarketSnapshotPerformanceData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSaveMarketSnapshotPreference(string updateXML, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = updateXML;
                System.IAsyncResult _result = base.BeginInvoke("SaveMarketSnapshotPreference", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> EndSaveMarketSnapshotPreference(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.PerformanceDefinitions.MarketSnapshotPreference>)(base.EndInvoke("SaveMarketSnapshotPreference", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSaveAsMarketSnapshotPreference(string updateXML, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = updateXML;
                System.IAsyncResult _result = base.BeginInvoke("SaveAsMarketSnapshotPreference", _args, callback, asyncState);
                return _result;
            }
            
            public GreenField.ServiceCaller.PerformanceDefinitions.PopulatedMarketSnapshotPerformanceData EndSaveAsMarketSnapshotPreference(System.IAsyncResult result) {
                object[] _args = new object[0];
                GreenField.ServiceCaller.PerformanceDefinitions.PopulatedMarketSnapshotPerformanceData _result = ((GreenField.ServiceCaller.PerformanceDefinitions.PopulatedMarketSnapshotPerformanceData)(base.EndInvoke("SaveAsMarketSnapshotPreference", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRemoveMarketSnapshotPreference(string userName, string snapshotName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = userName;
                _args[1] = snapshotName;
                System.IAsyncResult _result = base.BeginInvoke("RemoveMarketSnapshotPreference", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndRemoveMarketSnapshotPreference(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("RemoveMarketSnapshotPreference", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveRelativePerformanceSectorData(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = portfolioSelectionData;
                _args[1] = effectiveDate;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveRelativePerformanceSectorData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceSectorData> EndRetrieveRelativePerformanceSectorData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceSectorData> _result = ((System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceSectorData>)(base.EndInvoke("RetrieveRelativePerformanceSectorData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveRelativePerformanceData(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string period, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = portfolioSelectionData;
                _args[1] = effectiveDate;
                _args[2] = period;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveRelativePerformanceData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceData> EndRetrieveRelativePerformanceData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceData> _result = ((System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceData>)(base.EndInvoke("RetrieveRelativePerformanceData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveRelativePerformanceCountryActivePositionData(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string period, string countryID, string sectorID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = portfolioSelectionData;
                _args[1] = effectiveDate;
                _args[2] = period;
                _args[3] = countryID;
                _args[4] = sectorID;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveRelativePerformanceCountryActivePositionData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceActivePositionData> EndRetrieveRelativePerformanceCountryActivePositionData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceActivePositionData> _result = ((System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceActivePositionData>)(base.EndInvoke("RetrieveRelativePerformanceCountryActivePositionData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveRelativePerformanceSectorActivePositionData(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string period, string countryID, string sectorID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = portfolioSelectionData;
                _args[1] = effectiveDate;
                _args[2] = period;
                _args[3] = countryID;
                _args[4] = sectorID;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveRelativePerformanceSectorActivePositionData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceActivePositionData> EndRetrieveRelativePerformanceSectorActivePositionData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceActivePositionData> _result = ((System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceActivePositionData>)(base.EndInvoke("RetrieveRelativePerformanceSectorActivePositionData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveRelativePerformanceSecurityActivePositionData(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string period, string countryID, string sectorID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = portfolioSelectionData;
                _args[1] = effectiveDate;
                _args[2] = period;
                _args[3] = countryID;
                _args[4] = sectorID;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveRelativePerformanceSecurityActivePositionData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceActivePositionData> EndRetrieveRelativePerformanceSecurityActivePositionData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceActivePositionData> _result = ((System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceActivePositionData>)(base.EndInvoke("RetrieveRelativePerformanceSecurityActivePositionData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveRelativePerformanceSecurityData(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string period, string countryID, string sectorID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = portfolioSelectionData;
                _args[1] = effectiveDate;
                _args[2] = period;
                _args[3] = countryID;
                _args[4] = sectorID;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveRelativePerformanceSecurityData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceSecurityData> EndRetrieveRelativePerformanceSecurityData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceSecurityData> _result = ((System.Collections.Generic.List<GreenField.DataContracts.RelativePerformanceSecurityData>)(base.EndInvoke("RetrieveRelativePerformanceSecurityData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveMarketCapitalizationData(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string filterType, string filterValue, bool isExCashSecurity, bool lookThruEnabled, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[6];
                _args[0] = portfolioSelectionData;
                _args[1] = effectiveDate;
                _args[2] = filterType;
                _args[3] = filterValue;
                _args[4] = isExCashSecurity;
                _args[5] = lookThruEnabled;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveMarketCapitalizationData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.DataContracts.MarketCapitalizationData> EndRetrieveMarketCapitalizationData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.DataContracts.MarketCapitalizationData> _result = ((System.Collections.Generic.List<GreenField.DataContracts.MarketCapitalizationData>)(base.EndInvoke("RetrieveMarketCapitalizationData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrievePerformanceGridData(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string country, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = portfolioSelectionData;
                _args[1] = effectiveDate;
                _args[2] = country;
                System.IAsyncResult _result = base.BeginInvoke("RetrievePerformanceGridData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.DataContracts.PerformanceGridData> EndRetrievePerformanceGridData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.DataContracts.PerformanceGridData> _result = ((System.Collections.Generic.List<GreenField.DataContracts.PerformanceGridData>)(base.EndInvoke("RetrievePerformanceGridData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrievePerformanceGraphData(GreenField.DataContracts.PortfolioSelectionData fundSelectionData, System.DateTime effectiveDate, string period, string country, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = fundSelectionData;
                _args[1] = effectiveDate;
                _args[2] = period;
                _args[3] = country;
                System.IAsyncResult _result = base.BeginInvoke("RetrievePerformanceGraphData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.DataContracts.PerformanceGraphData> EndRetrievePerformanceGraphData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.DataContracts.PerformanceGraphData> _result = ((System.Collections.Generic.List<GreenField.DataContracts.PerformanceGraphData>)(base.EndInvoke("RetrievePerformanceGraphData", _args, result)));
                return _result;
            }
        }
    }
}
