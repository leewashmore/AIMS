//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace GreenField.ServiceCaller.BenchmarkHoldingsDefinitions {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
    public partial class ServiceFault : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DescriptionField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations")]
    public interface BenchmarkHoldingsOperations {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsOperations/Temp", ReplyAction="http://tempuri.org/BenchmarkHoldingsOperations/TempResponse")]
        System.IAsyncResult BeginTemp(GreenField.DataContracts.PeriodSelectionData data, System.AsyncCallback callback, object asyncState);
        
        void EndTemp(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsOperations/RetrievePortfolioSelectionData", ReplyAction="http://tempuri.org/BenchmarkHoldingsOperations/RetrievePortfolioSelectionDataResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.ServiceFault), Action="http://tempuri.org/BenchmarkHoldingsOperations/RetrievePortfolioSelectionDataServ" +
            "iceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrievePortfolioSelectionData(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.DataContracts.PortfolioSelectionData> EndRetrievePortfolioSelectionData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsOperations/RetrieveBenchmarkSelectionData", ReplyAction="http://tempuri.org/BenchmarkHoldingsOperations/RetrieveBenchmarkSelectionDataResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.ServiceFault), Action="http://tempuri.org/BenchmarkHoldingsOperations/RetrieveBenchmarkSelectionDataServ" +
            "iceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrieveBenchmarkSelectionData(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.DataContracts.BenchmarkSelectionData> EndRetrieveBenchmarkSelectionData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsOperations/RetrieveSectorBreakdownData", ReplyAction="http://tempuri.org/BenchmarkHoldingsOperations/RetrieveSectorBreakdownDataRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.ServiceFault), Action="http://tempuri.org/BenchmarkHoldingsOperations/RetrieveSectorBreakdownDataService" +
            "FaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrieveSectorBreakdownData(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, bool isExCashSecurity, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.DataContracts.SectorBreakdownData> EndRetrieveSectorBreakdownData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsOperations/RetrieveRegionBreakdownData", ReplyAction="http://tempuri.org/BenchmarkHoldingsOperations/RetrieveRegionBreakdownDataRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.ServiceFault), Action="http://tempuri.org/BenchmarkHoldingsOperations/RetrieveRegionBreakdownDataService" +
            "FaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrieveRegionBreakdownData(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, bool isExCashSecurity, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.DataContracts.RegionBreakdownData> EndRetrieveRegionBreakdownData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsOperations/RetrieveTopHoldingsData", ReplyAction="http://tempuri.org/BenchmarkHoldingsOperations/RetrieveTopHoldingsDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.ServiceFault), Action="http://tempuri.org/BenchmarkHoldingsOperations/RetrieveTopHoldingsDataServiceFaul" +
            "tFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrieveTopHoldingsData(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, bool isExCashSecurity, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.DataContracts.TopHoldingsData> EndRetrieveTopHoldingsData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsOperations/RetrieveIndexConstituentsData", ReplyAction="http://tempuri.org/BenchmarkHoldingsOperations/RetrieveIndexConstituentsDataRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.ServiceFault), Action="http://tempuri.org/BenchmarkHoldingsOperations/RetrieveIndexConstituentsDataServi" +
            "ceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrieveIndexConstituentsData(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.DataContracts.IndexConstituentsData> EndRetrieveIndexConstituentsData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsOperations/RetrieveFilterSelectionData", ReplyAction="http://tempuri.org/BenchmarkHoldingsOperations/RetrieveFilterSelectionDataRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.ServiceFault), Action="http://tempuri.org/BenchmarkHoldingsOperations/RetrieveFilterSelectionDataService" +
            "FaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrieveFilterSelectionData(System.Nullable<System.DateTime> effectiveDate, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.DataContracts.FilterSelectionData> EndRetrieveFilterSelectionData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsOperations/RetrievePortfolioDetailsData", ReplyAction="http://tempuri.org/BenchmarkHoldingsOperations/RetrievePortfolioDetailsDataRespon" +
            "se")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.ServiceFault), Action="http://tempuri.org/BenchmarkHoldingsOperations/RetrievePortfolioDetailsDataServic" +
            "eFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrievePortfolioDetailsData(GreenField.DataContracts.PortfolioSelectionData objPortfolioIdentifier, System.DateTime effectiveDate, bool excludeCash, bool objGetBenchmark, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.DataContracts.PortfolioDetailsData> EndRetrievePortfolioDetailsData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsOperations/RetrieveAssetAllocationData", ReplyAction="http://tempuri.org/BenchmarkHoldingsOperations/RetrieveAssetAllocationDataRespons" +
            "e")]
        System.IAsyncResult BeginRetrieveAssetAllocationData(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.DataContracts.AssetAllocationData> EndRetrieveAssetAllocationData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsOperations/RetrieveHoldingsPercentageData", ReplyAction="http://tempuri.org/BenchmarkHoldingsOperations/RetrieveHoldingsPercentageDataResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.ServiceFault), Action="http://tempuri.org/BenchmarkHoldingsOperations/RetrieveHoldingsPercentageDataServ" +
            "iceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrieveHoldingsPercentageData(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string filterType, string filterValue, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.DataContracts.HoldingsPercentageData> EndRetrieveHoldingsPercentageData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsOperations/RetrieveHoldingsPercentageDataForR" +
            "egion", ReplyAction="http://tempuri.org/BenchmarkHoldingsOperations/RetrieveHoldingsPercentageDataForR" +
            "egionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.ServiceFault), Action="http://tempuri.org/BenchmarkHoldingsOperations/RetrieveHoldingsPercentageDataForR" +
            "egionServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrieveHoldingsPercentageDataForRegion(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string filterType, string filterValue, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.DataContracts.HoldingsPercentageData> EndRetrieveHoldingsPercentageDataForRegion(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsOperations/RetrieveTopBenchmarkSecuritiesData" +
            "", ReplyAction="http://tempuri.org/BenchmarkHoldingsOperations/RetrieveTopBenchmarkSecuritiesData" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.ServiceFault), Action="http://tempuri.org/BenchmarkHoldingsOperations/RetrieveTopBenchmarkSecuritiesData" +
            "ServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrieveTopBenchmarkSecuritiesData(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.DataContracts.TopBenchmarkSecuritiesData> EndRetrieveTopBenchmarkSecuritiesData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsOperations/RetrieveHeatMapData", ReplyAction="http://tempuri.org/BenchmarkHoldingsOperations/RetrieveHeatMapDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.ServiceFault), Action="http://tempuri.org/BenchmarkHoldingsOperations/RetrieveHeatMapDataServiceFaultFau" +
            "lt", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrieveHeatMapData(GreenField.DataContracts.PortfolioSelectionData fundSelectionData, System.DateTime effectiveDate, string period, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.DataContracts.HeatMapData> EndRetrieveHeatMapData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsOperations/RetrieveAttributionData", ReplyAction="http://tempuri.org/BenchmarkHoldingsOperations/RetrieveAttributionDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.ServiceFault), Action="http://tempuri.org/BenchmarkHoldingsOperations/RetrieveAttributionDataServiceFaul" +
            "tFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrieveAttributionData(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.DataContracts.AttributionData> EndRetrieveAttributionData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsOperations/RetrievePortfolioRiskReturnData", ReplyAction="http://tempuri.org/BenchmarkHoldingsOperations/RetrievePortfolioRiskReturnDataRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.ServiceFault), Action="http://tempuri.org/BenchmarkHoldingsOperations/RetrievePortfolioRiskReturnDataSer" +
            "viceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrievePortfolioRiskReturnData(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.DataContracts.PortfolioRiskReturnData> EndRetrievePortfolioRiskReturnData(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface BenchmarkHoldingsOperationsChannel : GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrievePortfolioSelectionDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrievePortfolioSelectionDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.DataContracts.PortfolioSelectionData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.DataContracts.PortfolioSelectionData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveBenchmarkSelectionDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveBenchmarkSelectionDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.DataContracts.BenchmarkSelectionData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.DataContracts.BenchmarkSelectionData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveSectorBreakdownDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveSectorBreakdownDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.DataContracts.SectorBreakdownData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.DataContracts.SectorBreakdownData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveRegionBreakdownDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveRegionBreakdownDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.DataContracts.RegionBreakdownData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.DataContracts.RegionBreakdownData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveTopHoldingsDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveTopHoldingsDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.DataContracts.TopHoldingsData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.DataContracts.TopHoldingsData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveIndexConstituentsDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveIndexConstituentsDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.DataContracts.IndexConstituentsData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.DataContracts.IndexConstituentsData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveFilterSelectionDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveFilterSelectionDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.DataContracts.FilterSelectionData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.DataContracts.FilterSelectionData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrievePortfolioDetailsDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrievePortfolioDetailsDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.DataContracts.PortfolioDetailsData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.DataContracts.PortfolioDetailsData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveAssetAllocationDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveAssetAllocationDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.DataContracts.AssetAllocationData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.DataContracts.AssetAllocationData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveHoldingsPercentageDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveHoldingsPercentageDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.DataContracts.HoldingsPercentageData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.DataContracts.HoldingsPercentageData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveHoldingsPercentageDataForRegionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveHoldingsPercentageDataForRegionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.DataContracts.HoldingsPercentageData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.DataContracts.HoldingsPercentageData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveTopBenchmarkSecuritiesDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveTopBenchmarkSecuritiesDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.DataContracts.TopBenchmarkSecuritiesData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.DataContracts.TopBenchmarkSecuritiesData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveHeatMapDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveHeatMapDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.DataContracts.HeatMapData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.DataContracts.HeatMapData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveAttributionDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveAttributionDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.DataContracts.AttributionData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.DataContracts.AttributionData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrievePortfolioRiskReturnDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrievePortfolioRiskReturnDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.DataContracts.PortfolioRiskReturnData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.DataContracts.PortfolioRiskReturnData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BenchmarkHoldingsOperationsClient : System.ServiceModel.ClientBase<GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations>, GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations {
        
        private BeginOperationDelegate onBeginTempDelegate;
        
        private EndOperationDelegate onEndTempDelegate;
        
        private System.Threading.SendOrPostCallback onTempCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrievePortfolioSelectionDataDelegate;
        
        private EndOperationDelegate onEndRetrievePortfolioSelectionDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrievePortfolioSelectionDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveBenchmarkSelectionDataDelegate;
        
        private EndOperationDelegate onEndRetrieveBenchmarkSelectionDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveBenchmarkSelectionDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveSectorBreakdownDataDelegate;
        
        private EndOperationDelegate onEndRetrieveSectorBreakdownDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveSectorBreakdownDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveRegionBreakdownDataDelegate;
        
        private EndOperationDelegate onEndRetrieveRegionBreakdownDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveRegionBreakdownDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveTopHoldingsDataDelegate;
        
        private EndOperationDelegate onEndRetrieveTopHoldingsDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveTopHoldingsDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveIndexConstituentsDataDelegate;
        
        private EndOperationDelegate onEndRetrieveIndexConstituentsDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveIndexConstituentsDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveFilterSelectionDataDelegate;
        
        private EndOperationDelegate onEndRetrieveFilterSelectionDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveFilterSelectionDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrievePortfolioDetailsDataDelegate;
        
        private EndOperationDelegate onEndRetrievePortfolioDetailsDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrievePortfolioDetailsDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveAssetAllocationDataDelegate;
        
        private EndOperationDelegate onEndRetrieveAssetAllocationDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveAssetAllocationDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveHoldingsPercentageDataDelegate;
        
        private EndOperationDelegate onEndRetrieveHoldingsPercentageDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveHoldingsPercentageDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveHoldingsPercentageDataForRegionDelegate;
        
        private EndOperationDelegate onEndRetrieveHoldingsPercentageDataForRegionDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveHoldingsPercentageDataForRegionCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveTopBenchmarkSecuritiesDataDelegate;
        
        private EndOperationDelegate onEndRetrieveTopBenchmarkSecuritiesDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveTopBenchmarkSecuritiesDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveHeatMapDataDelegate;
        
        private EndOperationDelegate onEndRetrieveHeatMapDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveHeatMapDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveAttributionDataDelegate;
        
        private EndOperationDelegate onEndRetrieveAttributionDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveAttributionDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrievePortfolioRiskReturnDataDelegate;
        
        private EndOperationDelegate onEndRetrievePortfolioRiskReturnDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrievePortfolioRiskReturnDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public BenchmarkHoldingsOperationsClient() {
        }
        
        public BenchmarkHoldingsOperationsClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BenchmarkHoldingsOperationsClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BenchmarkHoldingsOperationsClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BenchmarkHoldingsOperationsClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> TempCompleted;
        
        public event System.EventHandler<RetrievePortfolioSelectionDataCompletedEventArgs> RetrievePortfolioSelectionDataCompleted;
        
        public event System.EventHandler<RetrieveBenchmarkSelectionDataCompletedEventArgs> RetrieveBenchmarkSelectionDataCompleted;
        
        public event System.EventHandler<RetrieveSectorBreakdownDataCompletedEventArgs> RetrieveSectorBreakdownDataCompleted;
        
        public event System.EventHandler<RetrieveRegionBreakdownDataCompletedEventArgs> RetrieveRegionBreakdownDataCompleted;
        
        public event System.EventHandler<RetrieveTopHoldingsDataCompletedEventArgs> RetrieveTopHoldingsDataCompleted;
        
        public event System.EventHandler<RetrieveIndexConstituentsDataCompletedEventArgs> RetrieveIndexConstituentsDataCompleted;
        
        public event System.EventHandler<RetrieveFilterSelectionDataCompletedEventArgs> RetrieveFilterSelectionDataCompleted;
        
        public event System.EventHandler<RetrievePortfolioDetailsDataCompletedEventArgs> RetrievePortfolioDetailsDataCompleted;
        
        public event System.EventHandler<RetrieveAssetAllocationDataCompletedEventArgs> RetrieveAssetAllocationDataCompleted;
        
        public event System.EventHandler<RetrieveHoldingsPercentageDataCompletedEventArgs> RetrieveHoldingsPercentageDataCompleted;
        
        public event System.EventHandler<RetrieveHoldingsPercentageDataForRegionCompletedEventArgs> RetrieveHoldingsPercentageDataForRegionCompleted;
        
        public event System.EventHandler<RetrieveTopBenchmarkSecuritiesDataCompletedEventArgs> RetrieveTopBenchmarkSecuritiesDataCompleted;
        
        public event System.EventHandler<RetrieveHeatMapDataCompletedEventArgs> RetrieveHeatMapDataCompleted;
        
        public event System.EventHandler<RetrieveAttributionDataCompletedEventArgs> RetrieveAttributionDataCompleted;
        
        public event System.EventHandler<RetrievePortfolioRiskReturnDataCompletedEventArgs> RetrievePortfolioRiskReturnDataCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations.BeginTemp(GreenField.DataContracts.PeriodSelectionData data, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTemp(data, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations.EndTemp(System.IAsyncResult result) {
            base.Channel.EndTemp(result);
        }
        
        private System.IAsyncResult OnBeginTemp(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.DataContracts.PeriodSelectionData data = ((GreenField.DataContracts.PeriodSelectionData)(inValues[0]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations)(this)).BeginTemp(data, callback, asyncState);
        }
        
        private object[] OnEndTemp(System.IAsyncResult result) {
            ((GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations)(this)).EndTemp(result);
            return null;
        }
        
        private void OnTempCompleted(object state) {
            if ((this.TempCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TempCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TempAsync(GreenField.DataContracts.PeriodSelectionData data) {
            this.TempAsync(data, null);
        }
        
        public void TempAsync(GreenField.DataContracts.PeriodSelectionData data, object userState) {
            if ((this.onBeginTempDelegate == null)) {
                this.onBeginTempDelegate = new BeginOperationDelegate(this.OnBeginTemp);
            }
            if ((this.onEndTempDelegate == null)) {
                this.onEndTempDelegate = new EndOperationDelegate(this.OnEndTemp);
            }
            if ((this.onTempCompletedDelegate == null)) {
                this.onTempCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTempCompleted);
            }
            base.InvokeAsync(this.onBeginTempDelegate, new object[] {
                        data}, this.onEndTempDelegate, this.onTempCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations.BeginRetrievePortfolioSelectionData(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrievePortfolioSelectionData(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.DataContracts.PortfolioSelectionData> GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations.EndRetrievePortfolioSelectionData(System.IAsyncResult result) {
            return base.Channel.EndRetrievePortfolioSelectionData(result);
        }
        
        private System.IAsyncResult OnBeginRetrievePortfolioSelectionData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations)(this)).BeginRetrievePortfolioSelectionData(callback, asyncState);
        }
        
        private object[] OnEndRetrievePortfolioSelectionData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.DataContracts.PortfolioSelectionData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations)(this)).EndRetrievePortfolioSelectionData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrievePortfolioSelectionDataCompleted(object state) {
            if ((this.RetrievePortfolioSelectionDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrievePortfolioSelectionDataCompleted(this, new RetrievePortfolioSelectionDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrievePortfolioSelectionDataAsync() {
            this.RetrievePortfolioSelectionDataAsync(null);
        }
        
        public void RetrievePortfolioSelectionDataAsync(object userState) {
            if ((this.onBeginRetrievePortfolioSelectionDataDelegate == null)) {
                this.onBeginRetrievePortfolioSelectionDataDelegate = new BeginOperationDelegate(this.OnBeginRetrievePortfolioSelectionData);
            }
            if ((this.onEndRetrievePortfolioSelectionDataDelegate == null)) {
                this.onEndRetrievePortfolioSelectionDataDelegate = new EndOperationDelegate(this.OnEndRetrievePortfolioSelectionData);
            }
            if ((this.onRetrievePortfolioSelectionDataCompletedDelegate == null)) {
                this.onRetrievePortfolioSelectionDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrievePortfolioSelectionDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrievePortfolioSelectionDataDelegate, null, this.onEndRetrievePortfolioSelectionDataDelegate, this.onRetrievePortfolioSelectionDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations.BeginRetrieveBenchmarkSelectionData(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveBenchmarkSelectionData(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.DataContracts.BenchmarkSelectionData> GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations.EndRetrieveBenchmarkSelectionData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveBenchmarkSelectionData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveBenchmarkSelectionData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations)(this)).BeginRetrieveBenchmarkSelectionData(callback, asyncState);
        }
        
        private object[] OnEndRetrieveBenchmarkSelectionData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.DataContracts.BenchmarkSelectionData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations)(this)).EndRetrieveBenchmarkSelectionData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveBenchmarkSelectionDataCompleted(object state) {
            if ((this.RetrieveBenchmarkSelectionDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveBenchmarkSelectionDataCompleted(this, new RetrieveBenchmarkSelectionDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveBenchmarkSelectionDataAsync() {
            this.RetrieveBenchmarkSelectionDataAsync(null);
        }
        
        public void RetrieveBenchmarkSelectionDataAsync(object userState) {
            if ((this.onBeginRetrieveBenchmarkSelectionDataDelegate == null)) {
                this.onBeginRetrieveBenchmarkSelectionDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveBenchmarkSelectionData);
            }
            if ((this.onEndRetrieveBenchmarkSelectionDataDelegate == null)) {
                this.onEndRetrieveBenchmarkSelectionDataDelegate = new EndOperationDelegate(this.OnEndRetrieveBenchmarkSelectionData);
            }
            if ((this.onRetrieveBenchmarkSelectionDataCompletedDelegate == null)) {
                this.onRetrieveBenchmarkSelectionDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveBenchmarkSelectionDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveBenchmarkSelectionDataDelegate, null, this.onEndRetrieveBenchmarkSelectionDataDelegate, this.onRetrieveBenchmarkSelectionDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations.BeginRetrieveSectorBreakdownData(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, bool isExCashSecurity, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveSectorBreakdownData(portfolioSelectionData, effectiveDate, isExCashSecurity, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.DataContracts.SectorBreakdownData> GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations.EndRetrieveSectorBreakdownData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveSectorBreakdownData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveSectorBreakdownData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData = ((GreenField.DataContracts.PortfolioSelectionData)(inValues[0]));
            System.DateTime effectiveDate = ((System.DateTime)(inValues[1]));
            bool isExCashSecurity = ((bool)(inValues[2]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations)(this)).BeginRetrieveSectorBreakdownData(portfolioSelectionData, effectiveDate, isExCashSecurity, callback, asyncState);
        }
        
        private object[] OnEndRetrieveSectorBreakdownData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.DataContracts.SectorBreakdownData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations)(this)).EndRetrieveSectorBreakdownData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveSectorBreakdownDataCompleted(object state) {
            if ((this.RetrieveSectorBreakdownDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveSectorBreakdownDataCompleted(this, new RetrieveSectorBreakdownDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveSectorBreakdownDataAsync(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, bool isExCashSecurity) {
            this.RetrieveSectorBreakdownDataAsync(portfolioSelectionData, effectiveDate, isExCashSecurity, null);
        }
        
        public void RetrieveSectorBreakdownDataAsync(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, bool isExCashSecurity, object userState) {
            if ((this.onBeginRetrieveSectorBreakdownDataDelegate == null)) {
                this.onBeginRetrieveSectorBreakdownDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveSectorBreakdownData);
            }
            if ((this.onEndRetrieveSectorBreakdownDataDelegate == null)) {
                this.onEndRetrieveSectorBreakdownDataDelegate = new EndOperationDelegate(this.OnEndRetrieveSectorBreakdownData);
            }
            if ((this.onRetrieveSectorBreakdownDataCompletedDelegate == null)) {
                this.onRetrieveSectorBreakdownDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveSectorBreakdownDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveSectorBreakdownDataDelegate, new object[] {
                        portfolioSelectionData,
                        effectiveDate,
                        isExCashSecurity}, this.onEndRetrieveSectorBreakdownDataDelegate, this.onRetrieveSectorBreakdownDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations.BeginRetrieveRegionBreakdownData(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, bool isExCashSecurity, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveRegionBreakdownData(portfolioSelectionData, effectiveDate, isExCashSecurity, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.DataContracts.RegionBreakdownData> GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations.EndRetrieveRegionBreakdownData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveRegionBreakdownData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveRegionBreakdownData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData = ((GreenField.DataContracts.PortfolioSelectionData)(inValues[0]));
            System.DateTime effectiveDate = ((System.DateTime)(inValues[1]));
            bool isExCashSecurity = ((bool)(inValues[2]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations)(this)).BeginRetrieveRegionBreakdownData(portfolioSelectionData, effectiveDate, isExCashSecurity, callback, asyncState);
        }
        
        private object[] OnEndRetrieveRegionBreakdownData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.DataContracts.RegionBreakdownData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations)(this)).EndRetrieveRegionBreakdownData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveRegionBreakdownDataCompleted(object state) {
            if ((this.RetrieveRegionBreakdownDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveRegionBreakdownDataCompleted(this, new RetrieveRegionBreakdownDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveRegionBreakdownDataAsync(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, bool isExCashSecurity) {
            this.RetrieveRegionBreakdownDataAsync(portfolioSelectionData, effectiveDate, isExCashSecurity, null);
        }
        
        public void RetrieveRegionBreakdownDataAsync(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, bool isExCashSecurity, object userState) {
            if ((this.onBeginRetrieveRegionBreakdownDataDelegate == null)) {
                this.onBeginRetrieveRegionBreakdownDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveRegionBreakdownData);
            }
            if ((this.onEndRetrieveRegionBreakdownDataDelegate == null)) {
                this.onEndRetrieveRegionBreakdownDataDelegate = new EndOperationDelegate(this.OnEndRetrieveRegionBreakdownData);
            }
            if ((this.onRetrieveRegionBreakdownDataCompletedDelegate == null)) {
                this.onRetrieveRegionBreakdownDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveRegionBreakdownDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveRegionBreakdownDataDelegate, new object[] {
                        portfolioSelectionData,
                        effectiveDate,
                        isExCashSecurity}, this.onEndRetrieveRegionBreakdownDataDelegate, this.onRetrieveRegionBreakdownDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations.BeginRetrieveTopHoldingsData(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, bool isExCashSecurity, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveTopHoldingsData(portfolioSelectionData, effectiveDate, isExCashSecurity, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.DataContracts.TopHoldingsData> GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations.EndRetrieveTopHoldingsData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveTopHoldingsData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveTopHoldingsData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData = ((GreenField.DataContracts.PortfolioSelectionData)(inValues[0]));
            System.DateTime effectiveDate = ((System.DateTime)(inValues[1]));
            bool isExCashSecurity = ((bool)(inValues[2]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations)(this)).BeginRetrieveTopHoldingsData(portfolioSelectionData, effectiveDate, isExCashSecurity, callback, asyncState);
        }
        
        private object[] OnEndRetrieveTopHoldingsData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.DataContracts.TopHoldingsData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations)(this)).EndRetrieveTopHoldingsData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveTopHoldingsDataCompleted(object state) {
            if ((this.RetrieveTopHoldingsDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveTopHoldingsDataCompleted(this, new RetrieveTopHoldingsDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveTopHoldingsDataAsync(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, bool isExCashSecurity) {
            this.RetrieveTopHoldingsDataAsync(portfolioSelectionData, effectiveDate, isExCashSecurity, null);
        }
        
        public void RetrieveTopHoldingsDataAsync(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, bool isExCashSecurity, object userState) {
            if ((this.onBeginRetrieveTopHoldingsDataDelegate == null)) {
                this.onBeginRetrieveTopHoldingsDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveTopHoldingsData);
            }
            if ((this.onEndRetrieveTopHoldingsDataDelegate == null)) {
                this.onEndRetrieveTopHoldingsDataDelegate = new EndOperationDelegate(this.OnEndRetrieveTopHoldingsData);
            }
            if ((this.onRetrieveTopHoldingsDataCompletedDelegate == null)) {
                this.onRetrieveTopHoldingsDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveTopHoldingsDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveTopHoldingsDataDelegate, new object[] {
                        portfolioSelectionData,
                        effectiveDate,
                        isExCashSecurity}, this.onEndRetrieveTopHoldingsDataDelegate, this.onRetrieveTopHoldingsDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations.BeginRetrieveIndexConstituentsData(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveIndexConstituentsData(portfolioSelectionData, effectiveDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.DataContracts.IndexConstituentsData> GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations.EndRetrieveIndexConstituentsData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveIndexConstituentsData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveIndexConstituentsData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData = ((GreenField.DataContracts.PortfolioSelectionData)(inValues[0]));
            System.DateTime effectiveDate = ((System.DateTime)(inValues[1]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations)(this)).BeginRetrieveIndexConstituentsData(portfolioSelectionData, effectiveDate, callback, asyncState);
        }
        
        private object[] OnEndRetrieveIndexConstituentsData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.DataContracts.IndexConstituentsData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations)(this)).EndRetrieveIndexConstituentsData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveIndexConstituentsDataCompleted(object state) {
            if ((this.RetrieveIndexConstituentsDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveIndexConstituentsDataCompleted(this, new RetrieveIndexConstituentsDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveIndexConstituentsDataAsync(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate) {
            this.RetrieveIndexConstituentsDataAsync(portfolioSelectionData, effectiveDate, null);
        }
        
        public void RetrieveIndexConstituentsDataAsync(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, object userState) {
            if ((this.onBeginRetrieveIndexConstituentsDataDelegate == null)) {
                this.onBeginRetrieveIndexConstituentsDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveIndexConstituentsData);
            }
            if ((this.onEndRetrieveIndexConstituentsDataDelegate == null)) {
                this.onEndRetrieveIndexConstituentsDataDelegate = new EndOperationDelegate(this.OnEndRetrieveIndexConstituentsData);
            }
            if ((this.onRetrieveIndexConstituentsDataCompletedDelegate == null)) {
                this.onRetrieveIndexConstituentsDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveIndexConstituentsDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveIndexConstituentsDataDelegate, new object[] {
                        portfolioSelectionData,
                        effectiveDate}, this.onEndRetrieveIndexConstituentsDataDelegate, this.onRetrieveIndexConstituentsDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations.BeginRetrieveFilterSelectionData(System.Nullable<System.DateTime> effectiveDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveFilterSelectionData(effectiveDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.DataContracts.FilterSelectionData> GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations.EndRetrieveFilterSelectionData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveFilterSelectionData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveFilterSelectionData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Nullable<System.DateTime> effectiveDate = ((System.Nullable<System.DateTime>)(inValues[0]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations)(this)).BeginRetrieveFilterSelectionData(effectiveDate, callback, asyncState);
        }
        
        private object[] OnEndRetrieveFilterSelectionData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.DataContracts.FilterSelectionData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations)(this)).EndRetrieveFilterSelectionData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveFilterSelectionDataCompleted(object state) {
            if ((this.RetrieveFilterSelectionDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveFilterSelectionDataCompleted(this, new RetrieveFilterSelectionDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveFilterSelectionDataAsync(System.Nullable<System.DateTime> effectiveDate) {
            this.RetrieveFilterSelectionDataAsync(effectiveDate, null);
        }
        
        public void RetrieveFilterSelectionDataAsync(System.Nullable<System.DateTime> effectiveDate, object userState) {
            if ((this.onBeginRetrieveFilterSelectionDataDelegate == null)) {
                this.onBeginRetrieveFilterSelectionDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveFilterSelectionData);
            }
            if ((this.onEndRetrieveFilterSelectionDataDelegate == null)) {
                this.onEndRetrieveFilterSelectionDataDelegate = new EndOperationDelegate(this.OnEndRetrieveFilterSelectionData);
            }
            if ((this.onRetrieveFilterSelectionDataCompletedDelegate == null)) {
                this.onRetrieveFilterSelectionDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveFilterSelectionDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveFilterSelectionDataDelegate, new object[] {
                        effectiveDate}, this.onEndRetrieveFilterSelectionDataDelegate, this.onRetrieveFilterSelectionDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations.BeginRetrievePortfolioDetailsData(GreenField.DataContracts.PortfolioSelectionData objPortfolioIdentifier, System.DateTime effectiveDate, bool excludeCash, bool objGetBenchmark, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrievePortfolioDetailsData(objPortfolioIdentifier, effectiveDate, excludeCash, objGetBenchmark, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.DataContracts.PortfolioDetailsData> GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations.EndRetrievePortfolioDetailsData(System.IAsyncResult result) {
            return base.Channel.EndRetrievePortfolioDetailsData(result);
        }
        
        private System.IAsyncResult OnBeginRetrievePortfolioDetailsData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.DataContracts.PortfolioSelectionData objPortfolioIdentifier = ((GreenField.DataContracts.PortfolioSelectionData)(inValues[0]));
            System.DateTime effectiveDate = ((System.DateTime)(inValues[1]));
            bool excludeCash = ((bool)(inValues[2]));
            bool objGetBenchmark = ((bool)(inValues[3]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations)(this)).BeginRetrievePortfolioDetailsData(objPortfolioIdentifier, effectiveDate, excludeCash, objGetBenchmark, callback, asyncState);
        }
        
        private object[] OnEndRetrievePortfolioDetailsData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.DataContracts.PortfolioDetailsData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations)(this)).EndRetrievePortfolioDetailsData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrievePortfolioDetailsDataCompleted(object state) {
            if ((this.RetrievePortfolioDetailsDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrievePortfolioDetailsDataCompleted(this, new RetrievePortfolioDetailsDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrievePortfolioDetailsDataAsync(GreenField.DataContracts.PortfolioSelectionData objPortfolioIdentifier, System.DateTime effectiveDate, bool excludeCash, bool objGetBenchmark) {
            this.RetrievePortfolioDetailsDataAsync(objPortfolioIdentifier, effectiveDate, excludeCash, objGetBenchmark, null);
        }
        
        public void RetrievePortfolioDetailsDataAsync(GreenField.DataContracts.PortfolioSelectionData objPortfolioIdentifier, System.DateTime effectiveDate, bool excludeCash, bool objGetBenchmark, object userState) {
            if ((this.onBeginRetrievePortfolioDetailsDataDelegate == null)) {
                this.onBeginRetrievePortfolioDetailsDataDelegate = new BeginOperationDelegate(this.OnBeginRetrievePortfolioDetailsData);
            }
            if ((this.onEndRetrievePortfolioDetailsDataDelegate == null)) {
                this.onEndRetrievePortfolioDetailsDataDelegate = new EndOperationDelegate(this.OnEndRetrievePortfolioDetailsData);
            }
            if ((this.onRetrievePortfolioDetailsDataCompletedDelegate == null)) {
                this.onRetrievePortfolioDetailsDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrievePortfolioDetailsDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrievePortfolioDetailsDataDelegate, new object[] {
                        objPortfolioIdentifier,
                        effectiveDate,
                        excludeCash,
                        objGetBenchmark}, this.onEndRetrievePortfolioDetailsDataDelegate, this.onRetrievePortfolioDetailsDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations.BeginRetrieveAssetAllocationData(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveAssetAllocationData(portfolioSelectionData, effectiveDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.DataContracts.AssetAllocationData> GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations.EndRetrieveAssetAllocationData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveAssetAllocationData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveAssetAllocationData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData = ((GreenField.DataContracts.PortfolioSelectionData)(inValues[0]));
            System.DateTime effectiveDate = ((System.DateTime)(inValues[1]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations)(this)).BeginRetrieveAssetAllocationData(portfolioSelectionData, effectiveDate, callback, asyncState);
        }
        
        private object[] OnEndRetrieveAssetAllocationData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.DataContracts.AssetAllocationData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations)(this)).EndRetrieveAssetAllocationData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveAssetAllocationDataCompleted(object state) {
            if ((this.RetrieveAssetAllocationDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveAssetAllocationDataCompleted(this, new RetrieveAssetAllocationDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveAssetAllocationDataAsync(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate) {
            this.RetrieveAssetAllocationDataAsync(portfolioSelectionData, effectiveDate, null);
        }
        
        public void RetrieveAssetAllocationDataAsync(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, object userState) {
            if ((this.onBeginRetrieveAssetAllocationDataDelegate == null)) {
                this.onBeginRetrieveAssetAllocationDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveAssetAllocationData);
            }
            if ((this.onEndRetrieveAssetAllocationDataDelegate == null)) {
                this.onEndRetrieveAssetAllocationDataDelegate = new EndOperationDelegate(this.OnEndRetrieveAssetAllocationData);
            }
            if ((this.onRetrieveAssetAllocationDataCompletedDelegate == null)) {
                this.onRetrieveAssetAllocationDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveAssetAllocationDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveAssetAllocationDataDelegate, new object[] {
                        portfolioSelectionData,
                        effectiveDate}, this.onEndRetrieveAssetAllocationDataDelegate, this.onRetrieveAssetAllocationDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations.BeginRetrieveHoldingsPercentageData(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string filterType, string filterValue, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveHoldingsPercentageData(portfolioSelectionData, effectiveDate, filterType, filterValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.DataContracts.HoldingsPercentageData> GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations.EndRetrieveHoldingsPercentageData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveHoldingsPercentageData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveHoldingsPercentageData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData = ((GreenField.DataContracts.PortfolioSelectionData)(inValues[0]));
            System.DateTime effectiveDate = ((System.DateTime)(inValues[1]));
            string filterType = ((string)(inValues[2]));
            string filterValue = ((string)(inValues[3]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations)(this)).BeginRetrieveHoldingsPercentageData(portfolioSelectionData, effectiveDate, filterType, filterValue, callback, asyncState);
        }
        
        private object[] OnEndRetrieveHoldingsPercentageData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.DataContracts.HoldingsPercentageData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations)(this)).EndRetrieveHoldingsPercentageData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveHoldingsPercentageDataCompleted(object state) {
            if ((this.RetrieveHoldingsPercentageDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveHoldingsPercentageDataCompleted(this, new RetrieveHoldingsPercentageDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveHoldingsPercentageDataAsync(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string filterType, string filterValue) {
            this.RetrieveHoldingsPercentageDataAsync(portfolioSelectionData, effectiveDate, filterType, filterValue, null);
        }
        
        public void RetrieveHoldingsPercentageDataAsync(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string filterType, string filterValue, object userState) {
            if ((this.onBeginRetrieveHoldingsPercentageDataDelegate == null)) {
                this.onBeginRetrieveHoldingsPercentageDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveHoldingsPercentageData);
            }
            if ((this.onEndRetrieveHoldingsPercentageDataDelegate == null)) {
                this.onEndRetrieveHoldingsPercentageDataDelegate = new EndOperationDelegate(this.OnEndRetrieveHoldingsPercentageData);
            }
            if ((this.onRetrieveHoldingsPercentageDataCompletedDelegate == null)) {
                this.onRetrieveHoldingsPercentageDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveHoldingsPercentageDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveHoldingsPercentageDataDelegate, new object[] {
                        portfolioSelectionData,
                        effectiveDate,
                        filterType,
                        filterValue}, this.onEndRetrieveHoldingsPercentageDataDelegate, this.onRetrieveHoldingsPercentageDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations.BeginRetrieveHoldingsPercentageDataForRegion(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string filterType, string filterValue, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveHoldingsPercentageDataForRegion(portfolioSelectionData, effectiveDate, filterType, filterValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.DataContracts.HoldingsPercentageData> GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations.EndRetrieveHoldingsPercentageDataForRegion(System.IAsyncResult result) {
            return base.Channel.EndRetrieveHoldingsPercentageDataForRegion(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveHoldingsPercentageDataForRegion(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData = ((GreenField.DataContracts.PortfolioSelectionData)(inValues[0]));
            System.DateTime effectiveDate = ((System.DateTime)(inValues[1]));
            string filterType = ((string)(inValues[2]));
            string filterValue = ((string)(inValues[3]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations)(this)).BeginRetrieveHoldingsPercentageDataForRegion(portfolioSelectionData, effectiveDate, filterType, filterValue, callback, asyncState);
        }
        
        private object[] OnEndRetrieveHoldingsPercentageDataForRegion(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.DataContracts.HoldingsPercentageData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations)(this)).EndRetrieveHoldingsPercentageDataForRegion(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveHoldingsPercentageDataForRegionCompleted(object state) {
            if ((this.RetrieveHoldingsPercentageDataForRegionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveHoldingsPercentageDataForRegionCompleted(this, new RetrieveHoldingsPercentageDataForRegionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveHoldingsPercentageDataForRegionAsync(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string filterType, string filterValue) {
            this.RetrieveHoldingsPercentageDataForRegionAsync(portfolioSelectionData, effectiveDate, filterType, filterValue, null);
        }
        
        public void RetrieveHoldingsPercentageDataForRegionAsync(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string filterType, string filterValue, object userState) {
            if ((this.onBeginRetrieveHoldingsPercentageDataForRegionDelegate == null)) {
                this.onBeginRetrieveHoldingsPercentageDataForRegionDelegate = new BeginOperationDelegate(this.OnBeginRetrieveHoldingsPercentageDataForRegion);
            }
            if ((this.onEndRetrieveHoldingsPercentageDataForRegionDelegate == null)) {
                this.onEndRetrieveHoldingsPercentageDataForRegionDelegate = new EndOperationDelegate(this.OnEndRetrieveHoldingsPercentageDataForRegion);
            }
            if ((this.onRetrieveHoldingsPercentageDataForRegionCompletedDelegate == null)) {
                this.onRetrieveHoldingsPercentageDataForRegionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveHoldingsPercentageDataForRegionCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveHoldingsPercentageDataForRegionDelegate, new object[] {
                        portfolioSelectionData,
                        effectiveDate,
                        filterType,
                        filterValue}, this.onEndRetrieveHoldingsPercentageDataForRegionDelegate, this.onRetrieveHoldingsPercentageDataForRegionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations.BeginRetrieveTopBenchmarkSecuritiesData(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveTopBenchmarkSecuritiesData(portfolioSelectionData, effectiveDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.DataContracts.TopBenchmarkSecuritiesData> GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations.EndRetrieveTopBenchmarkSecuritiesData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveTopBenchmarkSecuritiesData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveTopBenchmarkSecuritiesData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData = ((GreenField.DataContracts.PortfolioSelectionData)(inValues[0]));
            System.DateTime effectiveDate = ((System.DateTime)(inValues[1]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations)(this)).BeginRetrieveTopBenchmarkSecuritiesData(portfolioSelectionData, effectiveDate, callback, asyncState);
        }
        
        private object[] OnEndRetrieveTopBenchmarkSecuritiesData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.DataContracts.TopBenchmarkSecuritiesData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations)(this)).EndRetrieveTopBenchmarkSecuritiesData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveTopBenchmarkSecuritiesDataCompleted(object state) {
            if ((this.RetrieveTopBenchmarkSecuritiesDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveTopBenchmarkSecuritiesDataCompleted(this, new RetrieveTopBenchmarkSecuritiesDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveTopBenchmarkSecuritiesDataAsync(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate) {
            this.RetrieveTopBenchmarkSecuritiesDataAsync(portfolioSelectionData, effectiveDate, null);
        }
        
        public void RetrieveTopBenchmarkSecuritiesDataAsync(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, object userState) {
            if ((this.onBeginRetrieveTopBenchmarkSecuritiesDataDelegate == null)) {
                this.onBeginRetrieveTopBenchmarkSecuritiesDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveTopBenchmarkSecuritiesData);
            }
            if ((this.onEndRetrieveTopBenchmarkSecuritiesDataDelegate == null)) {
                this.onEndRetrieveTopBenchmarkSecuritiesDataDelegate = new EndOperationDelegate(this.OnEndRetrieveTopBenchmarkSecuritiesData);
            }
            if ((this.onRetrieveTopBenchmarkSecuritiesDataCompletedDelegate == null)) {
                this.onRetrieveTopBenchmarkSecuritiesDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveTopBenchmarkSecuritiesDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveTopBenchmarkSecuritiesDataDelegate, new object[] {
                        portfolioSelectionData,
                        effectiveDate}, this.onEndRetrieveTopBenchmarkSecuritiesDataDelegate, this.onRetrieveTopBenchmarkSecuritiesDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations.BeginRetrieveHeatMapData(GreenField.DataContracts.PortfolioSelectionData fundSelectionData, System.DateTime effectiveDate, string period, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveHeatMapData(fundSelectionData, effectiveDate, period, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.DataContracts.HeatMapData> GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations.EndRetrieveHeatMapData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveHeatMapData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveHeatMapData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.DataContracts.PortfolioSelectionData fundSelectionData = ((GreenField.DataContracts.PortfolioSelectionData)(inValues[0]));
            System.DateTime effectiveDate = ((System.DateTime)(inValues[1]));
            string period = ((string)(inValues[2]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations)(this)).BeginRetrieveHeatMapData(fundSelectionData, effectiveDate, period, callback, asyncState);
        }
        
        private object[] OnEndRetrieveHeatMapData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.DataContracts.HeatMapData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations)(this)).EndRetrieveHeatMapData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveHeatMapDataCompleted(object state) {
            if ((this.RetrieveHeatMapDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveHeatMapDataCompleted(this, new RetrieveHeatMapDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveHeatMapDataAsync(GreenField.DataContracts.PortfolioSelectionData fundSelectionData, System.DateTime effectiveDate, string period) {
            this.RetrieveHeatMapDataAsync(fundSelectionData, effectiveDate, period, null);
        }
        
        public void RetrieveHeatMapDataAsync(GreenField.DataContracts.PortfolioSelectionData fundSelectionData, System.DateTime effectiveDate, string period, object userState) {
            if ((this.onBeginRetrieveHeatMapDataDelegate == null)) {
                this.onBeginRetrieveHeatMapDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveHeatMapData);
            }
            if ((this.onEndRetrieveHeatMapDataDelegate == null)) {
                this.onEndRetrieveHeatMapDataDelegate = new EndOperationDelegate(this.OnEndRetrieveHeatMapData);
            }
            if ((this.onRetrieveHeatMapDataCompletedDelegate == null)) {
                this.onRetrieveHeatMapDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveHeatMapDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveHeatMapDataDelegate, new object[] {
                        fundSelectionData,
                        effectiveDate,
                        period}, this.onEndRetrieveHeatMapDataDelegate, this.onRetrieveHeatMapDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations.BeginRetrieveAttributionData(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveAttributionData(portfolioSelectionData, effectiveDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.DataContracts.AttributionData> GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations.EndRetrieveAttributionData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveAttributionData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveAttributionData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData = ((GreenField.DataContracts.PortfolioSelectionData)(inValues[0]));
            System.DateTime effectiveDate = ((System.DateTime)(inValues[1]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations)(this)).BeginRetrieveAttributionData(portfolioSelectionData, effectiveDate, callback, asyncState);
        }
        
        private object[] OnEndRetrieveAttributionData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.DataContracts.AttributionData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations)(this)).EndRetrieveAttributionData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveAttributionDataCompleted(object state) {
            if ((this.RetrieveAttributionDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveAttributionDataCompleted(this, new RetrieveAttributionDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveAttributionDataAsync(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate) {
            this.RetrieveAttributionDataAsync(portfolioSelectionData, effectiveDate, null);
        }
        
        public void RetrieveAttributionDataAsync(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, object userState) {
            if ((this.onBeginRetrieveAttributionDataDelegate == null)) {
                this.onBeginRetrieveAttributionDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveAttributionData);
            }
            if ((this.onEndRetrieveAttributionDataDelegate == null)) {
                this.onEndRetrieveAttributionDataDelegate = new EndOperationDelegate(this.OnEndRetrieveAttributionData);
            }
            if ((this.onRetrieveAttributionDataCompletedDelegate == null)) {
                this.onRetrieveAttributionDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveAttributionDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveAttributionDataDelegate, new object[] {
                        portfolioSelectionData,
                        effectiveDate}, this.onEndRetrieveAttributionDataDelegate, this.onRetrieveAttributionDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations.BeginRetrievePortfolioRiskReturnData(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrievePortfolioRiskReturnData(portfolioSelectionData, effectiveDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.DataContracts.PortfolioRiskReturnData> GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations.EndRetrievePortfolioRiskReturnData(System.IAsyncResult result) {
            return base.Channel.EndRetrievePortfolioRiskReturnData(result);
        }
        
        private System.IAsyncResult OnBeginRetrievePortfolioRiskReturnData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData = ((GreenField.DataContracts.PortfolioSelectionData)(inValues[0]));
            System.DateTime effectiveDate = ((System.DateTime)(inValues[1]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations)(this)).BeginRetrievePortfolioRiskReturnData(portfolioSelectionData, effectiveDate, callback, asyncState);
        }
        
        private object[] OnEndRetrievePortfolioRiskReturnData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.DataContracts.PortfolioRiskReturnData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations)(this)).EndRetrievePortfolioRiskReturnData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrievePortfolioRiskReturnDataCompleted(object state) {
            if ((this.RetrievePortfolioRiskReturnDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrievePortfolioRiskReturnDataCompleted(this, new RetrievePortfolioRiskReturnDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrievePortfolioRiskReturnDataAsync(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate) {
            this.RetrievePortfolioRiskReturnDataAsync(portfolioSelectionData, effectiveDate, null);
        }
        
        public void RetrievePortfolioRiskReturnDataAsync(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, object userState) {
            if ((this.onBeginRetrievePortfolioRiskReturnDataDelegate == null)) {
                this.onBeginRetrievePortfolioRiskReturnDataDelegate = new BeginOperationDelegate(this.OnBeginRetrievePortfolioRiskReturnData);
            }
            if ((this.onEndRetrievePortfolioRiskReturnDataDelegate == null)) {
                this.onEndRetrievePortfolioRiskReturnDataDelegate = new EndOperationDelegate(this.OnEndRetrievePortfolioRiskReturnData);
            }
            if ((this.onRetrievePortfolioRiskReturnDataCompletedDelegate == null)) {
                this.onRetrievePortfolioRiskReturnDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrievePortfolioRiskReturnDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrievePortfolioRiskReturnDataDelegate, new object[] {
                        portfolioSelectionData,
                        effectiveDate}, this.onEndRetrievePortfolioRiskReturnDataDelegate, this.onRetrievePortfolioRiskReturnDataCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations CreateChannel() {
            return new BenchmarkHoldingsOperationsClientChannel(this);
        }
        
        private class BenchmarkHoldingsOperationsClientChannel : ChannelBase<GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations>, GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations {
            
            public BenchmarkHoldingsOperationsClientChannel(System.ServiceModel.ClientBase<GreenField.ServiceCaller.BenchmarkHoldingsDefinitions.BenchmarkHoldingsOperations> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginTemp(GreenField.DataContracts.PeriodSelectionData data, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = data;
                System.IAsyncResult _result = base.BeginInvoke("Temp", _args, callback, asyncState);
                return _result;
            }
            
            public void EndTemp(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("Temp", _args, result);
            }
            
            public System.IAsyncResult BeginRetrievePortfolioSelectionData(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("RetrievePortfolioSelectionData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.DataContracts.PortfolioSelectionData> EndRetrievePortfolioSelectionData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.DataContracts.PortfolioSelectionData> _result = ((System.Collections.Generic.List<GreenField.DataContracts.PortfolioSelectionData>)(base.EndInvoke("RetrievePortfolioSelectionData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveBenchmarkSelectionData(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("RetrieveBenchmarkSelectionData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.DataContracts.BenchmarkSelectionData> EndRetrieveBenchmarkSelectionData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.DataContracts.BenchmarkSelectionData> _result = ((System.Collections.Generic.List<GreenField.DataContracts.BenchmarkSelectionData>)(base.EndInvoke("RetrieveBenchmarkSelectionData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveSectorBreakdownData(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, bool isExCashSecurity, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = portfolioSelectionData;
                _args[1] = effectiveDate;
                _args[2] = isExCashSecurity;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveSectorBreakdownData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.DataContracts.SectorBreakdownData> EndRetrieveSectorBreakdownData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.DataContracts.SectorBreakdownData> _result = ((System.Collections.Generic.List<GreenField.DataContracts.SectorBreakdownData>)(base.EndInvoke("RetrieveSectorBreakdownData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveRegionBreakdownData(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, bool isExCashSecurity, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = portfolioSelectionData;
                _args[1] = effectiveDate;
                _args[2] = isExCashSecurity;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveRegionBreakdownData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.DataContracts.RegionBreakdownData> EndRetrieveRegionBreakdownData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.DataContracts.RegionBreakdownData> _result = ((System.Collections.Generic.List<GreenField.DataContracts.RegionBreakdownData>)(base.EndInvoke("RetrieveRegionBreakdownData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveTopHoldingsData(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, bool isExCashSecurity, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = portfolioSelectionData;
                _args[1] = effectiveDate;
                _args[2] = isExCashSecurity;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveTopHoldingsData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.DataContracts.TopHoldingsData> EndRetrieveTopHoldingsData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.DataContracts.TopHoldingsData> _result = ((System.Collections.Generic.List<GreenField.DataContracts.TopHoldingsData>)(base.EndInvoke("RetrieveTopHoldingsData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveIndexConstituentsData(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = portfolioSelectionData;
                _args[1] = effectiveDate;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveIndexConstituentsData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.DataContracts.IndexConstituentsData> EndRetrieveIndexConstituentsData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.DataContracts.IndexConstituentsData> _result = ((System.Collections.Generic.List<GreenField.DataContracts.IndexConstituentsData>)(base.EndInvoke("RetrieveIndexConstituentsData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveFilterSelectionData(System.Nullable<System.DateTime> effectiveDate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = effectiveDate;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveFilterSelectionData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.DataContracts.FilterSelectionData> EndRetrieveFilterSelectionData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.DataContracts.FilterSelectionData> _result = ((System.Collections.Generic.List<GreenField.DataContracts.FilterSelectionData>)(base.EndInvoke("RetrieveFilterSelectionData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrievePortfolioDetailsData(GreenField.DataContracts.PortfolioSelectionData objPortfolioIdentifier, System.DateTime effectiveDate, bool excludeCash, bool objGetBenchmark, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = objPortfolioIdentifier;
                _args[1] = effectiveDate;
                _args[2] = excludeCash;
                _args[3] = objGetBenchmark;
                System.IAsyncResult _result = base.BeginInvoke("RetrievePortfolioDetailsData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.DataContracts.PortfolioDetailsData> EndRetrievePortfolioDetailsData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.DataContracts.PortfolioDetailsData> _result = ((System.Collections.Generic.List<GreenField.DataContracts.PortfolioDetailsData>)(base.EndInvoke("RetrievePortfolioDetailsData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveAssetAllocationData(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = portfolioSelectionData;
                _args[1] = effectiveDate;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveAssetAllocationData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.DataContracts.AssetAllocationData> EndRetrieveAssetAllocationData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.DataContracts.AssetAllocationData> _result = ((System.Collections.Generic.List<GreenField.DataContracts.AssetAllocationData>)(base.EndInvoke("RetrieveAssetAllocationData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveHoldingsPercentageData(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string filterType, string filterValue, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = portfolioSelectionData;
                _args[1] = effectiveDate;
                _args[2] = filterType;
                _args[3] = filterValue;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveHoldingsPercentageData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.DataContracts.HoldingsPercentageData> EndRetrieveHoldingsPercentageData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.DataContracts.HoldingsPercentageData> _result = ((System.Collections.Generic.List<GreenField.DataContracts.HoldingsPercentageData>)(base.EndInvoke("RetrieveHoldingsPercentageData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveHoldingsPercentageDataForRegion(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string filterType, string filterValue, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = portfolioSelectionData;
                _args[1] = effectiveDate;
                _args[2] = filterType;
                _args[3] = filterValue;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveHoldingsPercentageDataForRegion", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.DataContracts.HoldingsPercentageData> EndRetrieveHoldingsPercentageDataForRegion(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.DataContracts.HoldingsPercentageData> _result = ((System.Collections.Generic.List<GreenField.DataContracts.HoldingsPercentageData>)(base.EndInvoke("RetrieveHoldingsPercentageDataForRegion", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveTopBenchmarkSecuritiesData(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = portfolioSelectionData;
                _args[1] = effectiveDate;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveTopBenchmarkSecuritiesData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.DataContracts.TopBenchmarkSecuritiesData> EndRetrieveTopBenchmarkSecuritiesData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.DataContracts.TopBenchmarkSecuritiesData> _result = ((System.Collections.Generic.List<GreenField.DataContracts.TopBenchmarkSecuritiesData>)(base.EndInvoke("RetrieveTopBenchmarkSecuritiesData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveHeatMapData(GreenField.DataContracts.PortfolioSelectionData fundSelectionData, System.DateTime effectiveDate, string period, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = fundSelectionData;
                _args[1] = effectiveDate;
                _args[2] = period;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveHeatMapData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.DataContracts.HeatMapData> EndRetrieveHeatMapData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.DataContracts.HeatMapData> _result = ((System.Collections.Generic.List<GreenField.DataContracts.HeatMapData>)(base.EndInvoke("RetrieveHeatMapData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveAttributionData(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = portfolioSelectionData;
                _args[1] = effectiveDate;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveAttributionData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.DataContracts.AttributionData> EndRetrieveAttributionData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.DataContracts.AttributionData> _result = ((System.Collections.Generic.List<GreenField.DataContracts.AttributionData>)(base.EndInvoke("RetrieveAttributionData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrievePortfolioRiskReturnData(GreenField.DataContracts.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = portfolioSelectionData;
                _args[1] = effectiveDate;
                System.IAsyncResult _result = base.BeginInvoke("RetrievePortfolioRiskReturnData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.DataContracts.PortfolioRiskReturnData> EndRetrievePortfolioRiskReturnData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.DataContracts.PortfolioRiskReturnData> _result = ((System.Collections.Generic.List<GreenField.DataContracts.PortfolioRiskReturnData>)(base.EndInvoke("RetrievePortfolioRiskReturnData", _args, result)));
                return _result;
            }
        }
    }
}
