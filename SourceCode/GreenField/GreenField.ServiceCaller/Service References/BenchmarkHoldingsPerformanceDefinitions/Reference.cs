//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.261
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PeriodSelectionData", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.DataContracts")]
    public partial class PeriodSelectionData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.DateTime PeriodEndDateField;
        
        private System.DateTime PeriodStartDateField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime PeriodEndDate {
            get {
                return this.PeriodEndDateField;
            }
            set {
                if ((this.PeriodEndDateField.Equals(value) != true)) {
                    this.PeriodEndDateField = value;
                    this.RaisePropertyChanged("PeriodEndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime PeriodStartDate {
            get {
                return this.PeriodStartDateField;
            }
            set {
                if ((this.PeriodStartDateField.Equals(value) != true)) {
                    this.PeriodStartDateField = value;
                    this.RaisePropertyChanged("PeriodStartDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PortfolioSelectionData", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.DataContracts")]
    public partial class PortfolioSelectionData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string BenchmarkIdField;
        
        private string PortfolioIdField;
        
        private string PortfolioThemeSubGroupIdField;
        
        private string PortfolioThemeSubGroupNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BenchmarkId {
            get {
                return this.BenchmarkIdField;
            }
            set {
                if ((object.ReferenceEquals(this.BenchmarkIdField, value) != true)) {
                    this.BenchmarkIdField = value;
                    this.RaisePropertyChanged("BenchmarkId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PortfolioId {
            get {
                return this.PortfolioIdField;
            }
            set {
                if ((object.ReferenceEquals(this.PortfolioIdField, value) != true)) {
                    this.PortfolioIdField = value;
                    this.RaisePropertyChanged("PortfolioId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PortfolioThemeSubGroupId {
            get {
                return this.PortfolioThemeSubGroupIdField;
            }
            set {
                if ((object.ReferenceEquals(this.PortfolioThemeSubGroupIdField, value) != true)) {
                    this.PortfolioThemeSubGroupIdField = value;
                    this.RaisePropertyChanged("PortfolioThemeSubGroupId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PortfolioThemeSubGroupName {
            get {
                return this.PortfolioThemeSubGroupNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PortfolioThemeSubGroupNameField, value) != true)) {
                    this.PortfolioThemeSubGroupNameField = value;
                    this.RaisePropertyChanged("PortfolioThemeSubGroupName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BenchmarkSelectionData", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.DataContracts")]
    public partial class BenchmarkSelectionData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string InstrumentIDField;
        
        private string NameField;
        
        private string TickerField;
        
        private string TypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InstrumentID {
            get {
                return this.InstrumentIDField;
            }
            set {
                if ((object.ReferenceEquals(this.InstrumentIDField, value) != true)) {
                    this.InstrumentIDField = value;
                    this.RaisePropertyChanged("InstrumentID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Ticker {
            get {
                return this.TickerField;
            }
            set {
                if ((object.ReferenceEquals(this.TickerField, value) != true)) {
                    this.TickerField = value;
                    this.RaisePropertyChanged("Ticker");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SectorBreakdownData", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.DataContracts")]
    public partial class SectorBreakdownData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Nullable<decimal> ActivePositionField;
        
        private System.Nullable<decimal> BenchmarkShareField;
        
        private string IndustryField;
        
        private System.Nullable<decimal> PortfolioShareField;
        
        private string SectorField;
        
        private string SecurityField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> ActivePosition {
            get {
                return this.ActivePositionField;
            }
            set {
                if ((this.ActivePositionField.Equals(value) != true)) {
                    this.ActivePositionField = value;
                    this.RaisePropertyChanged("ActivePosition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> BenchmarkShare {
            get {
                return this.BenchmarkShareField;
            }
            set {
                if ((this.BenchmarkShareField.Equals(value) != true)) {
                    this.BenchmarkShareField = value;
                    this.RaisePropertyChanged("BenchmarkShare");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Industry {
            get {
                return this.IndustryField;
            }
            set {
                if ((object.ReferenceEquals(this.IndustryField, value) != true)) {
                    this.IndustryField = value;
                    this.RaisePropertyChanged("Industry");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> PortfolioShare {
            get {
                return this.PortfolioShareField;
            }
            set {
                if ((this.PortfolioShareField.Equals(value) != true)) {
                    this.PortfolioShareField = value;
                    this.RaisePropertyChanged("PortfolioShare");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Sector {
            get {
                return this.SectorField;
            }
            set {
                if ((object.ReferenceEquals(this.SectorField, value) != true)) {
                    this.SectorField = value;
                    this.RaisePropertyChanged("Sector");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Security {
            get {
                return this.SecurityField;
            }
            set {
                if ((object.ReferenceEquals(this.SecurityField, value) != true)) {
                    this.SecurityField = value;
                    this.RaisePropertyChanged("Security");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RegionBreakdownData", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.DataContracts")]
    public partial class RegionBreakdownData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Nullable<decimal> ActivePositionField;
        
        private System.Nullable<decimal> BenchmarkShareField;
        
        private string CountryField;
        
        private System.Nullable<decimal> PortfolioShareField;
        
        private string RegionField;
        
        private string SecurityField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> ActivePosition {
            get {
                return this.ActivePositionField;
            }
            set {
                if ((this.ActivePositionField.Equals(value) != true)) {
                    this.ActivePositionField = value;
                    this.RaisePropertyChanged("ActivePosition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> BenchmarkShare {
            get {
                return this.BenchmarkShareField;
            }
            set {
                if ((this.BenchmarkShareField.Equals(value) != true)) {
                    this.BenchmarkShareField = value;
                    this.RaisePropertyChanged("BenchmarkShare");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Country {
            get {
                return this.CountryField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryField, value) != true)) {
                    this.CountryField = value;
                    this.RaisePropertyChanged("Country");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> PortfolioShare {
            get {
                return this.PortfolioShareField;
            }
            set {
                if ((this.PortfolioShareField.Equals(value) != true)) {
                    this.PortfolioShareField = value;
                    this.RaisePropertyChanged("PortfolioShare");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Region {
            get {
                return this.RegionField;
            }
            set {
                if ((object.ReferenceEquals(this.RegionField, value) != true)) {
                    this.RegionField = value;
                    this.RaisePropertyChanged("Region");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Security {
            get {
                return this.SecurityField;
            }
            set {
                if ((object.ReferenceEquals(this.SecurityField, value) != true)) {
                    this.SecurityField = value;
                    this.RaisePropertyChanged("Security");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TopHoldingsData", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.DataContracts")]
    public partial class TopHoldingsData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Nullable<decimal> ActivePositionField;
        
        private System.Nullable<decimal> BenchmarkShareField;
        
        private string HoldingField;
        
        private System.Nullable<decimal> MarketValueField;
        
        private System.Nullable<decimal> PortfolioShareField;
        
        private string TickerField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> ActivePosition {
            get {
                return this.ActivePositionField;
            }
            set {
                if ((this.ActivePositionField.Equals(value) != true)) {
                    this.ActivePositionField = value;
                    this.RaisePropertyChanged("ActivePosition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> BenchmarkShare {
            get {
                return this.BenchmarkShareField;
            }
            set {
                if ((this.BenchmarkShareField.Equals(value) != true)) {
                    this.BenchmarkShareField = value;
                    this.RaisePropertyChanged("BenchmarkShare");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Holding {
            get {
                return this.HoldingField;
            }
            set {
                if ((object.ReferenceEquals(this.HoldingField, value) != true)) {
                    this.HoldingField = value;
                    this.RaisePropertyChanged("Holding");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> MarketValue {
            get {
                return this.MarketValueField;
            }
            set {
                if ((this.MarketValueField.Equals(value) != true)) {
                    this.MarketValueField = value;
                    this.RaisePropertyChanged("MarketValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> PortfolioShare {
            get {
                return this.PortfolioShareField;
            }
            set {
                if ((this.PortfolioShareField.Equals(value) != true)) {
                    this.PortfolioShareField = value;
                    this.RaisePropertyChanged("PortfolioShare");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Ticker {
            get {
                return this.TickerField;
            }
            set {
                if ((object.ReferenceEquals(this.TickerField, value) != true)) {
                    this.TickerField = value;
                    this.RaisePropertyChanged("Ticker");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IndexConstituentsData", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.DataContracts")]
    public partial class IndexConstituentsData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ConstituentNameField;
        
        private string CountryField;
        
        private string IndustryField;
        
        private string RegionField;
        
        private string SectorField;
        
        private string SubIndustryField;
        
        private System.Nullable<decimal> WeightField;
        
        private System.Nullable<decimal> WeightCountryField;
        
        private System.Nullable<decimal> WeightIndustryField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ConstituentName {
            get {
                return this.ConstituentNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ConstituentNameField, value) != true)) {
                    this.ConstituentNameField = value;
                    this.RaisePropertyChanged("ConstituentName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Country {
            get {
                return this.CountryField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryField, value) != true)) {
                    this.CountryField = value;
                    this.RaisePropertyChanged("Country");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Industry {
            get {
                return this.IndustryField;
            }
            set {
                if ((object.ReferenceEquals(this.IndustryField, value) != true)) {
                    this.IndustryField = value;
                    this.RaisePropertyChanged("Industry");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Region {
            get {
                return this.RegionField;
            }
            set {
                if ((object.ReferenceEquals(this.RegionField, value) != true)) {
                    this.RegionField = value;
                    this.RaisePropertyChanged("Region");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Sector {
            get {
                return this.SectorField;
            }
            set {
                if ((object.ReferenceEquals(this.SectorField, value) != true)) {
                    this.SectorField = value;
                    this.RaisePropertyChanged("Sector");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubIndustry {
            get {
                return this.SubIndustryField;
            }
            set {
                if ((object.ReferenceEquals(this.SubIndustryField, value) != true)) {
                    this.SubIndustryField = value;
                    this.RaisePropertyChanged("SubIndustry");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> Weight {
            get {
                return this.WeightField;
            }
            set {
                if ((this.WeightField.Equals(value) != true)) {
                    this.WeightField = value;
                    this.RaisePropertyChanged("Weight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> WeightCountry {
            get {
                return this.WeightCountryField;
            }
            set {
                if ((this.WeightCountryField.Equals(value) != true)) {
                    this.WeightCountryField = value;
                    this.RaisePropertyChanged("WeightCountry");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> WeightIndustry {
            get {
                return this.WeightIndustryField;
            }
            set {
                if ((this.WeightIndustryField.Equals(value) != true)) {
                    this.WeightIndustryField = value;
                    this.RaisePropertyChanged("WeightIndustry");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PortfolioDetailsData", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.DataContracts")]
    public partial class PortfolioDetailsData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string A_Sec_Instr_TypeField;
        
        private System.Nullable<decimal> ActivePositionField;
        
        private string AsecSecShortNameField;
        
        private System.Nullable<decimal> AshEmmModelWeightField;
        
        private System.Nullable<decimal> BalanceNominalField;
        
        private System.Nullable<decimal> BenchmarkWeightField;
        
        private System.Nullable<decimal> DirtyValuePCField;
        
        private System.DateTime FromDateField;
        
        private string IndustryNameField;
        
        private string IsoCountryCodeField;
        
        private string IssueNameField;
        
        private System.Nullable<decimal> MarketCapUSDField;
        
        private System.Nullable<decimal> PortfolioDirtyValuePCField;
        
        private System.Nullable<decimal> PortfolioWeightField;
        
        private string ProprietaryRegionCodeField;
        
        private System.Nullable<decimal> ReAshEmmModelWeightField;
        
        private System.Nullable<decimal> ReBenchmarkWeightField;
        
        private System.Nullable<decimal> RePortfolioWeightField;
        
        private string SectorNameField;
        
        private string SecurityThemeCodeField;
        
        private string SecurityTypeField;
        
        private string SubIndustryNameField;
        
        private string TickerField;
        
        private string TradingCurrencyField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string A_Sec_Instr_Type {
            get {
                return this.A_Sec_Instr_TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.A_Sec_Instr_TypeField, value) != true)) {
                    this.A_Sec_Instr_TypeField = value;
                    this.RaisePropertyChanged("A_Sec_Instr_Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> ActivePosition {
            get {
                return this.ActivePositionField;
            }
            set {
                if ((this.ActivePositionField.Equals(value) != true)) {
                    this.ActivePositionField = value;
                    this.RaisePropertyChanged("ActivePosition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AsecSecShortName {
            get {
                return this.AsecSecShortNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AsecSecShortNameField, value) != true)) {
                    this.AsecSecShortNameField = value;
                    this.RaisePropertyChanged("AsecSecShortName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> AshEmmModelWeight {
            get {
                return this.AshEmmModelWeightField;
            }
            set {
                if ((this.AshEmmModelWeightField.Equals(value) != true)) {
                    this.AshEmmModelWeightField = value;
                    this.RaisePropertyChanged("AshEmmModelWeight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> BalanceNominal {
            get {
                return this.BalanceNominalField;
            }
            set {
                if ((this.BalanceNominalField.Equals(value) != true)) {
                    this.BalanceNominalField = value;
                    this.RaisePropertyChanged("BalanceNominal");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> BenchmarkWeight {
            get {
                return this.BenchmarkWeightField;
            }
            set {
                if ((this.BenchmarkWeightField.Equals(value) != true)) {
                    this.BenchmarkWeightField = value;
                    this.RaisePropertyChanged("BenchmarkWeight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> DirtyValuePC {
            get {
                return this.DirtyValuePCField;
            }
            set {
                if ((this.DirtyValuePCField.Equals(value) != true)) {
                    this.DirtyValuePCField = value;
                    this.RaisePropertyChanged("DirtyValuePC");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime FromDate {
            get {
                return this.FromDateField;
            }
            set {
                if ((this.FromDateField.Equals(value) != true)) {
                    this.FromDateField = value;
                    this.RaisePropertyChanged("FromDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IndustryName {
            get {
                return this.IndustryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.IndustryNameField, value) != true)) {
                    this.IndustryNameField = value;
                    this.RaisePropertyChanged("IndustryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IsoCountryCode {
            get {
                return this.IsoCountryCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.IsoCountryCodeField, value) != true)) {
                    this.IsoCountryCodeField = value;
                    this.RaisePropertyChanged("IsoCountryCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IssueName {
            get {
                return this.IssueNameField;
            }
            set {
                if ((object.ReferenceEquals(this.IssueNameField, value) != true)) {
                    this.IssueNameField = value;
                    this.RaisePropertyChanged("IssueName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> MarketCapUSD {
            get {
                return this.MarketCapUSDField;
            }
            set {
                if ((this.MarketCapUSDField.Equals(value) != true)) {
                    this.MarketCapUSDField = value;
                    this.RaisePropertyChanged("MarketCapUSD");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> PortfolioDirtyValuePC {
            get {
                return this.PortfolioDirtyValuePCField;
            }
            set {
                if ((this.PortfolioDirtyValuePCField.Equals(value) != true)) {
                    this.PortfolioDirtyValuePCField = value;
                    this.RaisePropertyChanged("PortfolioDirtyValuePC");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> PortfolioWeight {
            get {
                return this.PortfolioWeightField;
            }
            set {
                if ((this.PortfolioWeightField.Equals(value) != true)) {
                    this.PortfolioWeightField = value;
                    this.RaisePropertyChanged("PortfolioWeight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProprietaryRegionCode {
            get {
                return this.ProprietaryRegionCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ProprietaryRegionCodeField, value) != true)) {
                    this.ProprietaryRegionCodeField = value;
                    this.RaisePropertyChanged("ProprietaryRegionCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> ReAshEmmModelWeight {
            get {
                return this.ReAshEmmModelWeightField;
            }
            set {
                if ((this.ReAshEmmModelWeightField.Equals(value) != true)) {
                    this.ReAshEmmModelWeightField = value;
                    this.RaisePropertyChanged("ReAshEmmModelWeight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> ReBenchmarkWeight {
            get {
                return this.ReBenchmarkWeightField;
            }
            set {
                if ((this.ReBenchmarkWeightField.Equals(value) != true)) {
                    this.ReBenchmarkWeightField = value;
                    this.RaisePropertyChanged("ReBenchmarkWeight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> RePortfolioWeight {
            get {
                return this.RePortfolioWeightField;
            }
            set {
                if ((this.RePortfolioWeightField.Equals(value) != true)) {
                    this.RePortfolioWeightField = value;
                    this.RaisePropertyChanged("RePortfolioWeight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SectorName {
            get {
                return this.SectorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SectorNameField, value) != true)) {
                    this.SectorNameField = value;
                    this.RaisePropertyChanged("SectorName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SecurityThemeCode {
            get {
                return this.SecurityThemeCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.SecurityThemeCodeField, value) != true)) {
                    this.SecurityThemeCodeField = value;
                    this.RaisePropertyChanged("SecurityThemeCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SecurityType {
            get {
                return this.SecurityTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.SecurityTypeField, value) != true)) {
                    this.SecurityTypeField = value;
                    this.RaisePropertyChanged("SecurityType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubIndustryName {
            get {
                return this.SubIndustryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SubIndustryNameField, value) != true)) {
                    this.SubIndustryNameField = value;
                    this.RaisePropertyChanged("SubIndustryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Ticker {
            get {
                return this.TickerField;
            }
            set {
                if ((object.ReferenceEquals(this.TickerField, value) != true)) {
                    this.TickerField = value;
                    this.RaisePropertyChanged("Ticker");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TradingCurrency {
            get {
                return this.TradingCurrencyField;
            }
            set {
                if ((object.ReferenceEquals(this.TradingCurrencyField, value) != true)) {
                    this.TradingCurrencyField = value;
                    this.RaisePropertyChanged("TradingCurrency");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BenchmarkChartReturnData", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.DataContracts")]
    public partial class BenchmarkChartReturnData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private decimal DailyReturnField;
        
        private System.DateTime FromDateField;
        
        private string InstrumentIDField;
        
        private string IssueNameField;
        
        private string TickerField;
        
        private string TypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal DailyReturn {
            get {
                return this.DailyReturnField;
            }
            set {
                if ((this.DailyReturnField.Equals(value) != true)) {
                    this.DailyReturnField = value;
                    this.RaisePropertyChanged("DailyReturn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime FromDate {
            get {
                return this.FromDateField;
            }
            set {
                if ((this.FromDateField.Equals(value) != true)) {
                    this.FromDateField = value;
                    this.RaisePropertyChanged("FromDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InstrumentID {
            get {
                return this.InstrumentIDField;
            }
            set {
                if ((object.ReferenceEquals(this.InstrumentIDField, value) != true)) {
                    this.InstrumentIDField = value;
                    this.RaisePropertyChanged("InstrumentID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IssueName {
            get {
                return this.IssueNameField;
            }
            set {
                if ((object.ReferenceEquals(this.IssueNameField, value) != true)) {
                    this.IssueNameField = value;
                    this.RaisePropertyChanged("IssueName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Ticker {
            get {
                return this.TickerField;
            }
            set {
                if ((object.ReferenceEquals(this.TickerField, value) != true)) {
                    this.TickerField = value;
                    this.RaisePropertyChanged("Ticker");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BenchmarkGridReturnData", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.DataContracts")]
    public partial class BenchmarkGridReturnData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string InstrumentIDField;
        
        private string IssueNameField;
        
        private decimal MTDField;
        
        private decimal PreviousYearDataField;
        
        private decimal QTDField;
        
        private decimal ThreePreviousYearDataField;
        
        private string TickerField;
        
        private decimal TwoPreviousYearDataField;
        
        private string TypeField;
        
        private decimal YTDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InstrumentID {
            get {
                return this.InstrumentIDField;
            }
            set {
                if ((object.ReferenceEquals(this.InstrumentIDField, value) != true)) {
                    this.InstrumentIDField = value;
                    this.RaisePropertyChanged("InstrumentID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IssueName {
            get {
                return this.IssueNameField;
            }
            set {
                if ((object.ReferenceEquals(this.IssueNameField, value) != true)) {
                    this.IssueNameField = value;
                    this.RaisePropertyChanged("IssueName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal MTD {
            get {
                return this.MTDField;
            }
            set {
                if ((this.MTDField.Equals(value) != true)) {
                    this.MTDField = value;
                    this.RaisePropertyChanged("MTD");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal PreviousYearData {
            get {
                return this.PreviousYearDataField;
            }
            set {
                if ((this.PreviousYearDataField.Equals(value) != true)) {
                    this.PreviousYearDataField = value;
                    this.RaisePropertyChanged("PreviousYearData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal QTD {
            get {
                return this.QTDField;
            }
            set {
                if ((this.QTDField.Equals(value) != true)) {
                    this.QTDField = value;
                    this.RaisePropertyChanged("QTD");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal ThreePreviousYearData {
            get {
                return this.ThreePreviousYearDataField;
            }
            set {
                if ((this.ThreePreviousYearDataField.Equals(value) != true)) {
                    this.ThreePreviousYearDataField = value;
                    this.RaisePropertyChanged("ThreePreviousYearData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Ticker {
            get {
                return this.TickerField;
            }
            set {
                if ((object.ReferenceEquals(this.TickerField, value) != true)) {
                    this.TickerField = value;
                    this.RaisePropertyChanged("Ticker");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal TwoPreviousYearData {
            get {
                return this.TwoPreviousYearDataField;
            }
            set {
                if ((this.TwoPreviousYearDataField.Equals(value) != true)) {
                    this.TwoPreviousYearDataField = value;
                    this.RaisePropertyChanged("TwoPreviousYearData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal YTD {
            get {
                return this.YTDField;
            }
            set {
                if ((this.YTDField.Equals(value) != true)) {
                    this.YTDField = value;
                    this.RaisePropertyChanged("YTD");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HoldingsPercentageData", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.DataContracts")]
    public partial class HoldingsPercentageData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string BenchmarkNameField;
        
        private System.Nullable<decimal> BenchmarkWeightField;
        
        private System.DateTime EffectiveDateField;
        
        private string FundNameField;
        
        private System.Nullable<decimal> PortfolioWeightField;
        
        private string SegmentNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BenchmarkName {
            get {
                return this.BenchmarkNameField;
            }
            set {
                if ((object.ReferenceEquals(this.BenchmarkNameField, value) != true)) {
                    this.BenchmarkNameField = value;
                    this.RaisePropertyChanged("BenchmarkName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> BenchmarkWeight {
            get {
                return this.BenchmarkWeightField;
            }
            set {
                if ((this.BenchmarkWeightField.Equals(value) != true)) {
                    this.BenchmarkWeightField = value;
                    this.RaisePropertyChanged("BenchmarkWeight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EffectiveDate {
            get {
                return this.EffectiveDateField;
            }
            set {
                if ((this.EffectiveDateField.Equals(value) != true)) {
                    this.EffectiveDateField = value;
                    this.RaisePropertyChanged("EffectiveDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FundName {
            get {
                return this.FundNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FundNameField, value) != true)) {
                    this.FundNameField = value;
                    this.RaisePropertyChanged("FundName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> PortfolioWeight {
            get {
                return this.PortfolioWeightField;
            }
            set {
                if ((this.PortfolioWeightField.Equals(value) != true)) {
                    this.PortfolioWeightField = value;
                    this.RaisePropertyChanged("PortfolioWeight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SegmentName {
            get {
                return this.SegmentNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SegmentNameField, value) != true)) {
                    this.SegmentNameField = value;
                    this.RaisePropertyChanged("SegmentName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TopBenchmarkSecuritiesData", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.DataContracts")]
    public partial class TopBenchmarkSecuritiesData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string IssuerNameField;
        
        private double MTDField;
        
        private double PreviousYearField;
        
        private double QTDField;
        
        private double SecondPreviousYearField;
        
        private double ThirdPreviousYearField;
        
        private double WeightField;
        
        private double YTDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IssuerName {
            get {
                return this.IssuerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.IssuerNameField, value) != true)) {
                    this.IssuerNameField = value;
                    this.RaisePropertyChanged("IssuerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MTD {
            get {
                return this.MTDField;
            }
            set {
                if ((this.MTDField.Equals(value) != true)) {
                    this.MTDField = value;
                    this.RaisePropertyChanged("MTD");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double PreviousYear {
            get {
                return this.PreviousYearField;
            }
            set {
                if ((this.PreviousYearField.Equals(value) != true)) {
                    this.PreviousYearField = value;
                    this.RaisePropertyChanged("PreviousYear");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double QTD {
            get {
                return this.QTDField;
            }
            set {
                if ((this.QTDField.Equals(value) != true)) {
                    this.QTDField = value;
                    this.RaisePropertyChanged("QTD");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double SecondPreviousYear {
            get {
                return this.SecondPreviousYearField;
            }
            set {
                if ((this.SecondPreviousYearField.Equals(value) != true)) {
                    this.SecondPreviousYearField = value;
                    this.RaisePropertyChanged("SecondPreviousYear");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ThirdPreviousYear {
            get {
                return this.ThirdPreviousYearField;
            }
            set {
                if ((this.ThirdPreviousYearField.Equals(value) != true)) {
                    this.ThirdPreviousYearField = value;
                    this.RaisePropertyChanged("ThirdPreviousYear");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Weight {
            get {
                return this.WeightField;
            }
            set {
                if ((this.WeightField.Equals(value) != true)) {
                    this.WeightField = value;
                    this.RaisePropertyChanged("Weight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double YTD {
            get {
                return this.YTDField;
            }
            set {
                if ((this.YTDField.Equals(value) != true)) {
                    this.YTDField = value;
                    this.RaisePropertyChanged("YTD");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MarketCapitalizationData", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.DataContracts")]
    public partial class MarketCapitalizationData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private double BenchmarkLargeShareField;
        
        private double BenchmarkMediumShareField;
        
        private double BenchmarkMegaShareField;
        
        private double BenchmarkMicroShareField;
        
        private double BenchmarkSmallShareField;
        
        private long BenchmarkWeightedAverageField;
        
        private long BenchmarkWeightedMedianField;
        
        private string LargeLowerLimitField;
        
        private string MediumLowerLimitField;
        
        private string MegaLowerLimitField;
        
        private double PortfolioLargeShareField;
        
        private double PortfolioMediumShareField;
        
        private double PortfolioMegaShareField;
        
        private double PortfolioMicroShareField;
        
        private double PortfolioSmallShareField;
        
        private long PortfolioWeightedAverageField;
        
        private long PortfolioWeightedMedianField;
        
        private string SmallLowerLimitField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double BenchmarkLargeShare {
            get {
                return this.BenchmarkLargeShareField;
            }
            set {
                if ((this.BenchmarkLargeShareField.Equals(value) != true)) {
                    this.BenchmarkLargeShareField = value;
                    this.RaisePropertyChanged("BenchmarkLargeShare");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double BenchmarkMediumShare {
            get {
                return this.BenchmarkMediumShareField;
            }
            set {
                if ((this.BenchmarkMediumShareField.Equals(value) != true)) {
                    this.BenchmarkMediumShareField = value;
                    this.RaisePropertyChanged("BenchmarkMediumShare");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double BenchmarkMegaShare {
            get {
                return this.BenchmarkMegaShareField;
            }
            set {
                if ((this.BenchmarkMegaShareField.Equals(value) != true)) {
                    this.BenchmarkMegaShareField = value;
                    this.RaisePropertyChanged("BenchmarkMegaShare");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double BenchmarkMicroShare {
            get {
                return this.BenchmarkMicroShareField;
            }
            set {
                if ((this.BenchmarkMicroShareField.Equals(value) != true)) {
                    this.BenchmarkMicroShareField = value;
                    this.RaisePropertyChanged("BenchmarkMicroShare");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double BenchmarkSmallShare {
            get {
                return this.BenchmarkSmallShareField;
            }
            set {
                if ((this.BenchmarkSmallShareField.Equals(value) != true)) {
                    this.BenchmarkSmallShareField = value;
                    this.RaisePropertyChanged("BenchmarkSmallShare");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long BenchmarkWeightedAverage {
            get {
                return this.BenchmarkWeightedAverageField;
            }
            set {
                if ((this.BenchmarkWeightedAverageField.Equals(value) != true)) {
                    this.BenchmarkWeightedAverageField = value;
                    this.RaisePropertyChanged("BenchmarkWeightedAverage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long BenchmarkWeightedMedian {
            get {
                return this.BenchmarkWeightedMedianField;
            }
            set {
                if ((this.BenchmarkWeightedMedianField.Equals(value) != true)) {
                    this.BenchmarkWeightedMedianField = value;
                    this.RaisePropertyChanged("BenchmarkWeightedMedian");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LargeLowerLimit {
            get {
                return this.LargeLowerLimitField;
            }
            set {
                if ((object.ReferenceEquals(this.LargeLowerLimitField, value) != true)) {
                    this.LargeLowerLimitField = value;
                    this.RaisePropertyChanged("LargeLowerLimit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MediumLowerLimit {
            get {
                return this.MediumLowerLimitField;
            }
            set {
                if ((object.ReferenceEquals(this.MediumLowerLimitField, value) != true)) {
                    this.MediumLowerLimitField = value;
                    this.RaisePropertyChanged("MediumLowerLimit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MegaLowerLimit {
            get {
                return this.MegaLowerLimitField;
            }
            set {
                if ((object.ReferenceEquals(this.MegaLowerLimitField, value) != true)) {
                    this.MegaLowerLimitField = value;
                    this.RaisePropertyChanged("MegaLowerLimit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double PortfolioLargeShare {
            get {
                return this.PortfolioLargeShareField;
            }
            set {
                if ((this.PortfolioLargeShareField.Equals(value) != true)) {
                    this.PortfolioLargeShareField = value;
                    this.RaisePropertyChanged("PortfolioLargeShare");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double PortfolioMediumShare {
            get {
                return this.PortfolioMediumShareField;
            }
            set {
                if ((this.PortfolioMediumShareField.Equals(value) != true)) {
                    this.PortfolioMediumShareField = value;
                    this.RaisePropertyChanged("PortfolioMediumShare");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double PortfolioMegaShare {
            get {
                return this.PortfolioMegaShareField;
            }
            set {
                if ((this.PortfolioMegaShareField.Equals(value) != true)) {
                    this.PortfolioMegaShareField = value;
                    this.RaisePropertyChanged("PortfolioMegaShare");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double PortfolioMicroShare {
            get {
                return this.PortfolioMicroShareField;
            }
            set {
                if ((this.PortfolioMicroShareField.Equals(value) != true)) {
                    this.PortfolioMicroShareField = value;
                    this.RaisePropertyChanged("PortfolioMicroShare");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double PortfolioSmallShare {
            get {
                return this.PortfolioSmallShareField;
            }
            set {
                if ((this.PortfolioSmallShareField.Equals(value) != true)) {
                    this.PortfolioSmallShareField = value;
                    this.RaisePropertyChanged("PortfolioSmallShare");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long PortfolioWeightedAverage {
            get {
                return this.PortfolioWeightedAverageField;
            }
            set {
                if ((this.PortfolioWeightedAverageField.Equals(value) != true)) {
                    this.PortfolioWeightedAverageField = value;
                    this.RaisePropertyChanged("PortfolioWeightedAverage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long PortfolioWeightedMedian {
            get {
                return this.PortfolioWeightedMedianField;
            }
            set {
                if ((this.PortfolioWeightedMedianField.Equals(value) != true)) {
                    this.PortfolioWeightedMedianField = value;
                    this.RaisePropertyChanged("PortfolioWeightedMedian");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SmallLowerLimit {
            get {
                return this.SmallLowerLimitField;
            }
            set {
                if ((object.ReferenceEquals(this.SmallLowerLimitField, value) != true)) {
                    this.SmallLowerLimitField = value;
                    this.RaisePropertyChanged("SmallLowerLimit");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AssetAllocationData", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.DataContracts")]
    public partial class AssetAllocationData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Nullable<decimal> ActivePositionField;
        
        private System.Nullable<decimal> BenchmarkWeightField;
        
        private string CountryField;
        
        private System.Nullable<decimal> ModelWeightField;
        
        private string PortfolioIdField;
        
        private System.Nullable<decimal> PortfolioWeightField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> ActivePosition {
            get {
                return this.ActivePositionField;
            }
            set {
                if ((this.ActivePositionField.Equals(value) != true)) {
                    this.ActivePositionField = value;
                    this.RaisePropertyChanged("ActivePosition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> BenchmarkWeight {
            get {
                return this.BenchmarkWeightField;
            }
            set {
                if ((this.BenchmarkWeightField.Equals(value) != true)) {
                    this.BenchmarkWeightField = value;
                    this.RaisePropertyChanged("BenchmarkWeight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Country {
            get {
                return this.CountryField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryField, value) != true)) {
                    this.CountryField = value;
                    this.RaisePropertyChanged("Country");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> ModelWeight {
            get {
                return this.ModelWeightField;
            }
            set {
                if ((this.ModelWeightField.Equals(value) != true)) {
                    this.ModelWeightField = value;
                    this.RaisePropertyChanged("ModelWeight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PortfolioId {
            get {
                return this.PortfolioIdField;
            }
            set {
                if ((object.ReferenceEquals(this.PortfolioIdField, value) != true)) {
                    this.PortfolioIdField = value;
                    this.RaisePropertyChanged("PortfolioId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> PortfolioWeight {
            get {
                return this.PortfolioWeightField;
            }
            set {
                if ((this.PortfolioWeightField.Equals(value) != true)) {
                    this.PortfolioWeightField = value;
                    this.RaisePropertyChanged("PortfolioWeight");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MarketSnapshotSelectionData", Namespace="http://schemas.datacontract.org/2004/07/GreenField.DAL", IsReference=true)]
    public partial class MarketSnapshotSelectionData : GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.ComplexObject {
        
        private string SnapshotNameField;
        
        private int SnapshotPreferenceIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SnapshotName {
            get {
                return this.SnapshotNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SnapshotNameField, value) != true)) {
                    this.SnapshotNameField = value;
                    this.RaisePropertyChanged("SnapshotName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SnapshotPreferenceId {
            get {
                return this.SnapshotPreferenceIdField;
            }
            set {
                if ((this.SnapshotPreferenceIdField.Equals(value) != true)) {
                    this.SnapshotPreferenceIdField = value;
                    this.RaisePropertyChanged("SnapshotPreferenceId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StructuralObject", Namespace="http://schemas.datacontract.org/2004/07/System.Data.Objects.DataClasses", IsReference=true)]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.ComplexObject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketSnapshotPreference))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketSnapshotSelectionData))]
    public partial class StructuralObject : object, System.ComponentModel.INotifyPropertyChanged {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ComplexObject", Namespace="http://schemas.datacontract.org/2004/07/System.Data.Objects.DataClasses", IsReference=true)]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketSnapshotPreference))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketSnapshotSelectionData))]
    public partial class ComplexObject : GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.StructuralObject {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MarketSnapshotPreference", Namespace="http://schemas.datacontract.org/2004/07/GreenField.DAL", IsReference=true)]
    public partial class MarketSnapshotPreference : GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.ComplexObject {
        
        private string EntityNameField;
        
        private System.Nullable<int> EntityOrderField;
        
        private System.Nullable<int> EntityPreferenceIdField;
        
        private string EntityReturnTypeField;
        
        private string GroupNameField;
        
        private int GroupPreferenceIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EntityName {
            get {
                return this.EntityNameField;
            }
            set {
                if ((object.ReferenceEquals(this.EntityNameField, value) != true)) {
                    this.EntityNameField = value;
                    this.RaisePropertyChanged("EntityName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> EntityOrder {
            get {
                return this.EntityOrderField;
            }
            set {
                if ((this.EntityOrderField.Equals(value) != true)) {
                    this.EntityOrderField = value;
                    this.RaisePropertyChanged("EntityOrder");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> EntityPreferenceId {
            get {
                return this.EntityPreferenceIdField;
            }
            set {
                if ((this.EntityPreferenceIdField.Equals(value) != true)) {
                    this.EntityPreferenceIdField = value;
                    this.RaisePropertyChanged("EntityPreferenceId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EntityReturnType {
            get {
                return this.EntityReturnTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.EntityReturnTypeField, value) != true)) {
                    this.EntityReturnTypeField = value;
                    this.RaisePropertyChanged("EntityReturnType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GroupName {
            get {
                return this.GroupNameField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupNameField, value) != true)) {
                    this.GroupNameField = value;
                    this.RaisePropertyChanged("GroupName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GroupPreferenceID {
            get {
                return this.GroupPreferenceIDField;
            }
            set {
                if ((this.GroupPreferenceIDField.Equals(value) != true)) {
                    this.GroupPreferenceIDField = value;
                    this.RaisePropertyChanged("GroupPreferenceID");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MarketPerformanceSnapshotData", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.DataContracts")]
    public partial class MarketPerformanceSnapshotData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Nullable<double> DateToDateReturnField;
        
        private System.Nullable<double> LastYearReturnField;
        
        private GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketSnapshotPreference MarketSnapshotPreferenceInfoField;
        
        private System.Nullable<double> MonthToDateReturnField;
        
        private System.Nullable<double> QuarterToDateReturnField;
        
        private System.Nullable<double> SecondLastYearReturnField;
        
        private System.Nullable<double> ThirdLastYearReturnField;
        
        private System.Nullable<double> WeekToDateReturnField;
        
        private System.Nullable<double> YearToDateReturnField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> DateToDateReturn {
            get {
                return this.DateToDateReturnField;
            }
            set {
                if ((this.DateToDateReturnField.Equals(value) != true)) {
                    this.DateToDateReturnField = value;
                    this.RaisePropertyChanged("DateToDateReturn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> LastYearReturn {
            get {
                return this.LastYearReturnField;
            }
            set {
                if ((this.LastYearReturnField.Equals(value) != true)) {
                    this.LastYearReturnField = value;
                    this.RaisePropertyChanged("LastYearReturn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketSnapshotPreference MarketSnapshotPreferenceInfo {
            get {
                return this.MarketSnapshotPreferenceInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.MarketSnapshotPreferenceInfoField, value) != true)) {
                    this.MarketSnapshotPreferenceInfoField = value;
                    this.RaisePropertyChanged("MarketSnapshotPreferenceInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> MonthToDateReturn {
            get {
                return this.MonthToDateReturnField;
            }
            set {
                if ((this.MonthToDateReturnField.Equals(value) != true)) {
                    this.MonthToDateReturnField = value;
                    this.RaisePropertyChanged("MonthToDateReturn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> QuarterToDateReturn {
            get {
                return this.QuarterToDateReturnField;
            }
            set {
                if ((this.QuarterToDateReturnField.Equals(value) != true)) {
                    this.QuarterToDateReturnField = value;
                    this.RaisePropertyChanged("QuarterToDateReturn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> SecondLastYearReturn {
            get {
                return this.SecondLastYearReturnField;
            }
            set {
                if ((this.SecondLastYearReturnField.Equals(value) != true)) {
                    this.SecondLastYearReturnField = value;
                    this.RaisePropertyChanged("SecondLastYearReturn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> ThirdLastYearReturn {
            get {
                return this.ThirdLastYearReturnField;
            }
            set {
                if ((this.ThirdLastYearReturnField.Equals(value) != true)) {
                    this.ThirdLastYearReturnField = value;
                    this.RaisePropertyChanged("ThirdLastYearReturn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> WeekToDateReturn {
            get {
                return this.WeekToDateReturnField;
            }
            set {
                if ((this.WeekToDateReturnField.Equals(value) != true)) {
                    this.WeekToDateReturnField = value;
                    this.RaisePropertyChanged("WeekToDateReturn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> YearToDateReturn {
            get {
                return this.YearToDateReturnField;
            }
            set {
                if ((this.YearToDateReturnField.Equals(value) != true)) {
                    this.YearToDateReturnField = value;
                    this.RaisePropertyChanged("YearToDateReturn");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PortfolioRiskReturnData", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.DataContracts")]
    public partial class PortfolioRiskReturnData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string BenchMarkValueField;
        
        private string DataPointNameField;
        
        private string PortfolioValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BenchMarkValue {
            get {
                return this.BenchMarkValueField;
            }
            set {
                if ((object.ReferenceEquals(this.BenchMarkValueField, value) != true)) {
                    this.BenchMarkValueField = value;
                    this.RaisePropertyChanged("BenchMarkValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DataPointName {
            get {
                return this.DataPointNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DataPointNameField, value) != true)) {
                    this.DataPointNameField = value;
                    this.RaisePropertyChanged("DataPointName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PortfolioValue {
            get {
                return this.PortfolioValueField;
            }
            set {
                if ((object.ReferenceEquals(this.PortfolioValueField, value) != true)) {
                    this.PortfolioValueField = value;
                    this.RaisePropertyChanged("PortfolioValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HeatMapData", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.DataContracts")]
    public partial class HeatMapData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string CountryIDField;
        
        private GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PerformanceType CountryPerformanceField;
        
        private System.Nullable<double> CountryYTDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CountryID {
            get {
                return this.CountryIDField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryIDField, value) != true)) {
                    this.CountryIDField = value;
                    this.RaisePropertyChanged("CountryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PerformanceType CountryPerformance {
            get {
                return this.CountryPerformanceField;
            }
            set {
                if ((this.CountryPerformanceField.Equals(value) != true)) {
                    this.CountryPerformanceField = value;
                    this.RaisePropertyChanged("CountryPerformance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> CountryYTD {
            get {
                return this.CountryYTDField;
            }
            set {
                if ((this.CountryYTDField.Equals(value) != true)) {
                    this.CountryYTDField = value;
                    this.RaisePropertyChanged("CountryYTD");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PerformanceType", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.DataContracts")]
    public enum PerformanceType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NO_RELATION = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UNDER_PERFORMING = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FLAT_PERFORMING = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OVER_PERFORMING = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RelativePerformanceSectorData", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.DataContracts")]
    public partial class RelativePerformanceSectorData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int SectorIDField;
        
        private string SectorNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SectorID {
            get {
                return this.SectorIDField;
            }
            set {
                if ((this.SectorIDField.Equals(value) != true)) {
                    this.SectorIDField = value;
                    this.RaisePropertyChanged("SectorID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SectorName {
            get {
                return this.SectorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SectorNameField, value) != true)) {
                    this.SectorNameField = value;
                    this.RaisePropertyChanged("SectorName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RelativePerformanceActivePositionData", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.DataContracts")]
    public partial class RelativePerformanceActivePositionData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Nullable<double> ActivePositionField;
        
        private System.Nullable<double> BenchmarkWeightField;
        
        private string EntityField;
        
        private System.Nullable<double> FundWeightField;
        
        private System.Nullable<double> MarketValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> ActivePosition {
            get {
                return this.ActivePositionField;
            }
            set {
                if ((this.ActivePositionField.Equals(value) != true)) {
                    this.ActivePositionField = value;
                    this.RaisePropertyChanged("ActivePosition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> BenchmarkWeight {
            get {
                return this.BenchmarkWeightField;
            }
            set {
                if ((this.BenchmarkWeightField.Equals(value) != true)) {
                    this.BenchmarkWeightField = value;
                    this.RaisePropertyChanged("BenchmarkWeight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Entity {
            get {
                return this.EntityField;
            }
            set {
                if ((object.ReferenceEquals(this.EntityField, value) != true)) {
                    this.EntityField = value;
                    this.RaisePropertyChanged("Entity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> FundWeight {
            get {
                return this.FundWeightField;
            }
            set {
                if ((this.FundWeightField.Equals(value) != true)) {
                    this.FundWeightField = value;
                    this.RaisePropertyChanged("FundWeight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> MarketValue {
            get {
                return this.MarketValueField;
            }
            set {
                if ((this.MarketValueField.Equals(value) != true)) {
                    this.MarketValueField = value;
                    this.RaisePropertyChanged("MarketValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RelativePerformanceSecurityData", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.DataContracts")]
    public partial class RelativePerformanceSecurityData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private double SecurityActivePositionField;
        
        private double SecurityAlphaField;
        
        private string SecurityCountryIDField;
        
        private string SecurityNameField;
        
        private string SecuritySectorNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double SecurityActivePosition {
            get {
                return this.SecurityActivePositionField;
            }
            set {
                if ((this.SecurityActivePositionField.Equals(value) != true)) {
                    this.SecurityActivePositionField = value;
                    this.RaisePropertyChanged("SecurityActivePosition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double SecurityAlpha {
            get {
                return this.SecurityAlphaField;
            }
            set {
                if ((this.SecurityAlphaField.Equals(value) != true)) {
                    this.SecurityAlphaField = value;
                    this.RaisePropertyChanged("SecurityAlpha");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SecurityCountryID {
            get {
                return this.SecurityCountryIDField;
            }
            set {
                if ((object.ReferenceEquals(this.SecurityCountryIDField, value) != true)) {
                    this.SecurityCountryIDField = value;
                    this.RaisePropertyChanged("SecurityCountryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SecurityName {
            get {
                return this.SecurityNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SecurityNameField, value) != true)) {
                    this.SecurityNameField = value;
                    this.RaisePropertyChanged("SecurityName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SecuritySectorName {
            get {
                return this.SecuritySectorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SecuritySectorNameField, value) != true)) {
                    this.SecuritySectorNameField = value;
                    this.RaisePropertyChanged("SecuritySectorName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RelativePerformanceData", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.DataContracts")]
    public partial class RelativePerformanceData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Nullable<double> AggregateCountryActivePositionField;
        
        private System.Nullable<double> AggregateCountryAlphaField;
        
        private System.Nullable<double> AggregateCountryBenchmarkShareField;
        
        private System.Nullable<double> AggregateCountryPortfolioShareField;
        
        private string CountryIDField;
        
        private System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceCountrySpecificData> RelativePerformanceCountrySpecificInfoField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> AggregateCountryActivePosition {
            get {
                return this.AggregateCountryActivePositionField;
            }
            set {
                if ((this.AggregateCountryActivePositionField.Equals(value) != true)) {
                    this.AggregateCountryActivePositionField = value;
                    this.RaisePropertyChanged("AggregateCountryActivePosition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> AggregateCountryAlpha {
            get {
                return this.AggregateCountryAlphaField;
            }
            set {
                if ((this.AggregateCountryAlphaField.Equals(value) != true)) {
                    this.AggregateCountryAlphaField = value;
                    this.RaisePropertyChanged("AggregateCountryAlpha");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> AggregateCountryBenchmarkShare {
            get {
                return this.AggregateCountryBenchmarkShareField;
            }
            set {
                if ((this.AggregateCountryBenchmarkShareField.Equals(value) != true)) {
                    this.AggregateCountryBenchmarkShareField = value;
                    this.RaisePropertyChanged("AggregateCountryBenchmarkShare");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> AggregateCountryPortfolioShare {
            get {
                return this.AggregateCountryPortfolioShareField;
            }
            set {
                if ((this.AggregateCountryPortfolioShareField.Equals(value) != true)) {
                    this.AggregateCountryPortfolioShareField = value;
                    this.RaisePropertyChanged("AggregateCountryPortfolioShare");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CountryID {
            get {
                return this.CountryIDField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryIDField, value) != true)) {
                    this.CountryIDField = value;
                    this.RaisePropertyChanged("CountryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceCountrySpecificData> RelativePerformanceCountrySpecificInfo {
            get {
                return this.RelativePerformanceCountrySpecificInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.RelativePerformanceCountrySpecificInfoField, value) != true)) {
                    this.RelativePerformanceCountrySpecificInfoField = value;
                    this.RaisePropertyChanged("RelativePerformanceCountrySpecificInfo");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RelativePerformanceCountrySpecificData", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.DataContracts")]
    public partial class RelativePerformanceCountrySpecificData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Nullable<double> ActivePositionField;
        
        private System.Nullable<double> AlphaField;
        
        private System.Nullable<double> BenchmarkShareField;
        
        private System.Nullable<double> PortfolioShareField;
        
        private int SectorIDField;
        
        private string SectorNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> ActivePosition {
            get {
                return this.ActivePositionField;
            }
            set {
                if ((this.ActivePositionField.Equals(value) != true)) {
                    this.ActivePositionField = value;
                    this.RaisePropertyChanged("ActivePosition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> Alpha {
            get {
                return this.AlphaField;
            }
            set {
                if ((this.AlphaField.Equals(value) != true)) {
                    this.AlphaField = value;
                    this.RaisePropertyChanged("Alpha");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> BenchmarkShare {
            get {
                return this.BenchmarkShareField;
            }
            set {
                if ((this.BenchmarkShareField.Equals(value) != true)) {
                    this.BenchmarkShareField = value;
                    this.RaisePropertyChanged("BenchmarkShare");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> PortfolioShare {
            get {
                return this.PortfolioShareField;
            }
            set {
                if ((this.PortfolioShareField.Equals(value) != true)) {
                    this.PortfolioShareField = value;
                    this.RaisePropertyChanged("PortfolioShare");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SectorID {
            get {
                return this.SectorIDField;
            }
            set {
                if ((this.SectorIDField.Equals(value) != true)) {
                    this.SectorIDField = value;
                    this.RaisePropertyChanged("SectorID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SectorName {
            get {
                return this.SectorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SectorNameField, value) != true)) {
                    this.SectorNameField = value;
                    this.RaisePropertyChanged("SectorName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PerformanceGraphData", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.DataContracts")]
    public partial class PerformanceGraphData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string BENCHMARK_IDField;
        
        private double BENCHMARK_PERFORMANCEField;
        
        private System.DateTime EFFECTIVE_DATEField;
        
        private double FIFTH_YEARField;
        
        private double FIRST_YEARField;
        
        private double MTDField;
        
        private string PORTFOLIO_IDField;
        
        private double PORTFOLIO_PERFORMANCEField;
        
        private double QTDField;
        
        private double TENTH_YEARField;
        
        private double THIRD_YEARField;
        
        private double YTDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BENCHMARK_ID {
            get {
                return this.BENCHMARK_IDField;
            }
            set {
                if ((object.ReferenceEquals(this.BENCHMARK_IDField, value) != true)) {
                    this.BENCHMARK_IDField = value;
                    this.RaisePropertyChanged("BENCHMARK_ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double BENCHMARK_PERFORMANCE {
            get {
                return this.BENCHMARK_PERFORMANCEField;
            }
            set {
                if ((this.BENCHMARK_PERFORMANCEField.Equals(value) != true)) {
                    this.BENCHMARK_PERFORMANCEField = value;
                    this.RaisePropertyChanged("BENCHMARK_PERFORMANCE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EFFECTIVE_DATE {
            get {
                return this.EFFECTIVE_DATEField;
            }
            set {
                if ((this.EFFECTIVE_DATEField.Equals(value) != true)) {
                    this.EFFECTIVE_DATEField = value;
                    this.RaisePropertyChanged("EFFECTIVE_DATE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double FIFTH_YEAR {
            get {
                return this.FIFTH_YEARField;
            }
            set {
                if ((this.FIFTH_YEARField.Equals(value) != true)) {
                    this.FIFTH_YEARField = value;
                    this.RaisePropertyChanged("FIFTH_YEAR");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double FIRST_YEAR {
            get {
                return this.FIRST_YEARField;
            }
            set {
                if ((this.FIRST_YEARField.Equals(value) != true)) {
                    this.FIRST_YEARField = value;
                    this.RaisePropertyChanged("FIRST_YEAR");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MTD {
            get {
                return this.MTDField;
            }
            set {
                if ((this.MTDField.Equals(value) != true)) {
                    this.MTDField = value;
                    this.RaisePropertyChanged("MTD");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PORTFOLIO_ID {
            get {
                return this.PORTFOLIO_IDField;
            }
            set {
                if ((object.ReferenceEquals(this.PORTFOLIO_IDField, value) != true)) {
                    this.PORTFOLIO_IDField = value;
                    this.RaisePropertyChanged("PORTFOLIO_ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double PORTFOLIO_PERFORMANCE {
            get {
                return this.PORTFOLIO_PERFORMANCEField;
            }
            set {
                if ((this.PORTFOLIO_PERFORMANCEField.Equals(value) != true)) {
                    this.PORTFOLIO_PERFORMANCEField = value;
                    this.RaisePropertyChanged("PORTFOLIO_PERFORMANCE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double QTD {
            get {
                return this.QTDField;
            }
            set {
                if ((this.QTDField.Equals(value) != true)) {
                    this.QTDField = value;
                    this.RaisePropertyChanged("QTD");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double TENTH_YEAR {
            get {
                return this.TENTH_YEARField;
            }
            set {
                if ((this.TENTH_YEARField.Equals(value) != true)) {
                    this.TENTH_YEARField = value;
                    this.RaisePropertyChanged("TENTH_YEAR");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double THIRD_YEAR {
            get {
                return this.THIRD_YEARField;
            }
            set {
                if ((this.THIRD_YEARField.Equals(value) != true)) {
                    this.THIRD_YEARField = value;
                    this.RaisePropertyChanged("THIRD_YEAR");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double YTD {
            get {
                return this.YTDField;
            }
            set {
                if ((this.YTDField.Equals(value) != true)) {
                    this.YTDField = value;
                    this.RaisePropertyChanged("YTD");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PerformanceGridData", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.DataContracts")]
    public partial class PerformanceGridData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private double FIFTH_YEARField;
        
        private double FIRST_YEARField;
        
        private double MTDField;
        
        private double QTDField;
        
        private double TENTH_YEARField;
        
        private double THIRD_YEARField;
        
        private double YTDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double FIFTH_YEAR {
            get {
                return this.FIFTH_YEARField;
            }
            set {
                if ((this.FIFTH_YEARField.Equals(value) != true)) {
                    this.FIFTH_YEARField = value;
                    this.RaisePropertyChanged("FIFTH_YEAR");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double FIRST_YEAR {
            get {
                return this.FIRST_YEARField;
            }
            set {
                if ((this.FIRST_YEARField.Equals(value) != true)) {
                    this.FIRST_YEARField = value;
                    this.RaisePropertyChanged("FIRST_YEAR");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MTD {
            get {
                return this.MTDField;
            }
            set {
                if ((this.MTDField.Equals(value) != true)) {
                    this.MTDField = value;
                    this.RaisePropertyChanged("MTD");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double QTD {
            get {
                return this.QTDField;
            }
            set {
                if ((this.QTDField.Equals(value) != true)) {
                    this.QTDField = value;
                    this.RaisePropertyChanged("QTD");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double TENTH_YEAR {
            get {
                return this.TENTH_YEARField;
            }
            set {
                if ((this.TENTH_YEARField.Equals(value) != true)) {
                    this.TENTH_YEARField = value;
                    this.RaisePropertyChanged("TENTH_YEAR");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double THIRD_YEAR {
            get {
                return this.THIRD_YEARField;
            }
            set {
                if ((this.THIRD_YEARField.Equals(value) != true)) {
                    this.THIRD_YEARField = value;
                    this.RaisePropertyChanged("THIRD_YEAR");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double YTD {
            get {
                return this.YTDField;
            }
            set {
                if ((this.YTDField.Equals(value) != true)) {
                    this.YTDField = value;
                    this.RaisePropertyChanged("YTD");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AttributionData", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.DataContracts")]
    public partial class AttributionData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private double ASSET_ALLOCATIONField;
        
        private double BENCHMARK_RETURNField;
        
        private double BENCHMARK_WEIGHTField;
        
        private string COUNTRY_IDField;
        
        private string COUNTRY_NAMEField;
        
        private double PORTFOLIO_RETURNField;
        
        private double PORTFOLIO_WEIGHTField;
        
        private double STOCK_SELECTION_TOTALField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ASSET_ALLOCATION {
            get {
                return this.ASSET_ALLOCATIONField;
            }
            set {
                if ((this.ASSET_ALLOCATIONField.Equals(value) != true)) {
                    this.ASSET_ALLOCATIONField = value;
                    this.RaisePropertyChanged("ASSET_ALLOCATION");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double BENCHMARK_RETURN {
            get {
                return this.BENCHMARK_RETURNField;
            }
            set {
                if ((this.BENCHMARK_RETURNField.Equals(value) != true)) {
                    this.BENCHMARK_RETURNField = value;
                    this.RaisePropertyChanged("BENCHMARK_RETURN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double BENCHMARK_WEIGHT {
            get {
                return this.BENCHMARK_WEIGHTField;
            }
            set {
                if ((this.BENCHMARK_WEIGHTField.Equals(value) != true)) {
                    this.BENCHMARK_WEIGHTField = value;
                    this.RaisePropertyChanged("BENCHMARK_WEIGHT");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string COUNTRY_ID {
            get {
                return this.COUNTRY_IDField;
            }
            set {
                if ((object.ReferenceEquals(this.COUNTRY_IDField, value) != true)) {
                    this.COUNTRY_IDField = value;
                    this.RaisePropertyChanged("COUNTRY_ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string COUNTRY_NAME {
            get {
                return this.COUNTRY_NAMEField;
            }
            set {
                if ((object.ReferenceEquals(this.COUNTRY_NAMEField, value) != true)) {
                    this.COUNTRY_NAMEField = value;
                    this.RaisePropertyChanged("COUNTRY_NAME");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double PORTFOLIO_RETURN {
            get {
                return this.PORTFOLIO_RETURNField;
            }
            set {
                if ((this.PORTFOLIO_RETURNField.Equals(value) != true)) {
                    this.PORTFOLIO_RETURNField = value;
                    this.RaisePropertyChanged("PORTFOLIO_RETURN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double PORTFOLIO_WEIGHT {
            get {
                return this.PORTFOLIO_WEIGHTField;
            }
            set {
                if ((this.PORTFOLIO_WEIGHTField.Equals(value) != true)) {
                    this.PORTFOLIO_WEIGHTField = value;
                    this.RaisePropertyChanged("PORTFOLIO_WEIGHT");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double STOCK_SELECTION_TOTAL {
            get {
                return this.STOCK_SELECTION_TOTALField;
            }
            set {
                if ((this.STOCK_SELECTION_TOTALField.Equals(value) != true)) {
                    this.STOCK_SELECTION_TOTALField = value;
                    this.RaisePropertyChanged("STOCK_SELECTION_TOTAL");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations")]
    public interface BenchmarkHoldingsPerformanceOperations {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/Temp", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/TempResponse")]
        System.IAsyncResult BeginTemp(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PeriodSelectionData data, System.AsyncCallback callback, object asyncState);
        
        void EndTemp(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrievePortfolioSelect" +
            "ionData", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrievePortfolioSelect" +
            "ionDataResponse")]
        System.IAsyncResult BeginRetrievePortfolioSelectionData(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData> EndRetrievePortfolioSelectionData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveBenchmarkSelect" +
            "ionData", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveBenchmarkSelect" +
            "ionDataResponse")]
        System.IAsyncResult BeginRetrieveBenchmarkSelectionData(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData> EndRetrieveBenchmarkSelectionData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveSectorBreakdown" +
            "Data", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveSectorBreakdown" +
            "DataResponse")]
        System.IAsyncResult BeginRetrieveSectorBreakdownData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.SectorBreakdownData> EndRetrieveSectorBreakdownData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveRegionBreakdown" +
            "Data", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveRegionBreakdown" +
            "DataResponse")]
        System.IAsyncResult BeginRetrieveRegionBreakdownData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RegionBreakdownData> EndRetrieveRegionBreakdownData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveTopHoldingsData" +
            "", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveTopHoldingsData" +
            "Response")]
        System.IAsyncResult BeginRetrieveTopHoldingsData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.TopHoldingsData> EndRetrieveTopHoldingsData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveIndexConstituen" +
            "tsData", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveIndexConstituen" +
            "tsDataResponse")]
        System.IAsyncResult BeginRetrieveIndexConstituentsData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.IndexConstituentsData> EndRetrieveIndexConstituentsData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveValuesForFilter" +
            "s", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveValuesForFilter" +
            "sResponse")]
        System.IAsyncResult BeginRetrieveValuesForFilters(string filterType, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<string> EndRetrieveValuesForFilters(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrievePortfolioDetail" +
            "sData", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrievePortfolioDetail" +
            "sDataResponse")]
        System.IAsyncResult BeginRetrievePortfolioDetailsData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData objPortfolioIdentifier, System.DateTime objSelectedDate, bool objGetBenchmark, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioDetailsData> EndRetrievePortfolioDetailsData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveBenchmarkChartR" +
            "eturnData", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveBenchmarkChartR" +
            "eturnDataResponse")]
        System.IAsyncResult BeginRetrieveBenchmarkChartReturnData(System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData> objBenchmarkIdentifier, System.DateTime objEffectiveDate, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkChartReturnData> EndRetrieveBenchmarkChartReturnData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveBenchmarkGridRe" +
            "turnData", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveBenchmarkGridRe" +
            "turnDataResponse")]
        System.IAsyncResult BeginRetrieveBenchmarkGridReturnData(System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData> objBenchmarkIdentifier, System.DateTime objEffectiveDate, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkGridReturnData> EndRetrieveBenchmarkGridReturnData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveHoldingsPercent" +
            "ageData", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveHoldingsPercent" +
            "ageDataResponse")]
        System.IAsyncResult BeginRetrieveHoldingsPercentageData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string filterType, string filterValue, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.HoldingsPercentageData> EndRetrieveHoldingsPercentageData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveHoldingsPercent" +
            "ageDataForRegion", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveHoldingsPercent" +
            "ageDataForRegionResponse")]
        System.IAsyncResult BeginRetrieveHoldingsPercentageDataForRegion(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string filterType, string filterValue, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.HoldingsPercentageData> EndRetrieveHoldingsPercentageDataForRegion(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveTopBenchmarkSec" +
            "uritiesData", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveTopBenchmarkSec" +
            "uritiesDataResponse")]
        System.IAsyncResult BeginRetrieveTopBenchmarkSecuritiesData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.TopBenchmarkSecuritiesData> EndRetrieveTopBenchmarkSecuritiesData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveMarketCapitaliz" +
            "ationData", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveMarketCapitaliz" +
            "ationDataResponse")]
        System.IAsyncResult BeginRetrieveMarketCapitalizationData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState);
        
        GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketCapitalizationData EndRetrieveMarketCapitalizationData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveAssetAllocation" +
            "Data", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveAssetAllocation" +
            "DataResponse")]
        System.IAsyncResult BeginRetrieveAssetAllocationData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.AssetAllocationData> EndRetrieveAssetAllocationData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveMarketSnapshotS" +
            "electionData", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveMarketSnapshotS" +
            "electionDataResponse")]
        System.IAsyncResult BeginRetrieveMarketSnapshotSelectionData(string userName, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketSnapshotSelectionData> EndRetrieveMarketSnapshotSelectionData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveMarketSnapshotP" +
            "reference", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveMarketSnapshotP" +
            "referenceResponse")]
        System.IAsyncResult BeginRetrieveMarketSnapshotPreference(string userName, string snapshotName, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketSnapshotPreference> EndRetrieveMarketSnapshotPreference(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveMarketPerforman" +
            "ceSnapshotData", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveMarketPerforman" +
            "ceSnapshotDataResponse")]
        System.IAsyncResult BeginRetrieveMarketPerformanceSnapshotData(System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketSnapshotPreference> marketSnapshotPreference, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketPerformanceSnapshotData> EndRetrieveMarketPerformanceSnapshotData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/AddMarketSnapshotPerfor" +
            "mance", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/AddMarketSnapshotPerfor" +
            "manceResponse")]
        System.IAsyncResult BeginAddMarketSnapshotPerformance(string userId, string snapshotName, System.AsyncCallback callback, object asyncState);
        
        bool EndAddMarketSnapshotPerformance(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/UpdateMarketSnapshotPer" +
            "formance", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/UpdateMarketSnapshotPer" +
            "formanceResponse")]
        System.IAsyncResult BeginUpdateMarketSnapshotPerformance(string userId, string snapshotName, int snapshotPreferenceId, System.AsyncCallback callback, object asyncState);
        
        bool EndUpdateMarketSnapshotPerformance(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/AddMarketSnapshotGroupP" +
            "reference", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/AddMarketSnapshotGroupP" +
            "referenceResponse")]
        System.IAsyncResult BeginAddMarketSnapshotGroupPreference(int snapshotPreferenceId, string groupName, System.AsyncCallback callback, object asyncState);
        
        bool EndAddMarketSnapshotGroupPreference(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RemoveMarketSnapshotGro" +
            "upPreference", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RemoveMarketSnapshotGro" +
            "upPreferenceResponse")]
        System.IAsyncResult BeginRemoveMarketSnapshotGroupPreference(int groupPreferenceId, System.AsyncCallback callback, object asyncState);
        
        bool EndRemoveMarketSnapshotGroupPreference(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/AddMarketSnapshotEntity" +
            "Preference", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/AddMarketSnapshotEntity" +
            "PreferenceResponse")]
        System.IAsyncResult BeginAddMarketSnapshotEntityPreference(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketSnapshotPreference marketSnapshotPreference, System.AsyncCallback callback, object asyncState);
        
        bool EndAddMarketSnapshotEntityPreference(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RemoveMarketSnapshotEnt" +
            "ityPreference", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RemoveMarketSnapshotEnt" +
            "ityPreferenceResponse")]
        System.IAsyncResult BeginRemoveMarketSnapshotEntityPreference(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketSnapshotPreference marketSnapshotPreference, System.AsyncCallback callback, object asyncState);
        
        bool EndRemoveMarketSnapshotEntityPreference(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrievePortfolioRiskRe" +
            "turnData", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrievePortfolioRiskRe" +
            "turnDataResponse")]
        System.IAsyncResult BeginRetrievePortfolioRiskReturnData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioRiskReturnData> EndRetrievePortfolioRiskReturnData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveHeatMapData", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveHeatMapDataResp" +
            "onse")]
        System.IAsyncResult BeginRetrieveHeatMapData(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.HeatMapData> EndRetrieveHeatMapData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveRelativePerform" +
            "anceSectorData", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveRelativePerform" +
            "anceSectorDataResponse")]
        System.IAsyncResult BeginRetrieveRelativePerformanceSectorData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceSectorData> EndRetrieveRelativePerformanceSectorData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveRelativePerform" +
            "anceCountryActivePositionData", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveRelativePerform" +
            "anceCountryActivePositionDataResponse")]
        System.IAsyncResult BeginRetrieveRelativePerformanceCountryActivePositionData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate, string countryID, System.Nullable<int> sectorID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceActivePositionData> EndRetrieveRelativePerformanceCountryActivePositionData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveRelativePerform" +
            "anceSectorActivePositionData", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveRelativePerform" +
            "anceSectorActivePositionDataResponse")]
        System.IAsyncResult BeginRetrieveRelativePerformanceSectorActivePositionData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate, string countryID, System.Nullable<int> sectorID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceActivePositionData> EndRetrieveRelativePerformanceSectorActivePositionData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveRelativePerform" +
            "anceSecurityActivePositionData", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveRelativePerform" +
            "anceSecurityActivePositionDataResponse")]
        System.IAsyncResult BeginRetrieveRelativePerformanceSecurityActivePositionData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate, string countryID, System.Nullable<int> sectorID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceActivePositionData> EndRetrieveRelativePerformanceSecurityActivePositionData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveRelativePerform" +
            "anceSecurityData", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveRelativePerform" +
            "anceSecurityDataResponse")]
        System.IAsyncResult BeginRetrieveRelativePerformanceSecurityData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate, string countryID, System.Nullable<int> sectorID, int order, System.Nullable<int> maxRecords, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceSecurityData> EndRetrieveRelativePerformanceSecurityData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveRelativePerform" +
            "anceData", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveRelativePerform" +
            "anceDataResponse")]
        System.IAsyncResult BeginRetrieveRelativePerformanceData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceData> EndRetrieveRelativePerformanceData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrievePerformanceGrap" +
            "hData", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrievePerformanceGrap" +
            "hDataResponse")]
        System.IAsyncResult BeginRetrievePerformanceGraphData(string nameOfFund, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PerformanceGraphData> EndRetrievePerformanceGraphData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrievePerformanceGrid" +
            "Data", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrievePerformanceGrid" +
            "DataResponse")]
        System.IAsyncResult BeginRetrievePerformanceGridData(string nameOfFund, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PerformanceGridData> EndRetrievePerformanceGridData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveAttributionData" +
            "", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveAttributionData" +
            "Response")]
        System.IAsyncResult BeginRetrieveAttributionData(string nameOfFund, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.AttributionData> EndRetrieveAttributionData(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface BenchmarkHoldingsPerformanceOperationsChannel : GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrievePortfolioSelectionDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrievePortfolioSelectionDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveBenchmarkSelectionDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveBenchmarkSelectionDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveSectorBreakdownDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveSectorBreakdownDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.SectorBreakdownData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.SectorBreakdownData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveRegionBreakdownDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveRegionBreakdownDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RegionBreakdownData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RegionBreakdownData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveTopHoldingsDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveTopHoldingsDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.TopHoldingsData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.TopHoldingsData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveIndexConstituentsDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveIndexConstituentsDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.IndexConstituentsData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.IndexConstituentsData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveValuesForFiltersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveValuesForFiltersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrievePortfolioDetailsDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrievePortfolioDetailsDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioDetailsData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioDetailsData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveBenchmarkChartReturnDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveBenchmarkChartReturnDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkChartReturnData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkChartReturnData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveBenchmarkGridReturnDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveBenchmarkGridReturnDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkGridReturnData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkGridReturnData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveHoldingsPercentageDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveHoldingsPercentageDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.HoldingsPercentageData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.HoldingsPercentageData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveHoldingsPercentageDataForRegionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveHoldingsPercentageDataForRegionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.HoldingsPercentageData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.HoldingsPercentageData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveTopBenchmarkSecuritiesDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveTopBenchmarkSecuritiesDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.TopBenchmarkSecuritiesData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.TopBenchmarkSecuritiesData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveMarketCapitalizationDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveMarketCapitalizationDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketCapitalizationData Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketCapitalizationData)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveAssetAllocationDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveAssetAllocationDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.AssetAllocationData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.AssetAllocationData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveMarketSnapshotSelectionDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveMarketSnapshotSelectionDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketSnapshotSelectionData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketSnapshotSelectionData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveMarketSnapshotPreferenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveMarketSnapshotPreferenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketSnapshotPreference> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketSnapshotPreference>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveMarketPerformanceSnapshotDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveMarketPerformanceSnapshotDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketPerformanceSnapshotData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketPerformanceSnapshotData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddMarketSnapshotPerformanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddMarketSnapshotPerformanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateMarketSnapshotPerformanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateMarketSnapshotPerformanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddMarketSnapshotGroupPreferenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddMarketSnapshotGroupPreferenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RemoveMarketSnapshotGroupPreferenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RemoveMarketSnapshotGroupPreferenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddMarketSnapshotEntityPreferenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddMarketSnapshotEntityPreferenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RemoveMarketSnapshotEntityPreferenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RemoveMarketSnapshotEntityPreferenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrievePortfolioRiskReturnDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrievePortfolioRiskReturnDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioRiskReturnData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioRiskReturnData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveHeatMapDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveHeatMapDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.HeatMapData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.HeatMapData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveRelativePerformanceSectorDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveRelativePerformanceSectorDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceSectorData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceSectorData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveRelativePerformanceCountryActivePositionDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveRelativePerformanceCountryActivePositionDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceActivePositionData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceActivePositionData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveRelativePerformanceSectorActivePositionDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveRelativePerformanceSectorActivePositionDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceActivePositionData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceActivePositionData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveRelativePerformanceSecurityActivePositionDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveRelativePerformanceSecurityActivePositionDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceActivePositionData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceActivePositionData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveRelativePerformanceSecurityDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveRelativePerformanceSecurityDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceSecurityData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceSecurityData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveRelativePerformanceDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveRelativePerformanceDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrievePerformanceGraphDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrievePerformanceGraphDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PerformanceGraphData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PerformanceGraphData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrievePerformanceGridDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrievePerformanceGridDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PerformanceGridData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PerformanceGridData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveAttributionDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveAttributionDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.AttributionData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.AttributionData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BenchmarkHoldingsPerformanceOperationsClient : System.ServiceModel.ClientBase<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations>, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations {
        
        private BeginOperationDelegate onBeginTempDelegate;
        
        private EndOperationDelegate onEndTempDelegate;
        
        private System.Threading.SendOrPostCallback onTempCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrievePortfolioSelectionDataDelegate;
        
        private EndOperationDelegate onEndRetrievePortfolioSelectionDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrievePortfolioSelectionDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveBenchmarkSelectionDataDelegate;
        
        private EndOperationDelegate onEndRetrieveBenchmarkSelectionDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveBenchmarkSelectionDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveSectorBreakdownDataDelegate;
        
        private EndOperationDelegate onEndRetrieveSectorBreakdownDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveSectorBreakdownDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveRegionBreakdownDataDelegate;
        
        private EndOperationDelegate onEndRetrieveRegionBreakdownDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveRegionBreakdownDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveTopHoldingsDataDelegate;
        
        private EndOperationDelegate onEndRetrieveTopHoldingsDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveTopHoldingsDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveIndexConstituentsDataDelegate;
        
        private EndOperationDelegate onEndRetrieveIndexConstituentsDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveIndexConstituentsDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveValuesForFiltersDelegate;
        
        private EndOperationDelegate onEndRetrieveValuesForFiltersDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveValuesForFiltersCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrievePortfolioDetailsDataDelegate;
        
        private EndOperationDelegate onEndRetrievePortfolioDetailsDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrievePortfolioDetailsDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveBenchmarkChartReturnDataDelegate;
        
        private EndOperationDelegate onEndRetrieveBenchmarkChartReturnDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveBenchmarkChartReturnDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveBenchmarkGridReturnDataDelegate;
        
        private EndOperationDelegate onEndRetrieveBenchmarkGridReturnDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveBenchmarkGridReturnDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveHoldingsPercentageDataDelegate;
        
        private EndOperationDelegate onEndRetrieveHoldingsPercentageDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveHoldingsPercentageDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveHoldingsPercentageDataForRegionDelegate;
        
        private EndOperationDelegate onEndRetrieveHoldingsPercentageDataForRegionDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveHoldingsPercentageDataForRegionCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveTopBenchmarkSecuritiesDataDelegate;
        
        private EndOperationDelegate onEndRetrieveTopBenchmarkSecuritiesDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveTopBenchmarkSecuritiesDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveMarketCapitalizationDataDelegate;
        
        private EndOperationDelegate onEndRetrieveMarketCapitalizationDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveMarketCapitalizationDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveAssetAllocationDataDelegate;
        
        private EndOperationDelegate onEndRetrieveAssetAllocationDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveAssetAllocationDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveMarketSnapshotSelectionDataDelegate;
        
        private EndOperationDelegate onEndRetrieveMarketSnapshotSelectionDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveMarketSnapshotSelectionDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveMarketSnapshotPreferenceDelegate;
        
        private EndOperationDelegate onEndRetrieveMarketSnapshotPreferenceDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveMarketSnapshotPreferenceCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveMarketPerformanceSnapshotDataDelegate;
        
        private EndOperationDelegate onEndRetrieveMarketPerformanceSnapshotDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveMarketPerformanceSnapshotDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddMarketSnapshotPerformanceDelegate;
        
        private EndOperationDelegate onEndAddMarketSnapshotPerformanceDelegate;
        
        private System.Threading.SendOrPostCallback onAddMarketSnapshotPerformanceCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateMarketSnapshotPerformanceDelegate;
        
        private EndOperationDelegate onEndUpdateMarketSnapshotPerformanceDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateMarketSnapshotPerformanceCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddMarketSnapshotGroupPreferenceDelegate;
        
        private EndOperationDelegate onEndAddMarketSnapshotGroupPreferenceDelegate;
        
        private System.Threading.SendOrPostCallback onAddMarketSnapshotGroupPreferenceCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveMarketSnapshotGroupPreferenceDelegate;
        
        private EndOperationDelegate onEndRemoveMarketSnapshotGroupPreferenceDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveMarketSnapshotGroupPreferenceCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddMarketSnapshotEntityPreferenceDelegate;
        
        private EndOperationDelegate onEndAddMarketSnapshotEntityPreferenceDelegate;
        
        private System.Threading.SendOrPostCallback onAddMarketSnapshotEntityPreferenceCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveMarketSnapshotEntityPreferenceDelegate;
        
        private EndOperationDelegate onEndRemoveMarketSnapshotEntityPreferenceDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveMarketSnapshotEntityPreferenceCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrievePortfolioRiskReturnDataDelegate;
        
        private EndOperationDelegate onEndRetrievePortfolioRiskReturnDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrievePortfolioRiskReturnDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveHeatMapDataDelegate;
        
        private EndOperationDelegate onEndRetrieveHeatMapDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveHeatMapDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveRelativePerformanceSectorDataDelegate;
        
        private EndOperationDelegate onEndRetrieveRelativePerformanceSectorDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveRelativePerformanceSectorDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveRelativePerformanceCountryActivePositionDataDelegate;
        
        private EndOperationDelegate onEndRetrieveRelativePerformanceCountryActivePositionDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveRelativePerformanceCountryActivePositionDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveRelativePerformanceSectorActivePositionDataDelegate;
        
        private EndOperationDelegate onEndRetrieveRelativePerformanceSectorActivePositionDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveRelativePerformanceSectorActivePositionDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveRelativePerformanceSecurityActivePositionDataDelegate;
        
        private EndOperationDelegate onEndRetrieveRelativePerformanceSecurityActivePositionDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveRelativePerformanceSecurityActivePositionDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveRelativePerformanceSecurityDataDelegate;
        
        private EndOperationDelegate onEndRetrieveRelativePerformanceSecurityDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveRelativePerformanceSecurityDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveRelativePerformanceDataDelegate;
        
        private EndOperationDelegate onEndRetrieveRelativePerformanceDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveRelativePerformanceDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrievePerformanceGraphDataDelegate;
        
        private EndOperationDelegate onEndRetrievePerformanceGraphDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrievePerformanceGraphDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrievePerformanceGridDataDelegate;
        
        private EndOperationDelegate onEndRetrievePerformanceGridDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrievePerformanceGridDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveAttributionDataDelegate;
        
        private EndOperationDelegate onEndRetrieveAttributionDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveAttributionDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public BenchmarkHoldingsPerformanceOperationsClient() {
        }
        
        public BenchmarkHoldingsPerformanceOperationsClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BenchmarkHoldingsPerformanceOperationsClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BenchmarkHoldingsPerformanceOperationsClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BenchmarkHoldingsPerformanceOperationsClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> TempCompleted;
        
        public event System.EventHandler<RetrievePortfolioSelectionDataCompletedEventArgs> RetrievePortfolioSelectionDataCompleted;
        
        public event System.EventHandler<RetrieveBenchmarkSelectionDataCompletedEventArgs> RetrieveBenchmarkSelectionDataCompleted;
        
        public event System.EventHandler<RetrieveSectorBreakdownDataCompletedEventArgs> RetrieveSectorBreakdownDataCompleted;
        
        public event System.EventHandler<RetrieveRegionBreakdownDataCompletedEventArgs> RetrieveRegionBreakdownDataCompleted;
        
        public event System.EventHandler<RetrieveTopHoldingsDataCompletedEventArgs> RetrieveTopHoldingsDataCompleted;
        
        public event System.EventHandler<RetrieveIndexConstituentsDataCompletedEventArgs> RetrieveIndexConstituentsDataCompleted;
        
        public event System.EventHandler<RetrieveValuesForFiltersCompletedEventArgs> RetrieveValuesForFiltersCompleted;
        
        public event System.EventHandler<RetrievePortfolioDetailsDataCompletedEventArgs> RetrievePortfolioDetailsDataCompleted;
        
        public event System.EventHandler<RetrieveBenchmarkChartReturnDataCompletedEventArgs> RetrieveBenchmarkChartReturnDataCompleted;
        
        public event System.EventHandler<RetrieveBenchmarkGridReturnDataCompletedEventArgs> RetrieveBenchmarkGridReturnDataCompleted;
        
        public event System.EventHandler<RetrieveHoldingsPercentageDataCompletedEventArgs> RetrieveHoldingsPercentageDataCompleted;
        
        public event System.EventHandler<RetrieveHoldingsPercentageDataForRegionCompletedEventArgs> RetrieveHoldingsPercentageDataForRegionCompleted;
        
        public event System.EventHandler<RetrieveTopBenchmarkSecuritiesDataCompletedEventArgs> RetrieveTopBenchmarkSecuritiesDataCompleted;
        
        public event System.EventHandler<RetrieveMarketCapitalizationDataCompletedEventArgs> RetrieveMarketCapitalizationDataCompleted;
        
        public event System.EventHandler<RetrieveAssetAllocationDataCompletedEventArgs> RetrieveAssetAllocationDataCompleted;
        
        public event System.EventHandler<RetrieveMarketSnapshotSelectionDataCompletedEventArgs> RetrieveMarketSnapshotSelectionDataCompleted;
        
        public event System.EventHandler<RetrieveMarketSnapshotPreferenceCompletedEventArgs> RetrieveMarketSnapshotPreferenceCompleted;
        
        public event System.EventHandler<RetrieveMarketPerformanceSnapshotDataCompletedEventArgs> RetrieveMarketPerformanceSnapshotDataCompleted;
        
        public event System.EventHandler<AddMarketSnapshotPerformanceCompletedEventArgs> AddMarketSnapshotPerformanceCompleted;
        
        public event System.EventHandler<UpdateMarketSnapshotPerformanceCompletedEventArgs> UpdateMarketSnapshotPerformanceCompleted;
        
        public event System.EventHandler<AddMarketSnapshotGroupPreferenceCompletedEventArgs> AddMarketSnapshotGroupPreferenceCompleted;
        
        public event System.EventHandler<RemoveMarketSnapshotGroupPreferenceCompletedEventArgs> RemoveMarketSnapshotGroupPreferenceCompleted;
        
        public event System.EventHandler<AddMarketSnapshotEntityPreferenceCompletedEventArgs> AddMarketSnapshotEntityPreferenceCompleted;
        
        public event System.EventHandler<RemoveMarketSnapshotEntityPreferenceCompletedEventArgs> RemoveMarketSnapshotEntityPreferenceCompleted;
        
        public event System.EventHandler<RetrievePortfolioRiskReturnDataCompletedEventArgs> RetrievePortfolioRiskReturnDataCompleted;
        
        public event System.EventHandler<RetrieveHeatMapDataCompletedEventArgs> RetrieveHeatMapDataCompleted;
        
        public event System.EventHandler<RetrieveRelativePerformanceSectorDataCompletedEventArgs> RetrieveRelativePerformanceSectorDataCompleted;
        
        public event System.EventHandler<RetrieveRelativePerformanceCountryActivePositionDataCompletedEventArgs> RetrieveRelativePerformanceCountryActivePositionDataCompleted;
        
        public event System.EventHandler<RetrieveRelativePerformanceSectorActivePositionDataCompletedEventArgs> RetrieveRelativePerformanceSectorActivePositionDataCompleted;
        
        public event System.EventHandler<RetrieveRelativePerformanceSecurityActivePositionDataCompletedEventArgs> RetrieveRelativePerformanceSecurityActivePositionDataCompleted;
        
        public event System.EventHandler<RetrieveRelativePerformanceSecurityDataCompletedEventArgs> RetrieveRelativePerformanceSecurityDataCompleted;
        
        public event System.EventHandler<RetrieveRelativePerformanceDataCompletedEventArgs> RetrieveRelativePerformanceDataCompleted;
        
        public event System.EventHandler<RetrievePerformanceGraphDataCompletedEventArgs> RetrievePerformanceGraphDataCompleted;
        
        public event System.EventHandler<RetrievePerformanceGridDataCompletedEventArgs> RetrievePerformanceGridDataCompleted;
        
        public event System.EventHandler<RetrieveAttributionDataCompletedEventArgs> RetrieveAttributionDataCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginTemp(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PeriodSelectionData data, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTemp(data, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndTemp(System.IAsyncResult result) {
            base.Channel.EndTemp(result);
        }
        
        private System.IAsyncResult OnBeginTemp(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PeriodSelectionData data = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PeriodSelectionData)(inValues[0]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginTemp(data, callback, asyncState);
        }
        
        private object[] OnEndTemp(System.IAsyncResult result) {
            ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndTemp(result);
            return null;
        }
        
        private void OnTempCompleted(object state) {
            if ((this.TempCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TempCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TempAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PeriodSelectionData data) {
            this.TempAsync(data, null);
        }
        
        public void TempAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PeriodSelectionData data, object userState) {
            if ((this.onBeginTempDelegate == null)) {
                this.onBeginTempDelegate = new BeginOperationDelegate(this.OnBeginTemp);
            }
            if ((this.onEndTempDelegate == null)) {
                this.onEndTempDelegate = new EndOperationDelegate(this.OnEndTemp);
            }
            if ((this.onTempCompletedDelegate == null)) {
                this.onTempCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTempCompleted);
            }
            base.InvokeAsync(this.onBeginTempDelegate, new object[] {
                        data}, this.onEndTempDelegate, this.onTempCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginRetrievePortfolioSelectionData(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrievePortfolioSelectionData(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData> GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndRetrievePortfolioSelectionData(System.IAsyncResult result) {
            return base.Channel.EndRetrievePortfolioSelectionData(result);
        }
        
        private System.IAsyncResult OnBeginRetrievePortfolioSelectionData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginRetrievePortfolioSelectionData(callback, asyncState);
        }
        
        private object[] OnEndRetrievePortfolioSelectionData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndRetrievePortfolioSelectionData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrievePortfolioSelectionDataCompleted(object state) {
            if ((this.RetrievePortfolioSelectionDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrievePortfolioSelectionDataCompleted(this, new RetrievePortfolioSelectionDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrievePortfolioSelectionDataAsync() {
            this.RetrievePortfolioSelectionDataAsync(null);
        }
        
        public void RetrievePortfolioSelectionDataAsync(object userState) {
            if ((this.onBeginRetrievePortfolioSelectionDataDelegate == null)) {
                this.onBeginRetrievePortfolioSelectionDataDelegate = new BeginOperationDelegate(this.OnBeginRetrievePortfolioSelectionData);
            }
            if ((this.onEndRetrievePortfolioSelectionDataDelegate == null)) {
                this.onEndRetrievePortfolioSelectionDataDelegate = new EndOperationDelegate(this.OnEndRetrievePortfolioSelectionData);
            }
            if ((this.onRetrievePortfolioSelectionDataCompletedDelegate == null)) {
                this.onRetrievePortfolioSelectionDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrievePortfolioSelectionDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrievePortfolioSelectionDataDelegate, null, this.onEndRetrievePortfolioSelectionDataDelegate, this.onRetrievePortfolioSelectionDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginRetrieveBenchmarkSelectionData(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveBenchmarkSelectionData(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData> GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndRetrieveBenchmarkSelectionData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveBenchmarkSelectionData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveBenchmarkSelectionData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginRetrieveBenchmarkSelectionData(callback, asyncState);
        }
        
        private object[] OnEndRetrieveBenchmarkSelectionData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndRetrieveBenchmarkSelectionData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveBenchmarkSelectionDataCompleted(object state) {
            if ((this.RetrieveBenchmarkSelectionDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveBenchmarkSelectionDataCompleted(this, new RetrieveBenchmarkSelectionDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveBenchmarkSelectionDataAsync() {
            this.RetrieveBenchmarkSelectionDataAsync(null);
        }
        
        public void RetrieveBenchmarkSelectionDataAsync(object userState) {
            if ((this.onBeginRetrieveBenchmarkSelectionDataDelegate == null)) {
                this.onBeginRetrieveBenchmarkSelectionDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveBenchmarkSelectionData);
            }
            if ((this.onEndRetrieveBenchmarkSelectionDataDelegate == null)) {
                this.onEndRetrieveBenchmarkSelectionDataDelegate = new EndOperationDelegate(this.OnEndRetrieveBenchmarkSelectionData);
            }
            if ((this.onRetrieveBenchmarkSelectionDataCompletedDelegate == null)) {
                this.onRetrieveBenchmarkSelectionDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveBenchmarkSelectionDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveBenchmarkSelectionDataDelegate, null, this.onEndRetrieveBenchmarkSelectionDataDelegate, this.onRetrieveBenchmarkSelectionDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginRetrieveSectorBreakdownData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveSectorBreakdownData(portfolioSelectionData, effectiveDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.SectorBreakdownData> GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndRetrieveSectorBreakdownData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveSectorBreakdownData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveSectorBreakdownData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData)(inValues[0]));
            System.DateTime effectiveDate = ((System.DateTime)(inValues[1]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginRetrieveSectorBreakdownData(portfolioSelectionData, effectiveDate, callback, asyncState);
        }
        
        private object[] OnEndRetrieveSectorBreakdownData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.SectorBreakdownData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndRetrieveSectorBreakdownData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveSectorBreakdownDataCompleted(object state) {
            if ((this.RetrieveSectorBreakdownDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveSectorBreakdownDataCompleted(this, new RetrieveSectorBreakdownDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveSectorBreakdownDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate) {
            this.RetrieveSectorBreakdownDataAsync(portfolioSelectionData, effectiveDate, null);
        }
        
        public void RetrieveSectorBreakdownDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, object userState) {
            if ((this.onBeginRetrieveSectorBreakdownDataDelegate == null)) {
                this.onBeginRetrieveSectorBreakdownDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveSectorBreakdownData);
            }
            if ((this.onEndRetrieveSectorBreakdownDataDelegate == null)) {
                this.onEndRetrieveSectorBreakdownDataDelegate = new EndOperationDelegate(this.OnEndRetrieveSectorBreakdownData);
            }
            if ((this.onRetrieveSectorBreakdownDataCompletedDelegate == null)) {
                this.onRetrieveSectorBreakdownDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveSectorBreakdownDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveSectorBreakdownDataDelegate, new object[] {
                        portfolioSelectionData,
                        effectiveDate}, this.onEndRetrieveSectorBreakdownDataDelegate, this.onRetrieveSectorBreakdownDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginRetrieveRegionBreakdownData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveRegionBreakdownData(portfolioSelectionData, effectiveDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RegionBreakdownData> GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndRetrieveRegionBreakdownData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveRegionBreakdownData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveRegionBreakdownData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData)(inValues[0]));
            System.DateTime effectiveDate = ((System.DateTime)(inValues[1]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginRetrieveRegionBreakdownData(portfolioSelectionData, effectiveDate, callback, asyncState);
        }
        
        private object[] OnEndRetrieveRegionBreakdownData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RegionBreakdownData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndRetrieveRegionBreakdownData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveRegionBreakdownDataCompleted(object state) {
            if ((this.RetrieveRegionBreakdownDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveRegionBreakdownDataCompleted(this, new RetrieveRegionBreakdownDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveRegionBreakdownDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate) {
            this.RetrieveRegionBreakdownDataAsync(portfolioSelectionData, effectiveDate, null);
        }
        
        public void RetrieveRegionBreakdownDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, object userState) {
            if ((this.onBeginRetrieveRegionBreakdownDataDelegate == null)) {
                this.onBeginRetrieveRegionBreakdownDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveRegionBreakdownData);
            }
            if ((this.onEndRetrieveRegionBreakdownDataDelegate == null)) {
                this.onEndRetrieveRegionBreakdownDataDelegate = new EndOperationDelegate(this.OnEndRetrieveRegionBreakdownData);
            }
            if ((this.onRetrieveRegionBreakdownDataCompletedDelegate == null)) {
                this.onRetrieveRegionBreakdownDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveRegionBreakdownDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveRegionBreakdownDataDelegate, new object[] {
                        portfolioSelectionData,
                        effectiveDate}, this.onEndRetrieveRegionBreakdownDataDelegate, this.onRetrieveRegionBreakdownDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginRetrieveTopHoldingsData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveTopHoldingsData(portfolioSelectionData, effectiveDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.TopHoldingsData> GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndRetrieveTopHoldingsData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveTopHoldingsData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveTopHoldingsData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData)(inValues[0]));
            System.DateTime effectiveDate = ((System.DateTime)(inValues[1]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginRetrieveTopHoldingsData(portfolioSelectionData, effectiveDate, callback, asyncState);
        }
        
        private object[] OnEndRetrieveTopHoldingsData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.TopHoldingsData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndRetrieveTopHoldingsData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveTopHoldingsDataCompleted(object state) {
            if ((this.RetrieveTopHoldingsDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveTopHoldingsDataCompleted(this, new RetrieveTopHoldingsDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveTopHoldingsDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate) {
            this.RetrieveTopHoldingsDataAsync(portfolioSelectionData, effectiveDate, null);
        }
        
        public void RetrieveTopHoldingsDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, object userState) {
            if ((this.onBeginRetrieveTopHoldingsDataDelegate == null)) {
                this.onBeginRetrieveTopHoldingsDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveTopHoldingsData);
            }
            if ((this.onEndRetrieveTopHoldingsDataDelegate == null)) {
                this.onEndRetrieveTopHoldingsDataDelegate = new EndOperationDelegate(this.OnEndRetrieveTopHoldingsData);
            }
            if ((this.onRetrieveTopHoldingsDataCompletedDelegate == null)) {
                this.onRetrieveTopHoldingsDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveTopHoldingsDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveTopHoldingsDataDelegate, new object[] {
                        portfolioSelectionData,
                        effectiveDate}, this.onEndRetrieveTopHoldingsDataDelegate, this.onRetrieveTopHoldingsDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginRetrieveIndexConstituentsData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveIndexConstituentsData(portfolioSelectionData, effectiveDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.IndexConstituentsData> GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndRetrieveIndexConstituentsData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveIndexConstituentsData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveIndexConstituentsData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData)(inValues[0]));
            System.DateTime effectiveDate = ((System.DateTime)(inValues[1]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginRetrieveIndexConstituentsData(portfolioSelectionData, effectiveDate, callback, asyncState);
        }
        
        private object[] OnEndRetrieveIndexConstituentsData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.IndexConstituentsData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndRetrieveIndexConstituentsData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveIndexConstituentsDataCompleted(object state) {
            if ((this.RetrieveIndexConstituentsDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveIndexConstituentsDataCompleted(this, new RetrieveIndexConstituentsDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveIndexConstituentsDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate) {
            this.RetrieveIndexConstituentsDataAsync(portfolioSelectionData, effectiveDate, null);
        }
        
        public void RetrieveIndexConstituentsDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, object userState) {
            if ((this.onBeginRetrieveIndexConstituentsDataDelegate == null)) {
                this.onBeginRetrieveIndexConstituentsDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveIndexConstituentsData);
            }
            if ((this.onEndRetrieveIndexConstituentsDataDelegate == null)) {
                this.onEndRetrieveIndexConstituentsDataDelegate = new EndOperationDelegate(this.OnEndRetrieveIndexConstituentsData);
            }
            if ((this.onRetrieveIndexConstituentsDataCompletedDelegate == null)) {
                this.onRetrieveIndexConstituentsDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveIndexConstituentsDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveIndexConstituentsDataDelegate, new object[] {
                        portfolioSelectionData,
                        effectiveDate}, this.onEndRetrieveIndexConstituentsDataDelegate, this.onRetrieveIndexConstituentsDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginRetrieveValuesForFilters(string filterType, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveValuesForFilters(filterType, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<string> GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndRetrieveValuesForFilters(System.IAsyncResult result) {
            return base.Channel.EndRetrieveValuesForFilters(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveValuesForFilters(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string filterType = ((string)(inValues[0]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginRetrieveValuesForFilters(filterType, callback, asyncState);
        }
        
        private object[] OnEndRetrieveValuesForFilters(System.IAsyncResult result) {
            System.Collections.Generic.List<string> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndRetrieveValuesForFilters(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveValuesForFiltersCompleted(object state) {
            if ((this.RetrieveValuesForFiltersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveValuesForFiltersCompleted(this, new RetrieveValuesForFiltersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveValuesForFiltersAsync(string filterType) {
            this.RetrieveValuesForFiltersAsync(filterType, null);
        }
        
        public void RetrieveValuesForFiltersAsync(string filterType, object userState) {
            if ((this.onBeginRetrieveValuesForFiltersDelegate == null)) {
                this.onBeginRetrieveValuesForFiltersDelegate = new BeginOperationDelegate(this.OnBeginRetrieveValuesForFilters);
            }
            if ((this.onEndRetrieveValuesForFiltersDelegate == null)) {
                this.onEndRetrieveValuesForFiltersDelegate = new EndOperationDelegate(this.OnEndRetrieveValuesForFilters);
            }
            if ((this.onRetrieveValuesForFiltersCompletedDelegate == null)) {
                this.onRetrieveValuesForFiltersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveValuesForFiltersCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveValuesForFiltersDelegate, new object[] {
                        filterType}, this.onEndRetrieveValuesForFiltersDelegate, this.onRetrieveValuesForFiltersCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginRetrievePortfolioDetailsData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData objPortfolioIdentifier, System.DateTime objSelectedDate, bool objGetBenchmark, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrievePortfolioDetailsData(objPortfolioIdentifier, objSelectedDate, objGetBenchmark, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioDetailsData> GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndRetrievePortfolioDetailsData(System.IAsyncResult result) {
            return base.Channel.EndRetrievePortfolioDetailsData(result);
        }
        
        private System.IAsyncResult OnBeginRetrievePortfolioDetailsData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData objPortfolioIdentifier = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData)(inValues[0]));
            System.DateTime objSelectedDate = ((System.DateTime)(inValues[1]));
            bool objGetBenchmark = ((bool)(inValues[2]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginRetrievePortfolioDetailsData(objPortfolioIdentifier, objSelectedDate, objGetBenchmark, callback, asyncState);
        }
        
        private object[] OnEndRetrievePortfolioDetailsData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioDetailsData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndRetrievePortfolioDetailsData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrievePortfolioDetailsDataCompleted(object state) {
            if ((this.RetrievePortfolioDetailsDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrievePortfolioDetailsDataCompleted(this, new RetrievePortfolioDetailsDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrievePortfolioDetailsDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData objPortfolioIdentifier, System.DateTime objSelectedDate, bool objGetBenchmark) {
            this.RetrievePortfolioDetailsDataAsync(objPortfolioIdentifier, objSelectedDate, objGetBenchmark, null);
        }
        
        public void RetrievePortfolioDetailsDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData objPortfolioIdentifier, System.DateTime objSelectedDate, bool objGetBenchmark, object userState) {
            if ((this.onBeginRetrievePortfolioDetailsDataDelegate == null)) {
                this.onBeginRetrievePortfolioDetailsDataDelegate = new BeginOperationDelegate(this.OnBeginRetrievePortfolioDetailsData);
            }
            if ((this.onEndRetrievePortfolioDetailsDataDelegate == null)) {
                this.onEndRetrievePortfolioDetailsDataDelegate = new EndOperationDelegate(this.OnEndRetrievePortfolioDetailsData);
            }
            if ((this.onRetrievePortfolioDetailsDataCompletedDelegate == null)) {
                this.onRetrievePortfolioDetailsDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrievePortfolioDetailsDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrievePortfolioDetailsDataDelegate, new object[] {
                        objPortfolioIdentifier,
                        objSelectedDate,
                        objGetBenchmark}, this.onEndRetrievePortfolioDetailsDataDelegate, this.onRetrievePortfolioDetailsDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginRetrieveBenchmarkChartReturnData(System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData> objBenchmarkIdentifier, System.DateTime objEffectiveDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveBenchmarkChartReturnData(objBenchmarkIdentifier, objEffectiveDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkChartReturnData> GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndRetrieveBenchmarkChartReturnData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveBenchmarkChartReturnData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveBenchmarkChartReturnData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData> objBenchmarkIdentifier = ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData>)(inValues[0]));
            System.DateTime objEffectiveDate = ((System.DateTime)(inValues[1]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginRetrieveBenchmarkChartReturnData(objBenchmarkIdentifier, objEffectiveDate, callback, asyncState);
        }
        
        private object[] OnEndRetrieveBenchmarkChartReturnData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkChartReturnData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndRetrieveBenchmarkChartReturnData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveBenchmarkChartReturnDataCompleted(object state) {
            if ((this.RetrieveBenchmarkChartReturnDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveBenchmarkChartReturnDataCompleted(this, new RetrieveBenchmarkChartReturnDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveBenchmarkChartReturnDataAsync(System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData> objBenchmarkIdentifier, System.DateTime objEffectiveDate) {
            this.RetrieveBenchmarkChartReturnDataAsync(objBenchmarkIdentifier, objEffectiveDate, null);
        }
        
        public void RetrieveBenchmarkChartReturnDataAsync(System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData> objBenchmarkIdentifier, System.DateTime objEffectiveDate, object userState) {
            if ((this.onBeginRetrieveBenchmarkChartReturnDataDelegate == null)) {
                this.onBeginRetrieveBenchmarkChartReturnDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveBenchmarkChartReturnData);
            }
            if ((this.onEndRetrieveBenchmarkChartReturnDataDelegate == null)) {
                this.onEndRetrieveBenchmarkChartReturnDataDelegate = new EndOperationDelegate(this.OnEndRetrieveBenchmarkChartReturnData);
            }
            if ((this.onRetrieveBenchmarkChartReturnDataCompletedDelegate == null)) {
                this.onRetrieveBenchmarkChartReturnDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveBenchmarkChartReturnDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveBenchmarkChartReturnDataDelegate, new object[] {
                        objBenchmarkIdentifier,
                        objEffectiveDate}, this.onEndRetrieveBenchmarkChartReturnDataDelegate, this.onRetrieveBenchmarkChartReturnDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginRetrieveBenchmarkGridReturnData(System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData> objBenchmarkIdentifier, System.DateTime objEffectiveDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveBenchmarkGridReturnData(objBenchmarkIdentifier, objEffectiveDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkGridReturnData> GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndRetrieveBenchmarkGridReturnData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveBenchmarkGridReturnData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveBenchmarkGridReturnData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData> objBenchmarkIdentifier = ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData>)(inValues[0]));
            System.DateTime objEffectiveDate = ((System.DateTime)(inValues[1]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginRetrieveBenchmarkGridReturnData(objBenchmarkIdentifier, objEffectiveDate, callback, asyncState);
        }
        
        private object[] OnEndRetrieveBenchmarkGridReturnData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkGridReturnData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndRetrieveBenchmarkGridReturnData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveBenchmarkGridReturnDataCompleted(object state) {
            if ((this.RetrieveBenchmarkGridReturnDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveBenchmarkGridReturnDataCompleted(this, new RetrieveBenchmarkGridReturnDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveBenchmarkGridReturnDataAsync(System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData> objBenchmarkIdentifier, System.DateTime objEffectiveDate) {
            this.RetrieveBenchmarkGridReturnDataAsync(objBenchmarkIdentifier, objEffectiveDate, null);
        }
        
        public void RetrieveBenchmarkGridReturnDataAsync(System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData> objBenchmarkIdentifier, System.DateTime objEffectiveDate, object userState) {
            if ((this.onBeginRetrieveBenchmarkGridReturnDataDelegate == null)) {
                this.onBeginRetrieveBenchmarkGridReturnDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveBenchmarkGridReturnData);
            }
            if ((this.onEndRetrieveBenchmarkGridReturnDataDelegate == null)) {
                this.onEndRetrieveBenchmarkGridReturnDataDelegate = new EndOperationDelegate(this.OnEndRetrieveBenchmarkGridReturnData);
            }
            if ((this.onRetrieveBenchmarkGridReturnDataCompletedDelegate == null)) {
                this.onRetrieveBenchmarkGridReturnDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveBenchmarkGridReturnDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveBenchmarkGridReturnDataDelegate, new object[] {
                        objBenchmarkIdentifier,
                        objEffectiveDate}, this.onEndRetrieveBenchmarkGridReturnDataDelegate, this.onRetrieveBenchmarkGridReturnDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginRetrieveHoldingsPercentageData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string filterType, string filterValue, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveHoldingsPercentageData(portfolioSelectionData, effectiveDate, filterType, filterValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.HoldingsPercentageData> GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndRetrieveHoldingsPercentageData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveHoldingsPercentageData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveHoldingsPercentageData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData)(inValues[0]));
            System.DateTime effectiveDate = ((System.DateTime)(inValues[1]));
            string filterType = ((string)(inValues[2]));
            string filterValue = ((string)(inValues[3]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginRetrieveHoldingsPercentageData(portfolioSelectionData, effectiveDate, filterType, filterValue, callback, asyncState);
        }
        
        private object[] OnEndRetrieveHoldingsPercentageData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.HoldingsPercentageData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndRetrieveHoldingsPercentageData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveHoldingsPercentageDataCompleted(object state) {
            if ((this.RetrieveHoldingsPercentageDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveHoldingsPercentageDataCompleted(this, new RetrieveHoldingsPercentageDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveHoldingsPercentageDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string filterType, string filterValue) {
            this.RetrieveHoldingsPercentageDataAsync(portfolioSelectionData, effectiveDate, filterType, filterValue, null);
        }
        
        public void RetrieveHoldingsPercentageDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string filterType, string filterValue, object userState) {
            if ((this.onBeginRetrieveHoldingsPercentageDataDelegate == null)) {
                this.onBeginRetrieveHoldingsPercentageDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveHoldingsPercentageData);
            }
            if ((this.onEndRetrieveHoldingsPercentageDataDelegate == null)) {
                this.onEndRetrieveHoldingsPercentageDataDelegate = new EndOperationDelegate(this.OnEndRetrieveHoldingsPercentageData);
            }
            if ((this.onRetrieveHoldingsPercentageDataCompletedDelegate == null)) {
                this.onRetrieveHoldingsPercentageDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveHoldingsPercentageDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveHoldingsPercentageDataDelegate, new object[] {
                        portfolioSelectionData,
                        effectiveDate,
                        filterType,
                        filterValue}, this.onEndRetrieveHoldingsPercentageDataDelegate, this.onRetrieveHoldingsPercentageDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginRetrieveHoldingsPercentageDataForRegion(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string filterType, string filterValue, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveHoldingsPercentageDataForRegion(portfolioSelectionData, effectiveDate, filterType, filterValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.HoldingsPercentageData> GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndRetrieveHoldingsPercentageDataForRegion(System.IAsyncResult result) {
            return base.Channel.EndRetrieveHoldingsPercentageDataForRegion(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveHoldingsPercentageDataForRegion(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData)(inValues[0]));
            System.DateTime effectiveDate = ((System.DateTime)(inValues[1]));
            string filterType = ((string)(inValues[2]));
            string filterValue = ((string)(inValues[3]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginRetrieveHoldingsPercentageDataForRegion(portfolioSelectionData, effectiveDate, filterType, filterValue, callback, asyncState);
        }
        
        private object[] OnEndRetrieveHoldingsPercentageDataForRegion(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.HoldingsPercentageData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndRetrieveHoldingsPercentageDataForRegion(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveHoldingsPercentageDataForRegionCompleted(object state) {
            if ((this.RetrieveHoldingsPercentageDataForRegionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveHoldingsPercentageDataForRegionCompleted(this, new RetrieveHoldingsPercentageDataForRegionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveHoldingsPercentageDataForRegionAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string filterType, string filterValue) {
            this.RetrieveHoldingsPercentageDataForRegionAsync(portfolioSelectionData, effectiveDate, filterType, filterValue, null);
        }
        
        public void RetrieveHoldingsPercentageDataForRegionAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string filterType, string filterValue, object userState) {
            if ((this.onBeginRetrieveHoldingsPercentageDataForRegionDelegate == null)) {
                this.onBeginRetrieveHoldingsPercentageDataForRegionDelegate = new BeginOperationDelegate(this.OnBeginRetrieveHoldingsPercentageDataForRegion);
            }
            if ((this.onEndRetrieveHoldingsPercentageDataForRegionDelegate == null)) {
                this.onEndRetrieveHoldingsPercentageDataForRegionDelegate = new EndOperationDelegate(this.OnEndRetrieveHoldingsPercentageDataForRegion);
            }
            if ((this.onRetrieveHoldingsPercentageDataForRegionCompletedDelegate == null)) {
                this.onRetrieveHoldingsPercentageDataForRegionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveHoldingsPercentageDataForRegionCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveHoldingsPercentageDataForRegionDelegate, new object[] {
                        portfolioSelectionData,
                        effectiveDate,
                        filterType,
                        filterValue}, this.onEndRetrieveHoldingsPercentageDataForRegionDelegate, this.onRetrieveHoldingsPercentageDataForRegionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginRetrieveTopBenchmarkSecuritiesData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveTopBenchmarkSecuritiesData(portfolioSelectionData, effectiveDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.TopBenchmarkSecuritiesData> GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndRetrieveTopBenchmarkSecuritiesData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveTopBenchmarkSecuritiesData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveTopBenchmarkSecuritiesData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData)(inValues[0]));
            System.DateTime effectiveDate = ((System.DateTime)(inValues[1]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginRetrieveTopBenchmarkSecuritiesData(portfolioSelectionData, effectiveDate, callback, asyncState);
        }
        
        private object[] OnEndRetrieveTopBenchmarkSecuritiesData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.TopBenchmarkSecuritiesData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndRetrieveTopBenchmarkSecuritiesData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveTopBenchmarkSecuritiesDataCompleted(object state) {
            if ((this.RetrieveTopBenchmarkSecuritiesDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveTopBenchmarkSecuritiesDataCompleted(this, new RetrieveTopBenchmarkSecuritiesDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveTopBenchmarkSecuritiesDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate) {
            this.RetrieveTopBenchmarkSecuritiesDataAsync(portfolioSelectionData, effectiveDate, null);
        }
        
        public void RetrieveTopBenchmarkSecuritiesDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, object userState) {
            if ((this.onBeginRetrieveTopBenchmarkSecuritiesDataDelegate == null)) {
                this.onBeginRetrieveTopBenchmarkSecuritiesDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveTopBenchmarkSecuritiesData);
            }
            if ((this.onEndRetrieveTopBenchmarkSecuritiesDataDelegate == null)) {
                this.onEndRetrieveTopBenchmarkSecuritiesDataDelegate = new EndOperationDelegate(this.OnEndRetrieveTopBenchmarkSecuritiesData);
            }
            if ((this.onRetrieveTopBenchmarkSecuritiesDataCompletedDelegate == null)) {
                this.onRetrieveTopBenchmarkSecuritiesDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveTopBenchmarkSecuritiesDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveTopBenchmarkSecuritiesDataDelegate, new object[] {
                        portfolioSelectionData,
                        effectiveDate}, this.onEndRetrieveTopBenchmarkSecuritiesDataDelegate, this.onRetrieveTopBenchmarkSecuritiesDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginRetrieveMarketCapitalizationData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveMarketCapitalizationData(fundSelectionData, benchmarkSelectionData, effectiveDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketCapitalizationData GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndRetrieveMarketCapitalizationData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveMarketCapitalizationData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveMarketCapitalizationData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData)(inValues[0]));
            GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData)(inValues[1]));
            System.DateTime effectiveDate = ((System.DateTime)(inValues[2]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginRetrieveMarketCapitalizationData(fundSelectionData, benchmarkSelectionData, effectiveDate, callback, asyncState);
        }
        
        private object[] OnEndRetrieveMarketCapitalizationData(System.IAsyncResult result) {
            GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketCapitalizationData retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndRetrieveMarketCapitalizationData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveMarketCapitalizationDataCompleted(object state) {
            if ((this.RetrieveMarketCapitalizationDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveMarketCapitalizationDataCompleted(this, new RetrieveMarketCapitalizationDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveMarketCapitalizationDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate) {
            this.RetrieveMarketCapitalizationDataAsync(fundSelectionData, benchmarkSelectionData, effectiveDate, null);
        }
        
        public void RetrieveMarketCapitalizationDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate, object userState) {
            if ((this.onBeginRetrieveMarketCapitalizationDataDelegate == null)) {
                this.onBeginRetrieveMarketCapitalizationDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveMarketCapitalizationData);
            }
            if ((this.onEndRetrieveMarketCapitalizationDataDelegate == null)) {
                this.onEndRetrieveMarketCapitalizationDataDelegate = new EndOperationDelegate(this.OnEndRetrieveMarketCapitalizationData);
            }
            if ((this.onRetrieveMarketCapitalizationDataCompletedDelegate == null)) {
                this.onRetrieveMarketCapitalizationDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveMarketCapitalizationDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveMarketCapitalizationDataDelegate, new object[] {
                        fundSelectionData,
                        benchmarkSelectionData,
                        effectiveDate}, this.onEndRetrieveMarketCapitalizationDataDelegate, this.onRetrieveMarketCapitalizationDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginRetrieveAssetAllocationData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveAssetAllocationData(portfolioSelectionData, effectiveDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.AssetAllocationData> GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndRetrieveAssetAllocationData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveAssetAllocationData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveAssetAllocationData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData)(inValues[0]));
            System.DateTime effectiveDate = ((System.DateTime)(inValues[1]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginRetrieveAssetAllocationData(portfolioSelectionData, effectiveDate, callback, asyncState);
        }
        
        private object[] OnEndRetrieveAssetAllocationData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.AssetAllocationData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndRetrieveAssetAllocationData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveAssetAllocationDataCompleted(object state) {
            if ((this.RetrieveAssetAllocationDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveAssetAllocationDataCompleted(this, new RetrieveAssetAllocationDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveAssetAllocationDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate) {
            this.RetrieveAssetAllocationDataAsync(portfolioSelectionData, effectiveDate, null);
        }
        
        public void RetrieveAssetAllocationDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, object userState) {
            if ((this.onBeginRetrieveAssetAllocationDataDelegate == null)) {
                this.onBeginRetrieveAssetAllocationDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveAssetAllocationData);
            }
            if ((this.onEndRetrieveAssetAllocationDataDelegate == null)) {
                this.onEndRetrieveAssetAllocationDataDelegate = new EndOperationDelegate(this.OnEndRetrieveAssetAllocationData);
            }
            if ((this.onRetrieveAssetAllocationDataCompletedDelegate == null)) {
                this.onRetrieveAssetAllocationDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveAssetAllocationDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveAssetAllocationDataDelegate, new object[] {
                        portfolioSelectionData,
                        effectiveDate}, this.onEndRetrieveAssetAllocationDataDelegate, this.onRetrieveAssetAllocationDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginRetrieveMarketSnapshotSelectionData(string userName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveMarketSnapshotSelectionData(userName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketSnapshotSelectionData> GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndRetrieveMarketSnapshotSelectionData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveMarketSnapshotSelectionData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveMarketSnapshotSelectionData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userName = ((string)(inValues[0]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginRetrieveMarketSnapshotSelectionData(userName, callback, asyncState);
        }
        
        private object[] OnEndRetrieveMarketSnapshotSelectionData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketSnapshotSelectionData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndRetrieveMarketSnapshotSelectionData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveMarketSnapshotSelectionDataCompleted(object state) {
            if ((this.RetrieveMarketSnapshotSelectionDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveMarketSnapshotSelectionDataCompleted(this, new RetrieveMarketSnapshotSelectionDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveMarketSnapshotSelectionDataAsync(string userName) {
            this.RetrieveMarketSnapshotSelectionDataAsync(userName, null);
        }
        
        public void RetrieveMarketSnapshotSelectionDataAsync(string userName, object userState) {
            if ((this.onBeginRetrieveMarketSnapshotSelectionDataDelegate == null)) {
                this.onBeginRetrieveMarketSnapshotSelectionDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveMarketSnapshotSelectionData);
            }
            if ((this.onEndRetrieveMarketSnapshotSelectionDataDelegate == null)) {
                this.onEndRetrieveMarketSnapshotSelectionDataDelegate = new EndOperationDelegate(this.OnEndRetrieveMarketSnapshotSelectionData);
            }
            if ((this.onRetrieveMarketSnapshotSelectionDataCompletedDelegate == null)) {
                this.onRetrieveMarketSnapshotSelectionDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveMarketSnapshotSelectionDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveMarketSnapshotSelectionDataDelegate, new object[] {
                        userName}, this.onEndRetrieveMarketSnapshotSelectionDataDelegate, this.onRetrieveMarketSnapshotSelectionDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginRetrieveMarketSnapshotPreference(string userName, string snapshotName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveMarketSnapshotPreference(userName, snapshotName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketSnapshotPreference> GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndRetrieveMarketSnapshotPreference(System.IAsyncResult result) {
            return base.Channel.EndRetrieveMarketSnapshotPreference(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveMarketSnapshotPreference(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userName = ((string)(inValues[0]));
            string snapshotName = ((string)(inValues[1]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginRetrieveMarketSnapshotPreference(userName, snapshotName, callback, asyncState);
        }
        
        private object[] OnEndRetrieveMarketSnapshotPreference(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketSnapshotPreference> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndRetrieveMarketSnapshotPreference(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveMarketSnapshotPreferenceCompleted(object state) {
            if ((this.RetrieveMarketSnapshotPreferenceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveMarketSnapshotPreferenceCompleted(this, new RetrieveMarketSnapshotPreferenceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveMarketSnapshotPreferenceAsync(string userName, string snapshotName) {
            this.RetrieveMarketSnapshotPreferenceAsync(userName, snapshotName, null);
        }
        
        public void RetrieveMarketSnapshotPreferenceAsync(string userName, string snapshotName, object userState) {
            if ((this.onBeginRetrieveMarketSnapshotPreferenceDelegate == null)) {
                this.onBeginRetrieveMarketSnapshotPreferenceDelegate = new BeginOperationDelegate(this.OnBeginRetrieveMarketSnapshotPreference);
            }
            if ((this.onEndRetrieveMarketSnapshotPreferenceDelegate == null)) {
                this.onEndRetrieveMarketSnapshotPreferenceDelegate = new EndOperationDelegate(this.OnEndRetrieveMarketSnapshotPreference);
            }
            if ((this.onRetrieveMarketSnapshotPreferenceCompletedDelegate == null)) {
                this.onRetrieveMarketSnapshotPreferenceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveMarketSnapshotPreferenceCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveMarketSnapshotPreferenceDelegate, new object[] {
                        userName,
                        snapshotName}, this.onEndRetrieveMarketSnapshotPreferenceDelegate, this.onRetrieveMarketSnapshotPreferenceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginRetrieveMarketPerformanceSnapshotData(System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketSnapshotPreference> marketSnapshotPreference, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveMarketPerformanceSnapshotData(marketSnapshotPreference, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketPerformanceSnapshotData> GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndRetrieveMarketPerformanceSnapshotData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveMarketPerformanceSnapshotData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveMarketPerformanceSnapshotData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketSnapshotPreference> marketSnapshotPreference = ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketSnapshotPreference>)(inValues[0]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginRetrieveMarketPerformanceSnapshotData(marketSnapshotPreference, callback, asyncState);
        }
        
        private object[] OnEndRetrieveMarketPerformanceSnapshotData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketPerformanceSnapshotData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndRetrieveMarketPerformanceSnapshotData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveMarketPerformanceSnapshotDataCompleted(object state) {
            if ((this.RetrieveMarketPerformanceSnapshotDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveMarketPerformanceSnapshotDataCompleted(this, new RetrieveMarketPerformanceSnapshotDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveMarketPerformanceSnapshotDataAsync(System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketSnapshotPreference> marketSnapshotPreference) {
            this.RetrieveMarketPerformanceSnapshotDataAsync(marketSnapshotPreference, null);
        }
        
        public void RetrieveMarketPerformanceSnapshotDataAsync(System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketSnapshotPreference> marketSnapshotPreference, object userState) {
            if ((this.onBeginRetrieveMarketPerformanceSnapshotDataDelegate == null)) {
                this.onBeginRetrieveMarketPerformanceSnapshotDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveMarketPerformanceSnapshotData);
            }
            if ((this.onEndRetrieveMarketPerformanceSnapshotDataDelegate == null)) {
                this.onEndRetrieveMarketPerformanceSnapshotDataDelegate = new EndOperationDelegate(this.OnEndRetrieveMarketPerformanceSnapshotData);
            }
            if ((this.onRetrieveMarketPerformanceSnapshotDataCompletedDelegate == null)) {
                this.onRetrieveMarketPerformanceSnapshotDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveMarketPerformanceSnapshotDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveMarketPerformanceSnapshotDataDelegate, new object[] {
                        marketSnapshotPreference}, this.onEndRetrieveMarketPerformanceSnapshotDataDelegate, this.onRetrieveMarketPerformanceSnapshotDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginAddMarketSnapshotPerformance(string userId, string snapshotName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddMarketSnapshotPerformance(userId, snapshotName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndAddMarketSnapshotPerformance(System.IAsyncResult result) {
            return base.Channel.EndAddMarketSnapshotPerformance(result);
        }
        
        private System.IAsyncResult OnBeginAddMarketSnapshotPerformance(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userId = ((string)(inValues[0]));
            string snapshotName = ((string)(inValues[1]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginAddMarketSnapshotPerformance(userId, snapshotName, callback, asyncState);
        }
        
        private object[] OnEndAddMarketSnapshotPerformance(System.IAsyncResult result) {
            bool retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndAddMarketSnapshotPerformance(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddMarketSnapshotPerformanceCompleted(object state) {
            if ((this.AddMarketSnapshotPerformanceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddMarketSnapshotPerformanceCompleted(this, new AddMarketSnapshotPerformanceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddMarketSnapshotPerformanceAsync(string userId, string snapshotName) {
            this.AddMarketSnapshotPerformanceAsync(userId, snapshotName, null);
        }
        
        public void AddMarketSnapshotPerformanceAsync(string userId, string snapshotName, object userState) {
            if ((this.onBeginAddMarketSnapshotPerformanceDelegate == null)) {
                this.onBeginAddMarketSnapshotPerformanceDelegate = new BeginOperationDelegate(this.OnBeginAddMarketSnapshotPerformance);
            }
            if ((this.onEndAddMarketSnapshotPerformanceDelegate == null)) {
                this.onEndAddMarketSnapshotPerformanceDelegate = new EndOperationDelegate(this.OnEndAddMarketSnapshotPerformance);
            }
            if ((this.onAddMarketSnapshotPerformanceCompletedDelegate == null)) {
                this.onAddMarketSnapshotPerformanceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddMarketSnapshotPerformanceCompleted);
            }
            base.InvokeAsync(this.onBeginAddMarketSnapshotPerformanceDelegate, new object[] {
                        userId,
                        snapshotName}, this.onEndAddMarketSnapshotPerformanceDelegate, this.onAddMarketSnapshotPerformanceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginUpdateMarketSnapshotPerformance(string userId, string snapshotName, int snapshotPreferenceId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateMarketSnapshotPerformance(userId, snapshotName, snapshotPreferenceId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndUpdateMarketSnapshotPerformance(System.IAsyncResult result) {
            return base.Channel.EndUpdateMarketSnapshotPerformance(result);
        }
        
        private System.IAsyncResult OnBeginUpdateMarketSnapshotPerformance(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userId = ((string)(inValues[0]));
            string snapshotName = ((string)(inValues[1]));
            int snapshotPreferenceId = ((int)(inValues[2]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginUpdateMarketSnapshotPerformance(userId, snapshotName, snapshotPreferenceId, callback, asyncState);
        }
        
        private object[] OnEndUpdateMarketSnapshotPerformance(System.IAsyncResult result) {
            bool retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndUpdateMarketSnapshotPerformance(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateMarketSnapshotPerformanceCompleted(object state) {
            if ((this.UpdateMarketSnapshotPerformanceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateMarketSnapshotPerformanceCompleted(this, new UpdateMarketSnapshotPerformanceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateMarketSnapshotPerformanceAsync(string userId, string snapshotName, int snapshotPreferenceId) {
            this.UpdateMarketSnapshotPerformanceAsync(userId, snapshotName, snapshotPreferenceId, null);
        }
        
        public void UpdateMarketSnapshotPerformanceAsync(string userId, string snapshotName, int snapshotPreferenceId, object userState) {
            if ((this.onBeginUpdateMarketSnapshotPerformanceDelegate == null)) {
                this.onBeginUpdateMarketSnapshotPerformanceDelegate = new BeginOperationDelegate(this.OnBeginUpdateMarketSnapshotPerformance);
            }
            if ((this.onEndUpdateMarketSnapshotPerformanceDelegate == null)) {
                this.onEndUpdateMarketSnapshotPerformanceDelegate = new EndOperationDelegate(this.OnEndUpdateMarketSnapshotPerformance);
            }
            if ((this.onUpdateMarketSnapshotPerformanceCompletedDelegate == null)) {
                this.onUpdateMarketSnapshotPerformanceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateMarketSnapshotPerformanceCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateMarketSnapshotPerformanceDelegate, new object[] {
                        userId,
                        snapshotName,
                        snapshotPreferenceId}, this.onEndUpdateMarketSnapshotPerformanceDelegate, this.onUpdateMarketSnapshotPerformanceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginAddMarketSnapshotGroupPreference(int snapshotPreferenceId, string groupName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddMarketSnapshotGroupPreference(snapshotPreferenceId, groupName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndAddMarketSnapshotGroupPreference(System.IAsyncResult result) {
            return base.Channel.EndAddMarketSnapshotGroupPreference(result);
        }
        
        private System.IAsyncResult OnBeginAddMarketSnapshotGroupPreference(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int snapshotPreferenceId = ((int)(inValues[0]));
            string groupName = ((string)(inValues[1]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginAddMarketSnapshotGroupPreference(snapshotPreferenceId, groupName, callback, asyncState);
        }
        
        private object[] OnEndAddMarketSnapshotGroupPreference(System.IAsyncResult result) {
            bool retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndAddMarketSnapshotGroupPreference(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddMarketSnapshotGroupPreferenceCompleted(object state) {
            if ((this.AddMarketSnapshotGroupPreferenceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddMarketSnapshotGroupPreferenceCompleted(this, new AddMarketSnapshotGroupPreferenceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddMarketSnapshotGroupPreferenceAsync(int snapshotPreferenceId, string groupName) {
            this.AddMarketSnapshotGroupPreferenceAsync(snapshotPreferenceId, groupName, null);
        }
        
        public void AddMarketSnapshotGroupPreferenceAsync(int snapshotPreferenceId, string groupName, object userState) {
            if ((this.onBeginAddMarketSnapshotGroupPreferenceDelegate == null)) {
                this.onBeginAddMarketSnapshotGroupPreferenceDelegate = new BeginOperationDelegate(this.OnBeginAddMarketSnapshotGroupPreference);
            }
            if ((this.onEndAddMarketSnapshotGroupPreferenceDelegate == null)) {
                this.onEndAddMarketSnapshotGroupPreferenceDelegate = new EndOperationDelegate(this.OnEndAddMarketSnapshotGroupPreference);
            }
            if ((this.onAddMarketSnapshotGroupPreferenceCompletedDelegate == null)) {
                this.onAddMarketSnapshotGroupPreferenceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddMarketSnapshotGroupPreferenceCompleted);
            }
            base.InvokeAsync(this.onBeginAddMarketSnapshotGroupPreferenceDelegate, new object[] {
                        snapshotPreferenceId,
                        groupName}, this.onEndAddMarketSnapshotGroupPreferenceDelegate, this.onAddMarketSnapshotGroupPreferenceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginRemoveMarketSnapshotGroupPreference(int groupPreferenceId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveMarketSnapshotGroupPreference(groupPreferenceId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndRemoveMarketSnapshotGroupPreference(System.IAsyncResult result) {
            return base.Channel.EndRemoveMarketSnapshotGroupPreference(result);
        }
        
        private System.IAsyncResult OnBeginRemoveMarketSnapshotGroupPreference(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int groupPreferenceId = ((int)(inValues[0]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginRemoveMarketSnapshotGroupPreference(groupPreferenceId, callback, asyncState);
        }
        
        private object[] OnEndRemoveMarketSnapshotGroupPreference(System.IAsyncResult result) {
            bool retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndRemoveMarketSnapshotGroupPreference(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRemoveMarketSnapshotGroupPreferenceCompleted(object state) {
            if ((this.RemoveMarketSnapshotGroupPreferenceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveMarketSnapshotGroupPreferenceCompleted(this, new RemoveMarketSnapshotGroupPreferenceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveMarketSnapshotGroupPreferenceAsync(int groupPreferenceId) {
            this.RemoveMarketSnapshotGroupPreferenceAsync(groupPreferenceId, null);
        }
        
        public void RemoveMarketSnapshotGroupPreferenceAsync(int groupPreferenceId, object userState) {
            if ((this.onBeginRemoveMarketSnapshotGroupPreferenceDelegate == null)) {
                this.onBeginRemoveMarketSnapshotGroupPreferenceDelegate = new BeginOperationDelegate(this.OnBeginRemoveMarketSnapshotGroupPreference);
            }
            if ((this.onEndRemoveMarketSnapshotGroupPreferenceDelegate == null)) {
                this.onEndRemoveMarketSnapshotGroupPreferenceDelegate = new EndOperationDelegate(this.OnEndRemoveMarketSnapshotGroupPreference);
            }
            if ((this.onRemoveMarketSnapshotGroupPreferenceCompletedDelegate == null)) {
                this.onRemoveMarketSnapshotGroupPreferenceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveMarketSnapshotGroupPreferenceCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveMarketSnapshotGroupPreferenceDelegate, new object[] {
                        groupPreferenceId}, this.onEndRemoveMarketSnapshotGroupPreferenceDelegate, this.onRemoveMarketSnapshotGroupPreferenceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginAddMarketSnapshotEntityPreference(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketSnapshotPreference marketSnapshotPreference, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddMarketSnapshotEntityPreference(marketSnapshotPreference, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndAddMarketSnapshotEntityPreference(System.IAsyncResult result) {
            return base.Channel.EndAddMarketSnapshotEntityPreference(result);
        }
        
        private System.IAsyncResult OnBeginAddMarketSnapshotEntityPreference(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketSnapshotPreference marketSnapshotPreference = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketSnapshotPreference)(inValues[0]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginAddMarketSnapshotEntityPreference(marketSnapshotPreference, callback, asyncState);
        }
        
        private object[] OnEndAddMarketSnapshotEntityPreference(System.IAsyncResult result) {
            bool retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndAddMarketSnapshotEntityPreference(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddMarketSnapshotEntityPreferenceCompleted(object state) {
            if ((this.AddMarketSnapshotEntityPreferenceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddMarketSnapshotEntityPreferenceCompleted(this, new AddMarketSnapshotEntityPreferenceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddMarketSnapshotEntityPreferenceAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketSnapshotPreference marketSnapshotPreference) {
            this.AddMarketSnapshotEntityPreferenceAsync(marketSnapshotPreference, null);
        }
        
        public void AddMarketSnapshotEntityPreferenceAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketSnapshotPreference marketSnapshotPreference, object userState) {
            if ((this.onBeginAddMarketSnapshotEntityPreferenceDelegate == null)) {
                this.onBeginAddMarketSnapshotEntityPreferenceDelegate = new BeginOperationDelegate(this.OnBeginAddMarketSnapshotEntityPreference);
            }
            if ((this.onEndAddMarketSnapshotEntityPreferenceDelegate == null)) {
                this.onEndAddMarketSnapshotEntityPreferenceDelegate = new EndOperationDelegate(this.OnEndAddMarketSnapshotEntityPreference);
            }
            if ((this.onAddMarketSnapshotEntityPreferenceCompletedDelegate == null)) {
                this.onAddMarketSnapshotEntityPreferenceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddMarketSnapshotEntityPreferenceCompleted);
            }
            base.InvokeAsync(this.onBeginAddMarketSnapshotEntityPreferenceDelegate, new object[] {
                        marketSnapshotPreference}, this.onEndAddMarketSnapshotEntityPreferenceDelegate, this.onAddMarketSnapshotEntityPreferenceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginRemoveMarketSnapshotEntityPreference(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketSnapshotPreference marketSnapshotPreference, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveMarketSnapshotEntityPreference(marketSnapshotPreference, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndRemoveMarketSnapshotEntityPreference(System.IAsyncResult result) {
            return base.Channel.EndRemoveMarketSnapshotEntityPreference(result);
        }
        
        private System.IAsyncResult OnBeginRemoveMarketSnapshotEntityPreference(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketSnapshotPreference marketSnapshotPreference = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketSnapshotPreference)(inValues[0]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginRemoveMarketSnapshotEntityPreference(marketSnapshotPreference, callback, asyncState);
        }
        
        private object[] OnEndRemoveMarketSnapshotEntityPreference(System.IAsyncResult result) {
            bool retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndRemoveMarketSnapshotEntityPreference(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRemoveMarketSnapshotEntityPreferenceCompleted(object state) {
            if ((this.RemoveMarketSnapshotEntityPreferenceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveMarketSnapshotEntityPreferenceCompleted(this, new RemoveMarketSnapshotEntityPreferenceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveMarketSnapshotEntityPreferenceAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketSnapshotPreference marketSnapshotPreference) {
            this.RemoveMarketSnapshotEntityPreferenceAsync(marketSnapshotPreference, null);
        }
        
        public void RemoveMarketSnapshotEntityPreferenceAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketSnapshotPreference marketSnapshotPreference, object userState) {
            if ((this.onBeginRemoveMarketSnapshotEntityPreferenceDelegate == null)) {
                this.onBeginRemoveMarketSnapshotEntityPreferenceDelegate = new BeginOperationDelegate(this.OnBeginRemoveMarketSnapshotEntityPreference);
            }
            if ((this.onEndRemoveMarketSnapshotEntityPreferenceDelegate == null)) {
                this.onEndRemoveMarketSnapshotEntityPreferenceDelegate = new EndOperationDelegate(this.OnEndRemoveMarketSnapshotEntityPreference);
            }
            if ((this.onRemoveMarketSnapshotEntityPreferenceCompletedDelegate == null)) {
                this.onRemoveMarketSnapshotEntityPreferenceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveMarketSnapshotEntityPreferenceCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveMarketSnapshotEntityPreferenceDelegate, new object[] {
                        marketSnapshotPreference}, this.onEndRemoveMarketSnapshotEntityPreferenceDelegate, this.onRemoveMarketSnapshotEntityPreferenceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginRetrievePortfolioRiskReturnData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrievePortfolioRiskReturnData(fundSelectionData, benchmarkSelectionData, effectiveDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioRiskReturnData> GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndRetrievePortfolioRiskReturnData(System.IAsyncResult result) {
            return base.Channel.EndRetrievePortfolioRiskReturnData(result);
        }
        
        private System.IAsyncResult OnBeginRetrievePortfolioRiskReturnData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData)(inValues[0]));
            GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData)(inValues[1]));
            System.DateTime effectiveDate = ((System.DateTime)(inValues[2]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginRetrievePortfolioRiskReturnData(fundSelectionData, benchmarkSelectionData, effectiveDate, callback, asyncState);
        }
        
        private object[] OnEndRetrievePortfolioRiskReturnData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioRiskReturnData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndRetrievePortfolioRiskReturnData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrievePortfolioRiskReturnDataCompleted(object state) {
            if ((this.RetrievePortfolioRiskReturnDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrievePortfolioRiskReturnDataCompleted(this, new RetrievePortfolioRiskReturnDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrievePortfolioRiskReturnDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate) {
            this.RetrievePortfolioRiskReturnDataAsync(fundSelectionData, benchmarkSelectionData, effectiveDate, null);
        }
        
        public void RetrievePortfolioRiskReturnDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate, object userState) {
            if ((this.onBeginRetrievePortfolioRiskReturnDataDelegate == null)) {
                this.onBeginRetrievePortfolioRiskReturnDataDelegate = new BeginOperationDelegate(this.OnBeginRetrievePortfolioRiskReturnData);
            }
            if ((this.onEndRetrievePortfolioRiskReturnDataDelegate == null)) {
                this.onEndRetrievePortfolioRiskReturnDataDelegate = new EndOperationDelegate(this.OnEndRetrievePortfolioRiskReturnData);
            }
            if ((this.onRetrievePortfolioRiskReturnDataCompletedDelegate == null)) {
                this.onRetrievePortfolioRiskReturnDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrievePortfolioRiskReturnDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrievePortfolioRiskReturnDataDelegate, new object[] {
                        fundSelectionData,
                        benchmarkSelectionData,
                        effectiveDate}, this.onEndRetrievePortfolioRiskReturnDataDelegate, this.onRetrievePortfolioRiskReturnDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginRetrieveHeatMapData(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveHeatMapData(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.HeatMapData> GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndRetrieveHeatMapData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveHeatMapData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveHeatMapData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginRetrieveHeatMapData(callback, asyncState);
        }
        
        private object[] OnEndRetrieveHeatMapData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.HeatMapData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndRetrieveHeatMapData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveHeatMapDataCompleted(object state) {
            if ((this.RetrieveHeatMapDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveHeatMapDataCompleted(this, new RetrieveHeatMapDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveHeatMapDataAsync() {
            this.RetrieveHeatMapDataAsync(null);
        }
        
        public void RetrieveHeatMapDataAsync(object userState) {
            if ((this.onBeginRetrieveHeatMapDataDelegate == null)) {
                this.onBeginRetrieveHeatMapDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveHeatMapData);
            }
            if ((this.onEndRetrieveHeatMapDataDelegate == null)) {
                this.onEndRetrieveHeatMapDataDelegate = new EndOperationDelegate(this.OnEndRetrieveHeatMapData);
            }
            if ((this.onRetrieveHeatMapDataCompletedDelegate == null)) {
                this.onRetrieveHeatMapDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveHeatMapDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveHeatMapDataDelegate, null, this.onEndRetrieveHeatMapDataDelegate, this.onRetrieveHeatMapDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginRetrieveRelativePerformanceSectorData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveRelativePerformanceSectorData(fundSelectionData, benchmarkSelectionData, effectiveDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceSectorData> GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndRetrieveRelativePerformanceSectorData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveRelativePerformanceSectorData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveRelativePerformanceSectorData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData)(inValues[0]));
            GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData)(inValues[1]));
            System.DateTime effectiveDate = ((System.DateTime)(inValues[2]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginRetrieveRelativePerformanceSectorData(fundSelectionData, benchmarkSelectionData, effectiveDate, callback, asyncState);
        }
        
        private object[] OnEndRetrieveRelativePerformanceSectorData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceSectorData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndRetrieveRelativePerformanceSectorData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveRelativePerformanceSectorDataCompleted(object state) {
            if ((this.RetrieveRelativePerformanceSectorDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveRelativePerformanceSectorDataCompleted(this, new RetrieveRelativePerformanceSectorDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveRelativePerformanceSectorDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate) {
            this.RetrieveRelativePerformanceSectorDataAsync(fundSelectionData, benchmarkSelectionData, effectiveDate, null);
        }
        
        public void RetrieveRelativePerformanceSectorDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate, object userState) {
            if ((this.onBeginRetrieveRelativePerformanceSectorDataDelegate == null)) {
                this.onBeginRetrieveRelativePerformanceSectorDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveRelativePerformanceSectorData);
            }
            if ((this.onEndRetrieveRelativePerformanceSectorDataDelegate == null)) {
                this.onEndRetrieveRelativePerformanceSectorDataDelegate = new EndOperationDelegate(this.OnEndRetrieveRelativePerformanceSectorData);
            }
            if ((this.onRetrieveRelativePerformanceSectorDataCompletedDelegate == null)) {
                this.onRetrieveRelativePerformanceSectorDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveRelativePerformanceSectorDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveRelativePerformanceSectorDataDelegate, new object[] {
                        fundSelectionData,
                        benchmarkSelectionData,
                        effectiveDate}, this.onEndRetrieveRelativePerformanceSectorDataDelegate, this.onRetrieveRelativePerformanceSectorDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginRetrieveRelativePerformanceCountryActivePositionData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate, string countryID, System.Nullable<int> sectorID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveRelativePerformanceCountryActivePositionData(fundSelectionData, benchmarkSelectionData, effectiveDate, countryID, sectorID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceActivePositionData> GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndRetrieveRelativePerformanceCountryActivePositionData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveRelativePerformanceCountryActivePositionData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveRelativePerformanceCountryActivePositionData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData)(inValues[0]));
            GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData)(inValues[1]));
            System.DateTime effectiveDate = ((System.DateTime)(inValues[2]));
            string countryID = ((string)(inValues[3]));
            System.Nullable<int> sectorID = ((System.Nullable<int>)(inValues[4]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginRetrieveRelativePerformanceCountryActivePositionData(fundSelectionData, benchmarkSelectionData, effectiveDate, countryID, sectorID, callback, asyncState);
        }
        
        private object[] OnEndRetrieveRelativePerformanceCountryActivePositionData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceActivePositionData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndRetrieveRelativePerformanceCountryActivePositionData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveRelativePerformanceCountryActivePositionDataCompleted(object state) {
            if ((this.RetrieveRelativePerformanceCountryActivePositionDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveRelativePerformanceCountryActivePositionDataCompleted(this, new RetrieveRelativePerformanceCountryActivePositionDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveRelativePerformanceCountryActivePositionDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate, string countryID, System.Nullable<int> sectorID) {
            this.RetrieveRelativePerformanceCountryActivePositionDataAsync(fundSelectionData, benchmarkSelectionData, effectiveDate, countryID, sectorID, null);
        }
        
        public void RetrieveRelativePerformanceCountryActivePositionDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate, string countryID, System.Nullable<int> sectorID, object userState) {
            if ((this.onBeginRetrieveRelativePerformanceCountryActivePositionDataDelegate == null)) {
                this.onBeginRetrieveRelativePerformanceCountryActivePositionDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveRelativePerformanceCountryActivePositionData);
            }
            if ((this.onEndRetrieveRelativePerformanceCountryActivePositionDataDelegate == null)) {
                this.onEndRetrieveRelativePerformanceCountryActivePositionDataDelegate = new EndOperationDelegate(this.OnEndRetrieveRelativePerformanceCountryActivePositionData);
            }
            if ((this.onRetrieveRelativePerformanceCountryActivePositionDataCompletedDelegate == null)) {
                this.onRetrieveRelativePerformanceCountryActivePositionDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveRelativePerformanceCountryActivePositionDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveRelativePerformanceCountryActivePositionDataDelegate, new object[] {
                        fundSelectionData,
                        benchmarkSelectionData,
                        effectiveDate,
                        countryID,
                        sectorID}, this.onEndRetrieveRelativePerformanceCountryActivePositionDataDelegate, this.onRetrieveRelativePerformanceCountryActivePositionDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginRetrieveRelativePerformanceSectorActivePositionData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate, string countryID, System.Nullable<int> sectorID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveRelativePerformanceSectorActivePositionData(fundSelectionData, benchmarkSelectionData, effectiveDate, countryID, sectorID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceActivePositionData> GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndRetrieveRelativePerformanceSectorActivePositionData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveRelativePerformanceSectorActivePositionData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveRelativePerformanceSectorActivePositionData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData)(inValues[0]));
            GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData)(inValues[1]));
            System.DateTime effectiveDate = ((System.DateTime)(inValues[2]));
            string countryID = ((string)(inValues[3]));
            System.Nullable<int> sectorID = ((System.Nullable<int>)(inValues[4]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginRetrieveRelativePerformanceSectorActivePositionData(fundSelectionData, benchmarkSelectionData, effectiveDate, countryID, sectorID, callback, asyncState);
        }
        
        private object[] OnEndRetrieveRelativePerformanceSectorActivePositionData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceActivePositionData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndRetrieveRelativePerformanceSectorActivePositionData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveRelativePerformanceSectorActivePositionDataCompleted(object state) {
            if ((this.RetrieveRelativePerformanceSectorActivePositionDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveRelativePerformanceSectorActivePositionDataCompleted(this, new RetrieveRelativePerformanceSectorActivePositionDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveRelativePerformanceSectorActivePositionDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate, string countryID, System.Nullable<int> sectorID) {
            this.RetrieveRelativePerformanceSectorActivePositionDataAsync(fundSelectionData, benchmarkSelectionData, effectiveDate, countryID, sectorID, null);
        }
        
        public void RetrieveRelativePerformanceSectorActivePositionDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate, string countryID, System.Nullable<int> sectorID, object userState) {
            if ((this.onBeginRetrieveRelativePerformanceSectorActivePositionDataDelegate == null)) {
                this.onBeginRetrieveRelativePerformanceSectorActivePositionDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveRelativePerformanceSectorActivePositionData);
            }
            if ((this.onEndRetrieveRelativePerformanceSectorActivePositionDataDelegate == null)) {
                this.onEndRetrieveRelativePerformanceSectorActivePositionDataDelegate = new EndOperationDelegate(this.OnEndRetrieveRelativePerformanceSectorActivePositionData);
            }
            if ((this.onRetrieveRelativePerformanceSectorActivePositionDataCompletedDelegate == null)) {
                this.onRetrieveRelativePerformanceSectorActivePositionDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveRelativePerformanceSectorActivePositionDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveRelativePerformanceSectorActivePositionDataDelegate, new object[] {
                        fundSelectionData,
                        benchmarkSelectionData,
                        effectiveDate,
                        countryID,
                        sectorID}, this.onEndRetrieveRelativePerformanceSectorActivePositionDataDelegate, this.onRetrieveRelativePerformanceSectorActivePositionDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginRetrieveRelativePerformanceSecurityActivePositionData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate, string countryID, System.Nullable<int> sectorID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveRelativePerformanceSecurityActivePositionData(fundSelectionData, benchmarkSelectionData, effectiveDate, countryID, sectorID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceActivePositionData> GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndRetrieveRelativePerformanceSecurityActivePositionData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveRelativePerformanceSecurityActivePositionData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveRelativePerformanceSecurityActivePositionData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData)(inValues[0]));
            GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData)(inValues[1]));
            System.DateTime effectiveDate = ((System.DateTime)(inValues[2]));
            string countryID = ((string)(inValues[3]));
            System.Nullable<int> sectorID = ((System.Nullable<int>)(inValues[4]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginRetrieveRelativePerformanceSecurityActivePositionData(fundSelectionData, benchmarkSelectionData, effectiveDate, countryID, sectorID, callback, asyncState);
        }
        
        private object[] OnEndRetrieveRelativePerformanceSecurityActivePositionData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceActivePositionData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndRetrieveRelativePerformanceSecurityActivePositionData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveRelativePerformanceSecurityActivePositionDataCompleted(object state) {
            if ((this.RetrieveRelativePerformanceSecurityActivePositionDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveRelativePerformanceSecurityActivePositionDataCompleted(this, new RetrieveRelativePerformanceSecurityActivePositionDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveRelativePerformanceSecurityActivePositionDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate, string countryID, System.Nullable<int> sectorID) {
            this.RetrieveRelativePerformanceSecurityActivePositionDataAsync(fundSelectionData, benchmarkSelectionData, effectiveDate, countryID, sectorID, null);
        }
        
        public void RetrieveRelativePerformanceSecurityActivePositionDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate, string countryID, System.Nullable<int> sectorID, object userState) {
            if ((this.onBeginRetrieveRelativePerformanceSecurityActivePositionDataDelegate == null)) {
                this.onBeginRetrieveRelativePerformanceSecurityActivePositionDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveRelativePerformanceSecurityActivePositionData);
            }
            if ((this.onEndRetrieveRelativePerformanceSecurityActivePositionDataDelegate == null)) {
                this.onEndRetrieveRelativePerformanceSecurityActivePositionDataDelegate = new EndOperationDelegate(this.OnEndRetrieveRelativePerformanceSecurityActivePositionData);
            }
            if ((this.onRetrieveRelativePerformanceSecurityActivePositionDataCompletedDelegate == null)) {
                this.onRetrieveRelativePerformanceSecurityActivePositionDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveRelativePerformanceSecurityActivePositionDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveRelativePerformanceSecurityActivePositionDataDelegate, new object[] {
                        fundSelectionData,
                        benchmarkSelectionData,
                        effectiveDate,
                        countryID,
                        sectorID}, this.onEndRetrieveRelativePerformanceSecurityActivePositionDataDelegate, this.onRetrieveRelativePerformanceSecurityActivePositionDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginRetrieveRelativePerformanceSecurityData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate, string countryID, System.Nullable<int> sectorID, int order, System.Nullable<int> maxRecords, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveRelativePerformanceSecurityData(fundSelectionData, benchmarkSelectionData, effectiveDate, countryID, sectorID, order, maxRecords, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceSecurityData> GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndRetrieveRelativePerformanceSecurityData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveRelativePerformanceSecurityData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveRelativePerformanceSecurityData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData)(inValues[0]));
            GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData)(inValues[1]));
            System.DateTime effectiveDate = ((System.DateTime)(inValues[2]));
            string countryID = ((string)(inValues[3]));
            System.Nullable<int> sectorID = ((System.Nullable<int>)(inValues[4]));
            int order = ((int)(inValues[5]));
            System.Nullable<int> maxRecords = ((System.Nullable<int>)(inValues[6]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginRetrieveRelativePerformanceSecurityData(fundSelectionData, benchmarkSelectionData, effectiveDate, countryID, sectorID, order, maxRecords, callback, asyncState);
        }
        
        private object[] OnEndRetrieveRelativePerformanceSecurityData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceSecurityData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndRetrieveRelativePerformanceSecurityData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveRelativePerformanceSecurityDataCompleted(object state) {
            if ((this.RetrieveRelativePerformanceSecurityDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveRelativePerformanceSecurityDataCompleted(this, new RetrieveRelativePerformanceSecurityDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveRelativePerformanceSecurityDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate, string countryID, System.Nullable<int> sectorID, int order, System.Nullable<int> maxRecords) {
            this.RetrieveRelativePerformanceSecurityDataAsync(fundSelectionData, benchmarkSelectionData, effectiveDate, countryID, sectorID, order, maxRecords, null);
        }
        
        public void RetrieveRelativePerformanceSecurityDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate, string countryID, System.Nullable<int> sectorID, int order, System.Nullable<int> maxRecords, object userState) {
            if ((this.onBeginRetrieveRelativePerformanceSecurityDataDelegate == null)) {
                this.onBeginRetrieveRelativePerformanceSecurityDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveRelativePerformanceSecurityData);
            }
            if ((this.onEndRetrieveRelativePerformanceSecurityDataDelegate == null)) {
                this.onEndRetrieveRelativePerformanceSecurityDataDelegate = new EndOperationDelegate(this.OnEndRetrieveRelativePerformanceSecurityData);
            }
            if ((this.onRetrieveRelativePerformanceSecurityDataCompletedDelegate == null)) {
                this.onRetrieveRelativePerformanceSecurityDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveRelativePerformanceSecurityDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveRelativePerformanceSecurityDataDelegate, new object[] {
                        fundSelectionData,
                        benchmarkSelectionData,
                        effectiveDate,
                        countryID,
                        sectorID,
                        order,
                        maxRecords}, this.onEndRetrieveRelativePerformanceSecurityDataDelegate, this.onRetrieveRelativePerformanceSecurityDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginRetrieveRelativePerformanceData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveRelativePerformanceData(fundSelectionData, benchmarkSelectionData, effectiveDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceData> GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndRetrieveRelativePerformanceData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveRelativePerformanceData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveRelativePerformanceData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData)(inValues[0]));
            GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData)(inValues[1]));
            System.DateTime effectiveDate = ((System.DateTime)(inValues[2]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginRetrieveRelativePerformanceData(fundSelectionData, benchmarkSelectionData, effectiveDate, callback, asyncState);
        }
        
        private object[] OnEndRetrieveRelativePerformanceData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndRetrieveRelativePerformanceData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveRelativePerformanceDataCompleted(object state) {
            if ((this.RetrieveRelativePerformanceDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveRelativePerformanceDataCompleted(this, new RetrieveRelativePerformanceDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveRelativePerformanceDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate) {
            this.RetrieveRelativePerformanceDataAsync(fundSelectionData, benchmarkSelectionData, effectiveDate, null);
        }
        
        public void RetrieveRelativePerformanceDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate, object userState) {
            if ((this.onBeginRetrieveRelativePerformanceDataDelegate == null)) {
                this.onBeginRetrieveRelativePerformanceDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveRelativePerformanceData);
            }
            if ((this.onEndRetrieveRelativePerformanceDataDelegate == null)) {
                this.onEndRetrieveRelativePerformanceDataDelegate = new EndOperationDelegate(this.OnEndRetrieveRelativePerformanceData);
            }
            if ((this.onRetrieveRelativePerformanceDataCompletedDelegate == null)) {
                this.onRetrieveRelativePerformanceDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveRelativePerformanceDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveRelativePerformanceDataDelegate, new object[] {
                        fundSelectionData,
                        benchmarkSelectionData,
                        effectiveDate}, this.onEndRetrieveRelativePerformanceDataDelegate, this.onRetrieveRelativePerformanceDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginRetrievePerformanceGraphData(string nameOfFund, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrievePerformanceGraphData(nameOfFund, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PerformanceGraphData> GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndRetrievePerformanceGraphData(System.IAsyncResult result) {
            return base.Channel.EndRetrievePerformanceGraphData(result);
        }
        
        private System.IAsyncResult OnBeginRetrievePerformanceGraphData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string nameOfFund = ((string)(inValues[0]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginRetrievePerformanceGraphData(nameOfFund, callback, asyncState);
        }
        
        private object[] OnEndRetrievePerformanceGraphData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PerformanceGraphData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndRetrievePerformanceGraphData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrievePerformanceGraphDataCompleted(object state) {
            if ((this.RetrievePerformanceGraphDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrievePerformanceGraphDataCompleted(this, new RetrievePerformanceGraphDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrievePerformanceGraphDataAsync(string nameOfFund) {
            this.RetrievePerformanceGraphDataAsync(nameOfFund, null);
        }
        
        public void RetrievePerformanceGraphDataAsync(string nameOfFund, object userState) {
            if ((this.onBeginRetrievePerformanceGraphDataDelegate == null)) {
                this.onBeginRetrievePerformanceGraphDataDelegate = new BeginOperationDelegate(this.OnBeginRetrievePerformanceGraphData);
            }
            if ((this.onEndRetrievePerformanceGraphDataDelegate == null)) {
                this.onEndRetrievePerformanceGraphDataDelegate = new EndOperationDelegate(this.OnEndRetrievePerformanceGraphData);
            }
            if ((this.onRetrievePerformanceGraphDataCompletedDelegate == null)) {
                this.onRetrievePerformanceGraphDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrievePerformanceGraphDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrievePerformanceGraphDataDelegate, new object[] {
                        nameOfFund}, this.onEndRetrievePerformanceGraphDataDelegate, this.onRetrievePerformanceGraphDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginRetrievePerformanceGridData(string nameOfFund, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrievePerformanceGridData(nameOfFund, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PerformanceGridData> GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndRetrievePerformanceGridData(System.IAsyncResult result) {
            return base.Channel.EndRetrievePerformanceGridData(result);
        }
        
        private System.IAsyncResult OnBeginRetrievePerformanceGridData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string nameOfFund = ((string)(inValues[0]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginRetrievePerformanceGridData(nameOfFund, callback, asyncState);
        }
        
        private object[] OnEndRetrievePerformanceGridData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PerformanceGridData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndRetrievePerformanceGridData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrievePerformanceGridDataCompleted(object state) {
            if ((this.RetrievePerformanceGridDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrievePerformanceGridDataCompleted(this, new RetrievePerformanceGridDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrievePerformanceGridDataAsync(string nameOfFund) {
            this.RetrievePerformanceGridDataAsync(nameOfFund, null);
        }
        
        public void RetrievePerformanceGridDataAsync(string nameOfFund, object userState) {
            if ((this.onBeginRetrievePerformanceGridDataDelegate == null)) {
                this.onBeginRetrievePerformanceGridDataDelegate = new BeginOperationDelegate(this.OnBeginRetrievePerformanceGridData);
            }
            if ((this.onEndRetrievePerformanceGridDataDelegate == null)) {
                this.onEndRetrievePerformanceGridDataDelegate = new EndOperationDelegate(this.OnEndRetrievePerformanceGridData);
            }
            if ((this.onRetrievePerformanceGridDataCompletedDelegate == null)) {
                this.onRetrievePerformanceGridDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrievePerformanceGridDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrievePerformanceGridDataDelegate, new object[] {
                        nameOfFund}, this.onEndRetrievePerformanceGridDataDelegate, this.onRetrievePerformanceGridDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginRetrieveAttributionData(string nameOfFund, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveAttributionData(nameOfFund, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.AttributionData> GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndRetrieveAttributionData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveAttributionData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveAttributionData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string nameOfFund = ((string)(inValues[0]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginRetrieveAttributionData(nameOfFund, callback, asyncState);
        }
        
        private object[] OnEndRetrieveAttributionData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.AttributionData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndRetrieveAttributionData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveAttributionDataCompleted(object state) {
            if ((this.RetrieveAttributionDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveAttributionDataCompleted(this, new RetrieveAttributionDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveAttributionDataAsync(string nameOfFund) {
            this.RetrieveAttributionDataAsync(nameOfFund, null);
        }
        
        public void RetrieveAttributionDataAsync(string nameOfFund, object userState) {
            if ((this.onBeginRetrieveAttributionDataDelegate == null)) {
                this.onBeginRetrieveAttributionDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveAttributionData);
            }
            if ((this.onEndRetrieveAttributionDataDelegate == null)) {
                this.onEndRetrieveAttributionDataDelegate = new EndOperationDelegate(this.OnEndRetrieveAttributionData);
            }
            if ((this.onRetrieveAttributionDataCompletedDelegate == null)) {
                this.onRetrieveAttributionDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveAttributionDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveAttributionDataDelegate, new object[] {
                        nameOfFund}, this.onEndRetrieveAttributionDataDelegate, this.onRetrieveAttributionDataCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations CreateChannel() {
            return new BenchmarkHoldingsPerformanceOperationsClientChannel(this);
        }
        
        private class BenchmarkHoldingsPerformanceOperationsClientChannel : ChannelBase<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations>, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations {
            
            public BenchmarkHoldingsPerformanceOperationsClientChannel(System.ServiceModel.ClientBase<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginTemp(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PeriodSelectionData data, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = data;
                System.IAsyncResult _result = base.BeginInvoke("Temp", _args, callback, asyncState);
                return _result;
            }
            
            public void EndTemp(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("Temp", _args, result);
            }
            
            public System.IAsyncResult BeginRetrievePortfolioSelectionData(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("RetrievePortfolioSelectionData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData> EndRetrievePortfolioSelectionData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData>)(base.EndInvoke("RetrievePortfolioSelectionData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveBenchmarkSelectionData(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("RetrieveBenchmarkSelectionData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData> EndRetrieveBenchmarkSelectionData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData>)(base.EndInvoke("RetrieveBenchmarkSelectionData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveSectorBreakdownData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = portfolioSelectionData;
                _args[1] = effectiveDate;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveSectorBreakdownData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.SectorBreakdownData> EndRetrieveSectorBreakdownData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.SectorBreakdownData> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.SectorBreakdownData>)(base.EndInvoke("RetrieveSectorBreakdownData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveRegionBreakdownData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = portfolioSelectionData;
                _args[1] = effectiveDate;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveRegionBreakdownData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RegionBreakdownData> EndRetrieveRegionBreakdownData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RegionBreakdownData> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RegionBreakdownData>)(base.EndInvoke("RetrieveRegionBreakdownData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveTopHoldingsData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = portfolioSelectionData;
                _args[1] = effectiveDate;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveTopHoldingsData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.TopHoldingsData> EndRetrieveTopHoldingsData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.TopHoldingsData> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.TopHoldingsData>)(base.EndInvoke("RetrieveTopHoldingsData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveIndexConstituentsData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = portfolioSelectionData;
                _args[1] = effectiveDate;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveIndexConstituentsData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.IndexConstituentsData> EndRetrieveIndexConstituentsData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.IndexConstituentsData> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.IndexConstituentsData>)(base.EndInvoke("RetrieveIndexConstituentsData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveValuesForFilters(string filterType, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = filterType;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveValuesForFilters", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<string> EndRetrieveValuesForFilters(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<string> _result = ((System.Collections.Generic.List<string>)(base.EndInvoke("RetrieveValuesForFilters", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrievePortfolioDetailsData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData objPortfolioIdentifier, System.DateTime objSelectedDate, bool objGetBenchmark, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = objPortfolioIdentifier;
                _args[1] = objSelectedDate;
                _args[2] = objGetBenchmark;
                System.IAsyncResult _result = base.BeginInvoke("RetrievePortfolioDetailsData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioDetailsData> EndRetrievePortfolioDetailsData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioDetailsData> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioDetailsData>)(base.EndInvoke("RetrievePortfolioDetailsData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveBenchmarkChartReturnData(System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData> objBenchmarkIdentifier, System.DateTime objEffectiveDate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = objBenchmarkIdentifier;
                _args[1] = objEffectiveDate;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveBenchmarkChartReturnData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkChartReturnData> EndRetrieveBenchmarkChartReturnData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkChartReturnData> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkChartReturnData>)(base.EndInvoke("RetrieveBenchmarkChartReturnData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveBenchmarkGridReturnData(System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData> objBenchmarkIdentifier, System.DateTime objEffectiveDate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = objBenchmarkIdentifier;
                _args[1] = objEffectiveDate;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveBenchmarkGridReturnData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkGridReturnData> EndRetrieveBenchmarkGridReturnData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkGridReturnData> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkGridReturnData>)(base.EndInvoke("RetrieveBenchmarkGridReturnData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveHoldingsPercentageData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string filterType, string filterValue, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = portfolioSelectionData;
                _args[1] = effectiveDate;
                _args[2] = filterType;
                _args[3] = filterValue;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveHoldingsPercentageData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.HoldingsPercentageData> EndRetrieveHoldingsPercentageData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.HoldingsPercentageData> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.HoldingsPercentageData>)(base.EndInvoke("RetrieveHoldingsPercentageData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveHoldingsPercentageDataForRegion(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string filterType, string filterValue, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = portfolioSelectionData;
                _args[1] = effectiveDate;
                _args[2] = filterType;
                _args[3] = filterValue;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveHoldingsPercentageDataForRegion", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.HoldingsPercentageData> EndRetrieveHoldingsPercentageDataForRegion(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.HoldingsPercentageData> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.HoldingsPercentageData>)(base.EndInvoke("RetrieveHoldingsPercentageDataForRegion", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveTopBenchmarkSecuritiesData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = portfolioSelectionData;
                _args[1] = effectiveDate;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveTopBenchmarkSecuritiesData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.TopBenchmarkSecuritiesData> EndRetrieveTopBenchmarkSecuritiesData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.TopBenchmarkSecuritiesData> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.TopBenchmarkSecuritiesData>)(base.EndInvoke("RetrieveTopBenchmarkSecuritiesData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveMarketCapitalizationData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = fundSelectionData;
                _args[1] = benchmarkSelectionData;
                _args[2] = effectiveDate;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveMarketCapitalizationData", _args, callback, asyncState);
                return _result;
            }
            
            public GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketCapitalizationData EndRetrieveMarketCapitalizationData(System.IAsyncResult result) {
                object[] _args = new object[0];
                GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketCapitalizationData _result = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketCapitalizationData)(base.EndInvoke("RetrieveMarketCapitalizationData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveAssetAllocationData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = portfolioSelectionData;
                _args[1] = effectiveDate;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveAssetAllocationData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.AssetAllocationData> EndRetrieveAssetAllocationData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.AssetAllocationData> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.AssetAllocationData>)(base.EndInvoke("RetrieveAssetAllocationData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveMarketSnapshotSelectionData(string userName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = userName;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveMarketSnapshotSelectionData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketSnapshotSelectionData> EndRetrieveMarketSnapshotSelectionData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketSnapshotSelectionData> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketSnapshotSelectionData>)(base.EndInvoke("RetrieveMarketSnapshotSelectionData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveMarketSnapshotPreference(string userName, string snapshotName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = userName;
                _args[1] = snapshotName;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveMarketSnapshotPreference", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketSnapshotPreference> EndRetrieveMarketSnapshotPreference(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketSnapshotPreference> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketSnapshotPreference>)(base.EndInvoke("RetrieveMarketSnapshotPreference", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveMarketPerformanceSnapshotData(System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketSnapshotPreference> marketSnapshotPreference, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = marketSnapshotPreference;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveMarketPerformanceSnapshotData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketPerformanceSnapshotData> EndRetrieveMarketPerformanceSnapshotData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketPerformanceSnapshotData> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketPerformanceSnapshotData>)(base.EndInvoke("RetrieveMarketPerformanceSnapshotData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddMarketSnapshotPerformance(string userId, string snapshotName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = userId;
                _args[1] = snapshotName;
                System.IAsyncResult _result = base.BeginInvoke("AddMarketSnapshotPerformance", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndAddMarketSnapshotPerformance(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("AddMarketSnapshotPerformance", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateMarketSnapshotPerformance(string userId, string snapshotName, int snapshotPreferenceId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = userId;
                _args[1] = snapshotName;
                _args[2] = snapshotPreferenceId;
                System.IAsyncResult _result = base.BeginInvoke("UpdateMarketSnapshotPerformance", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndUpdateMarketSnapshotPerformance(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("UpdateMarketSnapshotPerformance", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddMarketSnapshotGroupPreference(int snapshotPreferenceId, string groupName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = snapshotPreferenceId;
                _args[1] = groupName;
                System.IAsyncResult _result = base.BeginInvoke("AddMarketSnapshotGroupPreference", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndAddMarketSnapshotGroupPreference(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("AddMarketSnapshotGroupPreference", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRemoveMarketSnapshotGroupPreference(int groupPreferenceId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = groupPreferenceId;
                System.IAsyncResult _result = base.BeginInvoke("RemoveMarketSnapshotGroupPreference", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndRemoveMarketSnapshotGroupPreference(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("RemoveMarketSnapshotGroupPreference", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddMarketSnapshotEntityPreference(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketSnapshotPreference marketSnapshotPreference, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = marketSnapshotPreference;
                System.IAsyncResult _result = base.BeginInvoke("AddMarketSnapshotEntityPreference", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndAddMarketSnapshotEntityPreference(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("AddMarketSnapshotEntityPreference", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRemoveMarketSnapshotEntityPreference(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketSnapshotPreference marketSnapshotPreference, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = marketSnapshotPreference;
                System.IAsyncResult _result = base.BeginInvoke("RemoveMarketSnapshotEntityPreference", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndRemoveMarketSnapshotEntityPreference(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("RemoveMarketSnapshotEntityPreference", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrievePortfolioRiskReturnData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = fundSelectionData;
                _args[1] = benchmarkSelectionData;
                _args[2] = effectiveDate;
                System.IAsyncResult _result = base.BeginInvoke("RetrievePortfolioRiskReturnData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioRiskReturnData> EndRetrievePortfolioRiskReturnData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioRiskReturnData> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioRiskReturnData>)(base.EndInvoke("RetrievePortfolioRiskReturnData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveHeatMapData(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("RetrieveHeatMapData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.HeatMapData> EndRetrieveHeatMapData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.HeatMapData> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.HeatMapData>)(base.EndInvoke("RetrieveHeatMapData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveRelativePerformanceSectorData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = fundSelectionData;
                _args[1] = benchmarkSelectionData;
                _args[2] = effectiveDate;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveRelativePerformanceSectorData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceSectorData> EndRetrieveRelativePerformanceSectorData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceSectorData> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceSectorData>)(base.EndInvoke("RetrieveRelativePerformanceSectorData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveRelativePerformanceCountryActivePositionData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate, string countryID, System.Nullable<int> sectorID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = fundSelectionData;
                _args[1] = benchmarkSelectionData;
                _args[2] = effectiveDate;
                _args[3] = countryID;
                _args[4] = sectorID;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveRelativePerformanceCountryActivePositionData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceActivePositionData> EndRetrieveRelativePerformanceCountryActivePositionData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceActivePositionData> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceActivePositionData>)(base.EndInvoke("RetrieveRelativePerformanceCountryActivePositionData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveRelativePerformanceSectorActivePositionData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate, string countryID, System.Nullable<int> sectorID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = fundSelectionData;
                _args[1] = benchmarkSelectionData;
                _args[2] = effectiveDate;
                _args[3] = countryID;
                _args[4] = sectorID;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveRelativePerformanceSectorActivePositionData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceActivePositionData> EndRetrieveRelativePerformanceSectorActivePositionData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceActivePositionData> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceActivePositionData>)(base.EndInvoke("RetrieveRelativePerformanceSectorActivePositionData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveRelativePerformanceSecurityActivePositionData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate, string countryID, System.Nullable<int> sectorID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = fundSelectionData;
                _args[1] = benchmarkSelectionData;
                _args[2] = effectiveDate;
                _args[3] = countryID;
                _args[4] = sectorID;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveRelativePerformanceSecurityActivePositionData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceActivePositionData> EndRetrieveRelativePerformanceSecurityActivePositionData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceActivePositionData> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceActivePositionData>)(base.EndInvoke("RetrieveRelativePerformanceSecurityActivePositionData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveRelativePerformanceSecurityData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate, string countryID, System.Nullable<int> sectorID, int order, System.Nullable<int> maxRecords, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[7];
                _args[0] = fundSelectionData;
                _args[1] = benchmarkSelectionData;
                _args[2] = effectiveDate;
                _args[3] = countryID;
                _args[4] = sectorID;
                _args[5] = order;
                _args[6] = maxRecords;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveRelativePerformanceSecurityData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceSecurityData> EndRetrieveRelativePerformanceSecurityData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceSecurityData> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceSecurityData>)(base.EndInvoke("RetrieveRelativePerformanceSecurityData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveRelativePerformanceData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = fundSelectionData;
                _args[1] = benchmarkSelectionData;
                _args[2] = effectiveDate;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveRelativePerformanceData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceData> EndRetrieveRelativePerformanceData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceData> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceData>)(base.EndInvoke("RetrieveRelativePerformanceData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrievePerformanceGraphData(string nameOfFund, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = nameOfFund;
                System.IAsyncResult _result = base.BeginInvoke("RetrievePerformanceGraphData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PerformanceGraphData> EndRetrievePerformanceGraphData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PerformanceGraphData> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PerformanceGraphData>)(base.EndInvoke("RetrievePerformanceGraphData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrievePerformanceGridData(string nameOfFund, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = nameOfFund;
                System.IAsyncResult _result = base.BeginInvoke("RetrievePerformanceGridData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PerformanceGridData> EndRetrievePerformanceGridData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PerformanceGridData> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PerformanceGridData>)(base.EndInvoke("RetrievePerformanceGridData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveAttributionData(string nameOfFund, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = nameOfFund;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveAttributionData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.AttributionData> EndRetrieveAttributionData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.AttributionData> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.AttributionData>)(base.EndInvoke("RetrieveAttributionData", _args, result)));
                return _result;
            }
        }
    }
}
