//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.261
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PeriodSelectionData", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.DataContracts")]
    public partial class PeriodSelectionData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.DateTime PeriodEndDateField;
        
        private System.DateTime PeriodStartDateField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime PeriodEndDate {
            get {
                return this.PeriodEndDateField;
            }
            set {
                if ((this.PeriodEndDateField.Equals(value) != true)) {
                    this.PeriodEndDateField = value;
                    this.RaisePropertyChanged("PeriodEndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime PeriodStartDate {
            get {
                return this.PeriodStartDateField;
            }
            set {
                if ((this.PeriodStartDateField.Equals(value) != true)) {
                    this.PeriodStartDateField = value;
                    this.RaisePropertyChanged("PeriodStartDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PortfolioSelectionData", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.DataContracts")]
    public partial class PortfolioSelectionData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string BenchmarkIdField;
        
        private string PortfolioIdField;
        
        private string PortfolioThemeSubGroupIdField;
        
        private string PortfolioThemeSubGroupNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BenchmarkId {
            get {
                return this.BenchmarkIdField;
            }
            set {
                if ((object.ReferenceEquals(this.BenchmarkIdField, value) != true)) {
                    this.BenchmarkIdField = value;
                    this.RaisePropertyChanged("BenchmarkId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PortfolioId {
            get {
                return this.PortfolioIdField;
            }
            set {
                if ((object.ReferenceEquals(this.PortfolioIdField, value) != true)) {
                    this.PortfolioIdField = value;
                    this.RaisePropertyChanged("PortfolioId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PortfolioThemeSubGroupId {
            get {
                return this.PortfolioThemeSubGroupIdField;
            }
            set {
                if ((object.ReferenceEquals(this.PortfolioThemeSubGroupIdField, value) != true)) {
                    this.PortfolioThemeSubGroupIdField = value;
                    this.RaisePropertyChanged("PortfolioThemeSubGroupId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PortfolioThemeSubGroupName {
            get {
                return this.PortfolioThemeSubGroupNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PortfolioThemeSubGroupNameField, value) != true)) {
                    this.PortfolioThemeSubGroupNameField = value;
                    this.RaisePropertyChanged("PortfolioThemeSubGroupName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
    public partial class ServiceFault : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DescriptionField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BenchmarkSelectionData", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.DataContracts")]
    public partial class BenchmarkSelectionData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string InstrumentIDField;
        
        private string NameField;
        
        private string TickerField;
        
        private string TypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InstrumentID {
            get {
                return this.InstrumentIDField;
            }
            set {
                if ((object.ReferenceEquals(this.InstrumentIDField, value) != true)) {
                    this.InstrumentIDField = value;
                    this.RaisePropertyChanged("InstrumentID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Ticker {
            get {
                return this.TickerField;
            }
            set {
                if ((object.ReferenceEquals(this.TickerField, value) != true)) {
                    this.TickerField = value;
                    this.RaisePropertyChanged("Ticker");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SectorBreakdownData", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.DataContracts")]
    public partial class SectorBreakdownData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Nullable<decimal> ActivePositionField;
        
        private System.Nullable<decimal> BenchmarkShareField;
        
        private string IndustryField;
        
        private System.Nullable<decimal> PortfolioShareField;
        
        private string SectorField;
        
        private string SecurityField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> ActivePosition {
            get {
                return this.ActivePositionField;
            }
            set {
                if ((this.ActivePositionField.Equals(value) != true)) {
                    this.ActivePositionField = value;
                    this.RaisePropertyChanged("ActivePosition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> BenchmarkShare {
            get {
                return this.BenchmarkShareField;
            }
            set {
                if ((this.BenchmarkShareField.Equals(value) != true)) {
                    this.BenchmarkShareField = value;
                    this.RaisePropertyChanged("BenchmarkShare");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Industry {
            get {
                return this.IndustryField;
            }
            set {
                if ((object.ReferenceEquals(this.IndustryField, value) != true)) {
                    this.IndustryField = value;
                    this.RaisePropertyChanged("Industry");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> PortfolioShare {
            get {
                return this.PortfolioShareField;
            }
            set {
                if ((this.PortfolioShareField.Equals(value) != true)) {
                    this.PortfolioShareField = value;
                    this.RaisePropertyChanged("PortfolioShare");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Sector {
            get {
                return this.SectorField;
            }
            set {
                if ((object.ReferenceEquals(this.SectorField, value) != true)) {
                    this.SectorField = value;
                    this.RaisePropertyChanged("Sector");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Security {
            get {
                return this.SecurityField;
            }
            set {
                if ((object.ReferenceEquals(this.SecurityField, value) != true)) {
                    this.SecurityField = value;
                    this.RaisePropertyChanged("Security");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RegionBreakdownData", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.DataContracts")]
    public partial class RegionBreakdownData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Nullable<decimal> ActivePositionField;
        
        private System.Nullable<decimal> BenchmarkShareField;
        
        private string CountryField;
        
        private System.Nullable<decimal> PortfolioShareField;
        
        private string RegionField;
        
        private string SecurityField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> ActivePosition {
            get {
                return this.ActivePositionField;
            }
            set {
                if ((this.ActivePositionField.Equals(value) != true)) {
                    this.ActivePositionField = value;
                    this.RaisePropertyChanged("ActivePosition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> BenchmarkShare {
            get {
                return this.BenchmarkShareField;
            }
            set {
                if ((this.BenchmarkShareField.Equals(value) != true)) {
                    this.BenchmarkShareField = value;
                    this.RaisePropertyChanged("BenchmarkShare");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Country {
            get {
                return this.CountryField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryField, value) != true)) {
                    this.CountryField = value;
                    this.RaisePropertyChanged("Country");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> PortfolioShare {
            get {
                return this.PortfolioShareField;
            }
            set {
                if ((this.PortfolioShareField.Equals(value) != true)) {
                    this.PortfolioShareField = value;
                    this.RaisePropertyChanged("PortfolioShare");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Region {
            get {
                return this.RegionField;
            }
            set {
                if ((object.ReferenceEquals(this.RegionField, value) != true)) {
                    this.RegionField = value;
                    this.RaisePropertyChanged("Region");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Security {
            get {
                return this.SecurityField;
            }
            set {
                if ((object.ReferenceEquals(this.SecurityField, value) != true)) {
                    this.SecurityField = value;
                    this.RaisePropertyChanged("Security");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TopHoldingsData", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.DataContracts")]
    public partial class TopHoldingsData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Nullable<decimal> ActivePositionField;
        
        private System.Nullable<decimal> BenchmarkShareField;
        
        private string HoldingField;
        
        private System.Nullable<decimal> MarketValueField;
        
        private System.Nullable<decimal> PortfolioShareField;
        
        private string TickerField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> ActivePosition {
            get {
                return this.ActivePositionField;
            }
            set {
                if ((this.ActivePositionField.Equals(value) != true)) {
                    this.ActivePositionField = value;
                    this.RaisePropertyChanged("ActivePosition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> BenchmarkShare {
            get {
                return this.BenchmarkShareField;
            }
            set {
                if ((this.BenchmarkShareField.Equals(value) != true)) {
                    this.BenchmarkShareField = value;
                    this.RaisePropertyChanged("BenchmarkShare");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Holding {
            get {
                return this.HoldingField;
            }
            set {
                if ((object.ReferenceEquals(this.HoldingField, value) != true)) {
                    this.HoldingField = value;
                    this.RaisePropertyChanged("Holding");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> MarketValue {
            get {
                return this.MarketValueField;
            }
            set {
                if ((this.MarketValueField.Equals(value) != true)) {
                    this.MarketValueField = value;
                    this.RaisePropertyChanged("MarketValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> PortfolioShare {
            get {
                return this.PortfolioShareField;
            }
            set {
                if ((this.PortfolioShareField.Equals(value) != true)) {
                    this.PortfolioShareField = value;
                    this.RaisePropertyChanged("PortfolioShare");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Ticker {
            get {
                return this.TickerField;
            }
            set {
                if ((object.ReferenceEquals(this.TickerField, value) != true)) {
                    this.TickerField = value;
                    this.RaisePropertyChanged("Ticker");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IndexConstituentsData", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.DataContracts")]
    public partial class IndexConstituentsData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ConstituentNameField;
        
        private string CountryField;
        
        private string IndustryField;
        
        private string RegionField;
        
        private string SectorField;
        
        private string SubIndustryField;
        
        private System.Nullable<decimal> WeightField;
        
        private System.Nullable<decimal> WeightCountryField;
        
        private System.Nullable<decimal> WeightIndustryField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ConstituentName {
            get {
                return this.ConstituentNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ConstituentNameField, value) != true)) {
                    this.ConstituentNameField = value;
                    this.RaisePropertyChanged("ConstituentName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Country {
            get {
                return this.CountryField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryField, value) != true)) {
                    this.CountryField = value;
                    this.RaisePropertyChanged("Country");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Industry {
            get {
                return this.IndustryField;
            }
            set {
                if ((object.ReferenceEquals(this.IndustryField, value) != true)) {
                    this.IndustryField = value;
                    this.RaisePropertyChanged("Industry");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Region {
            get {
                return this.RegionField;
            }
            set {
                if ((object.ReferenceEquals(this.RegionField, value) != true)) {
                    this.RegionField = value;
                    this.RaisePropertyChanged("Region");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Sector {
            get {
                return this.SectorField;
            }
            set {
                if ((object.ReferenceEquals(this.SectorField, value) != true)) {
                    this.SectorField = value;
                    this.RaisePropertyChanged("Sector");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubIndustry {
            get {
                return this.SubIndustryField;
            }
            set {
                if ((object.ReferenceEquals(this.SubIndustryField, value) != true)) {
                    this.SubIndustryField = value;
                    this.RaisePropertyChanged("SubIndustry");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> Weight {
            get {
                return this.WeightField;
            }
            set {
                if ((this.WeightField.Equals(value) != true)) {
                    this.WeightField = value;
                    this.RaisePropertyChanged("Weight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> WeightCountry {
            get {
                return this.WeightCountryField;
            }
            set {
                if ((this.WeightCountryField.Equals(value) != true)) {
                    this.WeightCountryField = value;
                    this.RaisePropertyChanged("WeightCountry");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> WeightIndustry {
            get {
                return this.WeightIndustryField;
            }
            set {
                if ((this.WeightIndustryField.Equals(value) != true)) {
                    this.WeightIndustryField = value;
                    this.RaisePropertyChanged("WeightIndustry");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FilterSelectionData", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.DataContracts")]
    public partial class FilterSelectionData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string FilterValuesField;
        
        private string FiltertypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FilterValues {
            get {
                return this.FilterValuesField;
            }
            set {
                if ((object.ReferenceEquals(this.FilterValuesField, value) != true)) {
                    this.FilterValuesField = value;
                    this.RaisePropertyChanged("FilterValues");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Filtertype {
            get {
                return this.FiltertypeField;
            }
            set {
                if ((object.ReferenceEquals(this.FiltertypeField, value) != true)) {
                    this.FiltertypeField = value;
                    this.RaisePropertyChanged("Filtertype");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PortfolioDetailsData", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.DataContracts")]
    public partial class PortfolioDetailsData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string A_Sec_Instr_TypeField;
        
        private System.Nullable<decimal> ActivePositionField;
        
        private string AsecSecShortNameField;
        
        private System.Nullable<decimal> AshEmmModelWeightField;
        
        private System.Nullable<decimal> BalanceNominalField;
        
        private System.Nullable<decimal> BenchmarkWeightField;
        
        private System.Nullable<decimal> DirtyValuePCField;
        
        private System.DateTime FromDateField;
        
        private string IndustryNameField;
        
        private string IsoCountryCodeField;
        
        private string IssueNameField;
        
        private System.Nullable<decimal> MarketCapUSDField;
        
        private System.Nullable<decimal> PortfolioDirtyValuePCField;
        
        private System.Nullable<decimal> PortfolioWeightField;
        
        private string ProprietaryRegionCodeField;
        
        private System.Nullable<decimal> ReAshEmmModelWeightField;
        
        private System.Nullable<decimal> ReBenchmarkWeightField;
        
        private System.Nullable<decimal> RePortfolioWeightField;
        
        private string SectorNameField;
        
        private string SecurityThemeCodeField;
        
        private string SecurityTypeField;
        
        private string SubIndustryNameField;
        
        private string TickerField;
        
        private string TradingCurrencyField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string A_Sec_Instr_Type {
            get {
                return this.A_Sec_Instr_TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.A_Sec_Instr_TypeField, value) != true)) {
                    this.A_Sec_Instr_TypeField = value;
                    this.RaisePropertyChanged("A_Sec_Instr_Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> ActivePosition {
            get {
                return this.ActivePositionField;
            }
            set {
                if ((this.ActivePositionField.Equals(value) != true)) {
                    this.ActivePositionField = value;
                    this.RaisePropertyChanged("ActivePosition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AsecSecShortName {
            get {
                return this.AsecSecShortNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AsecSecShortNameField, value) != true)) {
                    this.AsecSecShortNameField = value;
                    this.RaisePropertyChanged("AsecSecShortName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> AshEmmModelWeight {
            get {
                return this.AshEmmModelWeightField;
            }
            set {
                if ((this.AshEmmModelWeightField.Equals(value) != true)) {
                    this.AshEmmModelWeightField = value;
                    this.RaisePropertyChanged("AshEmmModelWeight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> BalanceNominal {
            get {
                return this.BalanceNominalField;
            }
            set {
                if ((this.BalanceNominalField.Equals(value) != true)) {
                    this.BalanceNominalField = value;
                    this.RaisePropertyChanged("BalanceNominal");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> BenchmarkWeight {
            get {
                return this.BenchmarkWeightField;
            }
            set {
                if ((this.BenchmarkWeightField.Equals(value) != true)) {
                    this.BenchmarkWeightField = value;
                    this.RaisePropertyChanged("BenchmarkWeight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> DirtyValuePC {
            get {
                return this.DirtyValuePCField;
            }
            set {
                if ((this.DirtyValuePCField.Equals(value) != true)) {
                    this.DirtyValuePCField = value;
                    this.RaisePropertyChanged("DirtyValuePC");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime FromDate {
            get {
                return this.FromDateField;
            }
            set {
                if ((this.FromDateField.Equals(value) != true)) {
                    this.FromDateField = value;
                    this.RaisePropertyChanged("FromDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IndustryName {
            get {
                return this.IndustryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.IndustryNameField, value) != true)) {
                    this.IndustryNameField = value;
                    this.RaisePropertyChanged("IndustryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IsoCountryCode {
            get {
                return this.IsoCountryCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.IsoCountryCodeField, value) != true)) {
                    this.IsoCountryCodeField = value;
                    this.RaisePropertyChanged("IsoCountryCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IssueName {
            get {
                return this.IssueNameField;
            }
            set {
                if ((object.ReferenceEquals(this.IssueNameField, value) != true)) {
                    this.IssueNameField = value;
                    this.RaisePropertyChanged("IssueName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> MarketCapUSD {
            get {
                return this.MarketCapUSDField;
            }
            set {
                if ((this.MarketCapUSDField.Equals(value) != true)) {
                    this.MarketCapUSDField = value;
                    this.RaisePropertyChanged("MarketCapUSD");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> PortfolioDirtyValuePC {
            get {
                return this.PortfolioDirtyValuePCField;
            }
            set {
                if ((this.PortfolioDirtyValuePCField.Equals(value) != true)) {
                    this.PortfolioDirtyValuePCField = value;
                    this.RaisePropertyChanged("PortfolioDirtyValuePC");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> PortfolioWeight {
            get {
                return this.PortfolioWeightField;
            }
            set {
                if ((this.PortfolioWeightField.Equals(value) != true)) {
                    this.PortfolioWeightField = value;
                    this.RaisePropertyChanged("PortfolioWeight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProprietaryRegionCode {
            get {
                return this.ProprietaryRegionCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ProprietaryRegionCodeField, value) != true)) {
                    this.ProprietaryRegionCodeField = value;
                    this.RaisePropertyChanged("ProprietaryRegionCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> ReAshEmmModelWeight {
            get {
                return this.ReAshEmmModelWeightField;
            }
            set {
                if ((this.ReAshEmmModelWeightField.Equals(value) != true)) {
                    this.ReAshEmmModelWeightField = value;
                    this.RaisePropertyChanged("ReAshEmmModelWeight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> ReBenchmarkWeight {
            get {
                return this.ReBenchmarkWeightField;
            }
            set {
                if ((this.ReBenchmarkWeightField.Equals(value) != true)) {
                    this.ReBenchmarkWeightField = value;
                    this.RaisePropertyChanged("ReBenchmarkWeight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> RePortfolioWeight {
            get {
                return this.RePortfolioWeightField;
            }
            set {
                if ((this.RePortfolioWeightField.Equals(value) != true)) {
                    this.RePortfolioWeightField = value;
                    this.RaisePropertyChanged("RePortfolioWeight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SectorName {
            get {
                return this.SectorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SectorNameField, value) != true)) {
                    this.SectorNameField = value;
                    this.RaisePropertyChanged("SectorName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SecurityThemeCode {
            get {
                return this.SecurityThemeCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.SecurityThemeCodeField, value) != true)) {
                    this.SecurityThemeCodeField = value;
                    this.RaisePropertyChanged("SecurityThemeCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SecurityType {
            get {
                return this.SecurityTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.SecurityTypeField, value) != true)) {
                    this.SecurityTypeField = value;
                    this.RaisePropertyChanged("SecurityType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubIndustryName {
            get {
                return this.SubIndustryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SubIndustryNameField, value) != true)) {
                    this.SubIndustryNameField = value;
                    this.RaisePropertyChanged("SubIndustryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Ticker {
            get {
                return this.TickerField;
            }
            set {
                if ((object.ReferenceEquals(this.TickerField, value) != true)) {
                    this.TickerField = value;
                    this.RaisePropertyChanged("Ticker");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TradingCurrency {
            get {
                return this.TradingCurrencyField;
            }
            set {
                if ((object.ReferenceEquals(this.TradingCurrencyField, value) != true)) {
                    this.TradingCurrencyField = value;
                    this.RaisePropertyChanged("TradingCurrency");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BenchmarkChartReturnData", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.DataContracts")]
    public partial class BenchmarkChartReturnData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private decimal DailyReturnField;
        
        private System.DateTime FromDateField;
        
        private string InstrumentIDField;
        
        private string IssueNameField;
        
        private string TickerField;
        
        private string TypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal DailyReturn {
            get {
                return this.DailyReturnField;
            }
            set {
                if ((this.DailyReturnField.Equals(value) != true)) {
                    this.DailyReturnField = value;
                    this.RaisePropertyChanged("DailyReturn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime FromDate {
            get {
                return this.FromDateField;
            }
            set {
                if ((this.FromDateField.Equals(value) != true)) {
                    this.FromDateField = value;
                    this.RaisePropertyChanged("FromDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InstrumentID {
            get {
                return this.InstrumentIDField;
            }
            set {
                if ((object.ReferenceEquals(this.InstrumentIDField, value) != true)) {
                    this.InstrumentIDField = value;
                    this.RaisePropertyChanged("InstrumentID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IssueName {
            get {
                return this.IssueNameField;
            }
            set {
                if ((object.ReferenceEquals(this.IssueNameField, value) != true)) {
                    this.IssueNameField = value;
                    this.RaisePropertyChanged("IssueName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Ticker {
            get {
                return this.TickerField;
            }
            set {
                if ((object.ReferenceEquals(this.TickerField, value) != true)) {
                    this.TickerField = value;
                    this.RaisePropertyChanged("Ticker");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BenchmarkGridReturnData", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.DataContracts")]
    public partial class BenchmarkGridReturnData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string InstrumentIDField;
        
        private string IssueNameField;
        
        private decimal MTDField;
        
        private decimal PreviousYearDataField;
        
        private decimal QTDField;
        
        private decimal ThreePreviousYearDataField;
        
        private string TickerField;
        
        private decimal TwoPreviousYearDataField;
        
        private string TypeField;
        
        private decimal YTDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InstrumentID {
            get {
                return this.InstrumentIDField;
            }
            set {
                if ((object.ReferenceEquals(this.InstrumentIDField, value) != true)) {
                    this.InstrumentIDField = value;
                    this.RaisePropertyChanged("InstrumentID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IssueName {
            get {
                return this.IssueNameField;
            }
            set {
                if ((object.ReferenceEquals(this.IssueNameField, value) != true)) {
                    this.IssueNameField = value;
                    this.RaisePropertyChanged("IssueName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal MTD {
            get {
                return this.MTDField;
            }
            set {
                if ((this.MTDField.Equals(value) != true)) {
                    this.MTDField = value;
                    this.RaisePropertyChanged("MTD");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal PreviousYearData {
            get {
                return this.PreviousYearDataField;
            }
            set {
                if ((this.PreviousYearDataField.Equals(value) != true)) {
                    this.PreviousYearDataField = value;
                    this.RaisePropertyChanged("PreviousYearData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal QTD {
            get {
                return this.QTDField;
            }
            set {
                if ((this.QTDField.Equals(value) != true)) {
                    this.QTDField = value;
                    this.RaisePropertyChanged("QTD");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal ThreePreviousYearData {
            get {
                return this.ThreePreviousYearDataField;
            }
            set {
                if ((this.ThreePreviousYearDataField.Equals(value) != true)) {
                    this.ThreePreviousYearDataField = value;
                    this.RaisePropertyChanged("ThreePreviousYearData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Ticker {
            get {
                return this.TickerField;
            }
            set {
                if ((object.ReferenceEquals(this.TickerField, value) != true)) {
                    this.TickerField = value;
                    this.RaisePropertyChanged("Ticker");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal TwoPreviousYearData {
            get {
                return this.TwoPreviousYearDataField;
            }
            set {
                if ((this.TwoPreviousYearDataField.Equals(value) != true)) {
                    this.TwoPreviousYearDataField = value;
                    this.RaisePropertyChanged("TwoPreviousYearData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal YTD {
            get {
                return this.YTDField;
            }
            set {
                if ((this.YTDField.Equals(value) != true)) {
                    this.YTDField = value;
                    this.RaisePropertyChanged("YTD");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AssetAllocationData", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.DataContracts")]
    public partial class AssetAllocationData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Nullable<decimal> ActivePositionField;
        
        private System.Nullable<decimal> BenchmarkWeightField;
        
        private string CountryField;
        
        private System.Nullable<decimal> ModelWeightField;
        
        private string PortfolioIdField;
        
        private System.Nullable<decimal> PortfolioWeightField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> ActivePosition {
            get {
                return this.ActivePositionField;
            }
            set {
                if ((this.ActivePositionField.Equals(value) != true)) {
                    this.ActivePositionField = value;
                    this.RaisePropertyChanged("ActivePosition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> BenchmarkWeight {
            get {
                return this.BenchmarkWeightField;
            }
            set {
                if ((this.BenchmarkWeightField.Equals(value) != true)) {
                    this.BenchmarkWeightField = value;
                    this.RaisePropertyChanged("BenchmarkWeight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Country {
            get {
                return this.CountryField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryField, value) != true)) {
                    this.CountryField = value;
                    this.RaisePropertyChanged("Country");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> ModelWeight {
            get {
                return this.ModelWeightField;
            }
            set {
                if ((this.ModelWeightField.Equals(value) != true)) {
                    this.ModelWeightField = value;
                    this.RaisePropertyChanged("ModelWeight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PortfolioId {
            get {
                return this.PortfolioIdField;
            }
            set {
                if ((object.ReferenceEquals(this.PortfolioIdField, value) != true)) {
                    this.PortfolioIdField = value;
                    this.RaisePropertyChanged("PortfolioId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> PortfolioWeight {
            get {
                return this.PortfolioWeightField;
            }
            set {
                if ((this.PortfolioWeightField.Equals(value) != true)) {
                    this.PortfolioWeightField = value;
                    this.RaisePropertyChanged("PortfolioWeight");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HoldingsPercentageData", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.DataContracts")]
    public partial class HoldingsPercentageData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string BenchmarkNameField;
        
        private System.Nullable<decimal> BenchmarkWeightField;
        
        private System.DateTime EffectiveDateField;
        
        private string FundNameField;
        
        private System.Nullable<decimal> PortfolioWeightField;
        
        private string SegmentNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BenchmarkName {
            get {
                return this.BenchmarkNameField;
            }
            set {
                if ((object.ReferenceEquals(this.BenchmarkNameField, value) != true)) {
                    this.BenchmarkNameField = value;
                    this.RaisePropertyChanged("BenchmarkName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> BenchmarkWeight {
            get {
                return this.BenchmarkWeightField;
            }
            set {
                if ((this.BenchmarkWeightField.Equals(value) != true)) {
                    this.BenchmarkWeightField = value;
                    this.RaisePropertyChanged("BenchmarkWeight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EffectiveDate {
            get {
                return this.EffectiveDateField;
            }
            set {
                if ((this.EffectiveDateField.Equals(value) != true)) {
                    this.EffectiveDateField = value;
                    this.RaisePropertyChanged("EffectiveDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FundName {
            get {
                return this.FundNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FundNameField, value) != true)) {
                    this.FundNameField = value;
                    this.RaisePropertyChanged("FundName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> PortfolioWeight {
            get {
                return this.PortfolioWeightField;
            }
            set {
                if ((this.PortfolioWeightField.Equals(value) != true)) {
                    this.PortfolioWeightField = value;
                    this.RaisePropertyChanged("PortfolioWeight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SegmentName {
            get {
                return this.SegmentNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SegmentNameField, value) != true)) {
                    this.SegmentNameField = value;
                    this.RaisePropertyChanged("SegmentName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TopBenchmarkSecuritiesData", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.DataContracts")]
    public partial class TopBenchmarkSecuritiesData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string IssuerNameField;
        
        private double MTDField;
        
        private double PreviousYearField;
        
        private double QTDField;
        
        private double SecondPreviousYearField;
        
        private double ThirdPreviousYearField;
        
        private double WeightField;
        
        private double YTDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IssuerName {
            get {
                return this.IssuerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.IssuerNameField, value) != true)) {
                    this.IssuerNameField = value;
                    this.RaisePropertyChanged("IssuerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MTD {
            get {
                return this.MTDField;
            }
            set {
                if ((this.MTDField.Equals(value) != true)) {
                    this.MTDField = value;
                    this.RaisePropertyChanged("MTD");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double PreviousYear {
            get {
                return this.PreviousYearField;
            }
            set {
                if ((this.PreviousYearField.Equals(value) != true)) {
                    this.PreviousYearField = value;
                    this.RaisePropertyChanged("PreviousYear");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double QTD {
            get {
                return this.QTDField;
            }
            set {
                if ((this.QTDField.Equals(value) != true)) {
                    this.QTDField = value;
                    this.RaisePropertyChanged("QTD");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double SecondPreviousYear {
            get {
                return this.SecondPreviousYearField;
            }
            set {
                if ((this.SecondPreviousYearField.Equals(value) != true)) {
                    this.SecondPreviousYearField = value;
                    this.RaisePropertyChanged("SecondPreviousYear");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ThirdPreviousYear {
            get {
                return this.ThirdPreviousYearField;
            }
            set {
                if ((this.ThirdPreviousYearField.Equals(value) != true)) {
                    this.ThirdPreviousYearField = value;
                    this.RaisePropertyChanged("ThirdPreviousYear");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Weight {
            get {
                return this.WeightField;
            }
            set {
                if ((this.WeightField.Equals(value) != true)) {
                    this.WeightField = value;
                    this.RaisePropertyChanged("Weight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double YTD {
            get {
                return this.YTDField;
            }
            set {
                if ((this.YTDField.Equals(value) != true)) {
                    this.YTDField = value;
                    this.RaisePropertyChanged("YTD");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MarketCapitalizationData", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.DataContracts")]
    public partial class MarketCapitalizationData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string AsecSecShortNameField;
        
        private System.Nullable<decimal> BenchmarkSumLargeRangeField;
        
        private System.Nullable<decimal> BenchmarkSumMediumRangeField;
        
        private System.Nullable<decimal> BenchmarkSumMegaRangeField;
        
        private System.Nullable<decimal> BenchmarkSumMicroRangeField;
        
        private System.Nullable<decimal> BenchmarkSumSmallRangeField;
        
        private System.Nullable<decimal> BenchmarkSumUndefinedRangeField;
        
        private System.Nullable<decimal> BenchmarkWeightField;
        
        private System.Nullable<decimal> BenchmarkWtdAvgField;
        
        private System.Nullable<decimal> BenchmarkWtdMedianField;
        
        private string Benchmark_IDField;
        
        private System.Nullable<decimal> LargeRangeField;
        
        private System.Nullable<decimal> MarketCapitalInUSDField;
        
        private System.Nullable<decimal> MediumRangeField;
        
        private System.Nullable<decimal> MicroRangeField;
        
        private System.Nullable<decimal> PortfolioDirtyValuePCField;
        
        private System.Nullable<decimal> PortfolioSumLargeRangeField;
        
        private System.Nullable<decimal> PortfolioSumMediumRangeField;
        
        private System.Nullable<decimal> PortfolioSumMegaRangeField;
        
        private System.Nullable<decimal> PortfolioSumMicroRangeField;
        
        private System.Nullable<decimal> PortfolioSumSmallRangeField;
        
        private System.Nullable<decimal> PortfolioSumUndefinedRangeField;
        
        private System.Nullable<decimal> PortfolioWtdAvgField;
        
        private System.Nullable<decimal> PortfolioWtdMedianField;
        
        private string Portfolio_IDField;
        
        private string SecurityThemeCodeField;
        
        private System.Nullable<decimal> SmallRangeField;
        
        private System.Nullable<decimal> UndefinedRangeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AsecSecShortName {
            get {
                return this.AsecSecShortNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AsecSecShortNameField, value) != true)) {
                    this.AsecSecShortNameField = value;
                    this.RaisePropertyChanged("AsecSecShortName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> BenchmarkSumLargeRange {
            get {
                return this.BenchmarkSumLargeRangeField;
            }
            set {
                if ((this.BenchmarkSumLargeRangeField.Equals(value) != true)) {
                    this.BenchmarkSumLargeRangeField = value;
                    this.RaisePropertyChanged("BenchmarkSumLargeRange");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> BenchmarkSumMediumRange {
            get {
                return this.BenchmarkSumMediumRangeField;
            }
            set {
                if ((this.BenchmarkSumMediumRangeField.Equals(value) != true)) {
                    this.BenchmarkSumMediumRangeField = value;
                    this.RaisePropertyChanged("BenchmarkSumMediumRange");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> BenchmarkSumMegaRange {
            get {
                return this.BenchmarkSumMegaRangeField;
            }
            set {
                if ((this.BenchmarkSumMegaRangeField.Equals(value) != true)) {
                    this.BenchmarkSumMegaRangeField = value;
                    this.RaisePropertyChanged("BenchmarkSumMegaRange");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> BenchmarkSumMicroRange {
            get {
                return this.BenchmarkSumMicroRangeField;
            }
            set {
                if ((this.BenchmarkSumMicroRangeField.Equals(value) != true)) {
                    this.BenchmarkSumMicroRangeField = value;
                    this.RaisePropertyChanged("BenchmarkSumMicroRange");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> BenchmarkSumSmallRange {
            get {
                return this.BenchmarkSumSmallRangeField;
            }
            set {
                if ((this.BenchmarkSumSmallRangeField.Equals(value) != true)) {
                    this.BenchmarkSumSmallRangeField = value;
                    this.RaisePropertyChanged("BenchmarkSumSmallRange");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> BenchmarkSumUndefinedRange {
            get {
                return this.BenchmarkSumUndefinedRangeField;
            }
            set {
                if ((this.BenchmarkSumUndefinedRangeField.Equals(value) != true)) {
                    this.BenchmarkSumUndefinedRangeField = value;
                    this.RaisePropertyChanged("BenchmarkSumUndefinedRange");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> BenchmarkWeight {
            get {
                return this.BenchmarkWeightField;
            }
            set {
                if ((this.BenchmarkWeightField.Equals(value) != true)) {
                    this.BenchmarkWeightField = value;
                    this.RaisePropertyChanged("BenchmarkWeight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> BenchmarkWtdAvg {
            get {
                return this.BenchmarkWtdAvgField;
            }
            set {
                if ((this.BenchmarkWtdAvgField.Equals(value) != true)) {
                    this.BenchmarkWtdAvgField = value;
                    this.RaisePropertyChanged("BenchmarkWtdAvg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> BenchmarkWtdMedian {
            get {
                return this.BenchmarkWtdMedianField;
            }
            set {
                if ((this.BenchmarkWtdMedianField.Equals(value) != true)) {
                    this.BenchmarkWtdMedianField = value;
                    this.RaisePropertyChanged("BenchmarkWtdMedian");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Benchmark_ID {
            get {
                return this.Benchmark_IDField;
            }
            set {
                if ((object.ReferenceEquals(this.Benchmark_IDField, value) != true)) {
                    this.Benchmark_IDField = value;
                    this.RaisePropertyChanged("Benchmark_ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> LargeRange {
            get {
                return this.LargeRangeField;
            }
            set {
                if ((this.LargeRangeField.Equals(value) != true)) {
                    this.LargeRangeField = value;
                    this.RaisePropertyChanged("LargeRange");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> MarketCapitalInUSD {
            get {
                return this.MarketCapitalInUSDField;
            }
            set {
                if ((this.MarketCapitalInUSDField.Equals(value) != true)) {
                    this.MarketCapitalInUSDField = value;
                    this.RaisePropertyChanged("MarketCapitalInUSD");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> MediumRange {
            get {
                return this.MediumRangeField;
            }
            set {
                if ((this.MediumRangeField.Equals(value) != true)) {
                    this.MediumRangeField = value;
                    this.RaisePropertyChanged("MediumRange");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> MicroRange {
            get {
                return this.MicroRangeField;
            }
            set {
                if ((this.MicroRangeField.Equals(value) != true)) {
                    this.MicroRangeField = value;
                    this.RaisePropertyChanged("MicroRange");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> PortfolioDirtyValuePC {
            get {
                return this.PortfolioDirtyValuePCField;
            }
            set {
                if ((this.PortfolioDirtyValuePCField.Equals(value) != true)) {
                    this.PortfolioDirtyValuePCField = value;
                    this.RaisePropertyChanged("PortfolioDirtyValuePC");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> PortfolioSumLargeRange {
            get {
                return this.PortfolioSumLargeRangeField;
            }
            set {
                if ((this.PortfolioSumLargeRangeField.Equals(value) != true)) {
                    this.PortfolioSumLargeRangeField = value;
                    this.RaisePropertyChanged("PortfolioSumLargeRange");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> PortfolioSumMediumRange {
            get {
                return this.PortfolioSumMediumRangeField;
            }
            set {
                if ((this.PortfolioSumMediumRangeField.Equals(value) != true)) {
                    this.PortfolioSumMediumRangeField = value;
                    this.RaisePropertyChanged("PortfolioSumMediumRange");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> PortfolioSumMegaRange {
            get {
                return this.PortfolioSumMegaRangeField;
            }
            set {
                if ((this.PortfolioSumMegaRangeField.Equals(value) != true)) {
                    this.PortfolioSumMegaRangeField = value;
                    this.RaisePropertyChanged("PortfolioSumMegaRange");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> PortfolioSumMicroRange {
            get {
                return this.PortfolioSumMicroRangeField;
            }
            set {
                if ((this.PortfolioSumMicroRangeField.Equals(value) != true)) {
                    this.PortfolioSumMicroRangeField = value;
                    this.RaisePropertyChanged("PortfolioSumMicroRange");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> PortfolioSumSmallRange {
            get {
                return this.PortfolioSumSmallRangeField;
            }
            set {
                if ((this.PortfolioSumSmallRangeField.Equals(value) != true)) {
                    this.PortfolioSumSmallRangeField = value;
                    this.RaisePropertyChanged("PortfolioSumSmallRange");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> PortfolioSumUndefinedRange {
            get {
                return this.PortfolioSumUndefinedRangeField;
            }
            set {
                if ((this.PortfolioSumUndefinedRangeField.Equals(value) != true)) {
                    this.PortfolioSumUndefinedRangeField = value;
                    this.RaisePropertyChanged("PortfolioSumUndefinedRange");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> PortfolioWtdAvg {
            get {
                return this.PortfolioWtdAvgField;
            }
            set {
                if ((this.PortfolioWtdAvgField.Equals(value) != true)) {
                    this.PortfolioWtdAvgField = value;
                    this.RaisePropertyChanged("PortfolioWtdAvg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> PortfolioWtdMedian {
            get {
                return this.PortfolioWtdMedianField;
            }
            set {
                if ((this.PortfolioWtdMedianField.Equals(value) != true)) {
                    this.PortfolioWtdMedianField = value;
                    this.RaisePropertyChanged("PortfolioWtdMedian");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Portfolio_ID {
            get {
                return this.Portfolio_IDField;
            }
            set {
                if ((object.ReferenceEquals(this.Portfolio_IDField, value) != true)) {
                    this.Portfolio_IDField = value;
                    this.RaisePropertyChanged("Portfolio_ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SecurityThemeCode {
            get {
                return this.SecurityThemeCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.SecurityThemeCodeField, value) != true)) {
                    this.SecurityThemeCodeField = value;
                    this.RaisePropertyChanged("SecurityThemeCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> SmallRange {
            get {
                return this.SmallRangeField;
            }
            set {
                if ((this.SmallRangeField.Equals(value) != true)) {
                    this.SmallRangeField = value;
                    this.RaisePropertyChanged("SmallRange");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> UndefinedRange {
            get {
                return this.UndefinedRangeField;
            }
            set {
                if ((this.UndefinedRangeField.Equals(value) != true)) {
                    this.UndefinedRangeField = value;
                    this.RaisePropertyChanged("UndefinedRange");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PortfolioRiskReturnData", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.DataContracts")]
    public partial class PortfolioRiskReturnData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string BenchMarkValueField;
        
        private string DataPointNameField;
        
        private string PortfolioValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BenchMarkValue {
            get {
                return this.BenchMarkValueField;
            }
            set {
                if ((object.ReferenceEquals(this.BenchMarkValueField, value) != true)) {
                    this.BenchMarkValueField = value;
                    this.RaisePropertyChanged("BenchMarkValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DataPointName {
            get {
                return this.DataPointNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DataPointNameField, value) != true)) {
                    this.DataPointNameField = value;
                    this.RaisePropertyChanged("DataPointName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PortfolioValue {
            get {
                return this.PortfolioValueField;
            }
            set {
                if ((object.ReferenceEquals(this.PortfolioValueField, value) != true)) {
                    this.PortfolioValueField = value;
                    this.RaisePropertyChanged("PortfolioValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HeatMapData", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.DataContracts")]
    public partial class HeatMapData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string CountryIDField;
        
        private GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PerformanceType CountryPerformanceField;
        
        private System.Nullable<double> CountryYTDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CountryID {
            get {
                return this.CountryIDField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryIDField, value) != true)) {
                    this.CountryIDField = value;
                    this.RaisePropertyChanged("CountryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PerformanceType CountryPerformance {
            get {
                return this.CountryPerformanceField;
            }
            set {
                if ((this.CountryPerformanceField.Equals(value) != true)) {
                    this.CountryPerformanceField = value;
                    this.RaisePropertyChanged("CountryPerformance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> CountryYTD {
            get {
                return this.CountryYTDField;
            }
            set {
                if ((this.CountryYTDField.Equals(value) != true)) {
                    this.CountryYTDField = value;
                    this.RaisePropertyChanged("CountryYTD");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PerformanceType", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.DataContracts")]
    public enum PerformanceType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NO_RELATION = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UNDER_PERFORMING = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FLAT_PERFORMING = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OVER_PERFORMING = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RelativePerformanceSectorData", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.DataContracts")]
    public partial class RelativePerformanceSectorData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int SectorIDField;
        
        private string SectorNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SectorID {
            get {
                return this.SectorIDField;
            }
            set {
                if ((this.SectorIDField.Equals(value) != true)) {
                    this.SectorIDField = value;
                    this.RaisePropertyChanged("SectorID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SectorName {
            get {
                return this.SectorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SectorNameField, value) != true)) {
                    this.SectorNameField = value;
                    this.RaisePropertyChanged("SectorName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RelativePerformanceActivePositionData", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.DataContracts")]
    public partial class RelativePerformanceActivePositionData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Nullable<double> ActivePositionField;
        
        private System.Nullable<double> BenchmarkWeightField;
        
        private string EntityField;
        
        private System.Nullable<double> FundWeightField;
        
        private System.Nullable<double> MarketValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> ActivePosition {
            get {
                return this.ActivePositionField;
            }
            set {
                if ((this.ActivePositionField.Equals(value) != true)) {
                    this.ActivePositionField = value;
                    this.RaisePropertyChanged("ActivePosition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> BenchmarkWeight {
            get {
                return this.BenchmarkWeightField;
            }
            set {
                if ((this.BenchmarkWeightField.Equals(value) != true)) {
                    this.BenchmarkWeightField = value;
                    this.RaisePropertyChanged("BenchmarkWeight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Entity {
            get {
                return this.EntityField;
            }
            set {
                if ((object.ReferenceEquals(this.EntityField, value) != true)) {
                    this.EntityField = value;
                    this.RaisePropertyChanged("Entity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> FundWeight {
            get {
                return this.FundWeightField;
            }
            set {
                if ((this.FundWeightField.Equals(value) != true)) {
                    this.FundWeightField = value;
                    this.RaisePropertyChanged("FundWeight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> MarketValue {
            get {
                return this.MarketValueField;
            }
            set {
                if ((this.MarketValueField.Equals(value) != true)) {
                    this.MarketValueField = value;
                    this.RaisePropertyChanged("MarketValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RelativePerformanceSecurityData", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.DataContracts")]
    public partial class RelativePerformanceSecurityData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private double SecurityActivePositionField;
        
        private double SecurityAlphaField;
        
        private string SecurityCountryIDField;
        
        private string SecurityNameField;
        
        private string SecuritySectorNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double SecurityActivePosition {
            get {
                return this.SecurityActivePositionField;
            }
            set {
                if ((this.SecurityActivePositionField.Equals(value) != true)) {
                    this.SecurityActivePositionField = value;
                    this.RaisePropertyChanged("SecurityActivePosition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double SecurityAlpha {
            get {
                return this.SecurityAlphaField;
            }
            set {
                if ((this.SecurityAlphaField.Equals(value) != true)) {
                    this.SecurityAlphaField = value;
                    this.RaisePropertyChanged("SecurityAlpha");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SecurityCountryID {
            get {
                return this.SecurityCountryIDField;
            }
            set {
                if ((object.ReferenceEquals(this.SecurityCountryIDField, value) != true)) {
                    this.SecurityCountryIDField = value;
                    this.RaisePropertyChanged("SecurityCountryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SecurityName {
            get {
                return this.SecurityNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SecurityNameField, value) != true)) {
                    this.SecurityNameField = value;
                    this.RaisePropertyChanged("SecurityName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SecuritySectorName {
            get {
                return this.SecuritySectorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SecuritySectorNameField, value) != true)) {
                    this.SecuritySectorNameField = value;
                    this.RaisePropertyChanged("SecuritySectorName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RelativePerformanceData", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.DataContracts")]
    public partial class RelativePerformanceData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Nullable<double> AggregateCountryActivePositionField;
        
        private System.Nullable<double> AggregateCountryAlphaField;
        
        private System.Nullable<double> AggregateCountryBenchmarkShareField;
        
        private System.Nullable<double> AggregateCountryPortfolioShareField;
        
        private string CountryIDField;
        
        private System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceCountrySpecificData> RelativePerformanceCountrySpecificInfoField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> AggregateCountryActivePosition {
            get {
                return this.AggregateCountryActivePositionField;
            }
            set {
                if ((this.AggregateCountryActivePositionField.Equals(value) != true)) {
                    this.AggregateCountryActivePositionField = value;
                    this.RaisePropertyChanged("AggregateCountryActivePosition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> AggregateCountryAlpha {
            get {
                return this.AggregateCountryAlphaField;
            }
            set {
                if ((this.AggregateCountryAlphaField.Equals(value) != true)) {
                    this.AggregateCountryAlphaField = value;
                    this.RaisePropertyChanged("AggregateCountryAlpha");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> AggregateCountryBenchmarkShare {
            get {
                return this.AggregateCountryBenchmarkShareField;
            }
            set {
                if ((this.AggregateCountryBenchmarkShareField.Equals(value) != true)) {
                    this.AggregateCountryBenchmarkShareField = value;
                    this.RaisePropertyChanged("AggregateCountryBenchmarkShare");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> AggregateCountryPortfolioShare {
            get {
                return this.AggregateCountryPortfolioShareField;
            }
            set {
                if ((this.AggregateCountryPortfolioShareField.Equals(value) != true)) {
                    this.AggregateCountryPortfolioShareField = value;
                    this.RaisePropertyChanged("AggregateCountryPortfolioShare");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CountryID {
            get {
                return this.CountryIDField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryIDField, value) != true)) {
                    this.CountryIDField = value;
                    this.RaisePropertyChanged("CountryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceCountrySpecificData> RelativePerformanceCountrySpecificInfo {
            get {
                return this.RelativePerformanceCountrySpecificInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.RelativePerformanceCountrySpecificInfoField, value) != true)) {
                    this.RelativePerformanceCountrySpecificInfoField = value;
                    this.RaisePropertyChanged("RelativePerformanceCountrySpecificInfo");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RelativePerformanceCountrySpecificData", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.DataContracts")]
    public partial class RelativePerformanceCountrySpecificData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Nullable<double> ActivePositionField;
        
        private System.Nullable<double> AlphaField;
        
        private System.Nullable<double> BenchmarkShareField;
        
        private System.Nullable<double> PortfolioShareField;
        
        private int SectorIDField;
        
        private string SectorNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> ActivePosition {
            get {
                return this.ActivePositionField;
            }
            set {
                if ((this.ActivePositionField.Equals(value) != true)) {
                    this.ActivePositionField = value;
                    this.RaisePropertyChanged("ActivePosition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> Alpha {
            get {
                return this.AlphaField;
            }
            set {
                if ((this.AlphaField.Equals(value) != true)) {
                    this.AlphaField = value;
                    this.RaisePropertyChanged("Alpha");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> BenchmarkShare {
            get {
                return this.BenchmarkShareField;
            }
            set {
                if ((this.BenchmarkShareField.Equals(value) != true)) {
                    this.BenchmarkShareField = value;
                    this.RaisePropertyChanged("BenchmarkShare");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> PortfolioShare {
            get {
                return this.PortfolioShareField;
            }
            set {
                if ((this.PortfolioShareField.Equals(value) != true)) {
                    this.PortfolioShareField = value;
                    this.RaisePropertyChanged("PortfolioShare");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SectorID {
            get {
                return this.SectorIDField;
            }
            set {
                if ((this.SectorIDField.Equals(value) != true)) {
                    this.SectorIDField = value;
                    this.RaisePropertyChanged("SectorID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SectorName {
            get {
                return this.SectorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SectorNameField, value) != true)) {
                    this.SectorNameField = value;
                    this.RaisePropertyChanged("SectorName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PerformanceGraphData", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.DataContracts")]
    public partial class PerformanceGraphData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string BENCHMARK_IDField;
        
        private double BENCHMARK_PERFORMANCEField;
        
        private System.DateTime EFFECTIVE_DATEField;
        
        private double FIFTH_YEARField;
        
        private double FIRST_YEARField;
        
        private double MTDField;
        
        private string PORTFOLIO_IDField;
        
        private double PORTFOLIO_PERFORMANCEField;
        
        private double QTDField;
        
        private double TENTH_YEARField;
        
        private double THIRD_YEARField;
        
        private double YTDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BENCHMARK_ID {
            get {
                return this.BENCHMARK_IDField;
            }
            set {
                if ((object.ReferenceEquals(this.BENCHMARK_IDField, value) != true)) {
                    this.BENCHMARK_IDField = value;
                    this.RaisePropertyChanged("BENCHMARK_ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double BENCHMARK_PERFORMANCE {
            get {
                return this.BENCHMARK_PERFORMANCEField;
            }
            set {
                if ((this.BENCHMARK_PERFORMANCEField.Equals(value) != true)) {
                    this.BENCHMARK_PERFORMANCEField = value;
                    this.RaisePropertyChanged("BENCHMARK_PERFORMANCE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EFFECTIVE_DATE {
            get {
                return this.EFFECTIVE_DATEField;
            }
            set {
                if ((this.EFFECTIVE_DATEField.Equals(value) != true)) {
                    this.EFFECTIVE_DATEField = value;
                    this.RaisePropertyChanged("EFFECTIVE_DATE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double FIFTH_YEAR {
            get {
                return this.FIFTH_YEARField;
            }
            set {
                if ((this.FIFTH_YEARField.Equals(value) != true)) {
                    this.FIFTH_YEARField = value;
                    this.RaisePropertyChanged("FIFTH_YEAR");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double FIRST_YEAR {
            get {
                return this.FIRST_YEARField;
            }
            set {
                if ((this.FIRST_YEARField.Equals(value) != true)) {
                    this.FIRST_YEARField = value;
                    this.RaisePropertyChanged("FIRST_YEAR");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MTD {
            get {
                return this.MTDField;
            }
            set {
                if ((this.MTDField.Equals(value) != true)) {
                    this.MTDField = value;
                    this.RaisePropertyChanged("MTD");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PORTFOLIO_ID {
            get {
                return this.PORTFOLIO_IDField;
            }
            set {
                if ((object.ReferenceEquals(this.PORTFOLIO_IDField, value) != true)) {
                    this.PORTFOLIO_IDField = value;
                    this.RaisePropertyChanged("PORTFOLIO_ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double PORTFOLIO_PERFORMANCE {
            get {
                return this.PORTFOLIO_PERFORMANCEField;
            }
            set {
                if ((this.PORTFOLIO_PERFORMANCEField.Equals(value) != true)) {
                    this.PORTFOLIO_PERFORMANCEField = value;
                    this.RaisePropertyChanged("PORTFOLIO_PERFORMANCE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double QTD {
            get {
                return this.QTDField;
            }
            set {
                if ((this.QTDField.Equals(value) != true)) {
                    this.QTDField = value;
                    this.RaisePropertyChanged("QTD");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double TENTH_YEAR {
            get {
                return this.TENTH_YEARField;
            }
            set {
                if ((this.TENTH_YEARField.Equals(value) != true)) {
                    this.TENTH_YEARField = value;
                    this.RaisePropertyChanged("TENTH_YEAR");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double THIRD_YEAR {
            get {
                return this.THIRD_YEARField;
            }
            set {
                if ((this.THIRD_YEARField.Equals(value) != true)) {
                    this.THIRD_YEARField = value;
                    this.RaisePropertyChanged("THIRD_YEAR");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double YTD {
            get {
                return this.YTDField;
            }
            set {
                if ((this.YTDField.Equals(value) != true)) {
                    this.YTDField = value;
                    this.RaisePropertyChanged("YTD");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PerformanceGridData", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.DataContracts")]
    public partial class PerformanceGridData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Nullable<decimal> FIFTH_YEARField;
        
        private System.Nullable<decimal> FIRST_YEARField;
        
        private System.Nullable<decimal> MTDField;
        
        private string NameField;
        
        private System.Nullable<decimal> QTDField;
        
        private System.Nullable<decimal> TENTH_YEARField;
        
        private System.Nullable<decimal> THIRD_YEARField;
        
        private System.Nullable<decimal> YTDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> FIFTH_YEAR {
            get {
                return this.FIFTH_YEARField;
            }
            set {
                if ((this.FIFTH_YEARField.Equals(value) != true)) {
                    this.FIFTH_YEARField = value;
                    this.RaisePropertyChanged("FIFTH_YEAR");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> FIRST_YEAR {
            get {
                return this.FIRST_YEARField;
            }
            set {
                if ((this.FIRST_YEARField.Equals(value) != true)) {
                    this.FIRST_YEARField = value;
                    this.RaisePropertyChanged("FIRST_YEAR");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> MTD {
            get {
                return this.MTDField;
            }
            set {
                if ((this.MTDField.Equals(value) != true)) {
                    this.MTDField = value;
                    this.RaisePropertyChanged("MTD");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> QTD {
            get {
                return this.QTDField;
            }
            set {
                if ((this.QTDField.Equals(value) != true)) {
                    this.QTDField = value;
                    this.RaisePropertyChanged("QTD");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> TENTH_YEAR {
            get {
                return this.TENTH_YEARField;
            }
            set {
                if ((this.TENTH_YEARField.Equals(value) != true)) {
                    this.TENTH_YEARField = value;
                    this.RaisePropertyChanged("TENTH_YEAR");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> THIRD_YEAR {
            get {
                return this.THIRD_YEARField;
            }
            set {
                if ((this.THIRD_YEARField.Equals(value) != true)) {
                    this.THIRD_YEARField = value;
                    this.RaisePropertyChanged("THIRD_YEAR");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> YTD {
            get {
                return this.YTDField;
            }
            set {
                if ((this.YTDField.Equals(value) != true)) {
                    this.YTDField = value;
                    this.RaisePropertyChanged("YTD");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AttributionData", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.DataContracts")]
    public partial class AttributionData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Nullable<decimal> BM1_RC_AVG_WGT_1MField;
        
        private System.Nullable<decimal> BM1_RC_AVG_WGT_1YField;
        
        private System.Nullable<decimal> BM1_RC_AVG_WGT_3MField;
        
        private System.Nullable<decimal> BM1_RC_AVG_WGT_3YField;
        
        private System.Nullable<decimal> BM1_RC_AVG_WGT_5YField;
        
        private System.Nullable<decimal> BM1_RC_AVG_WGT_6MField;
        
        private System.Nullable<decimal> BM1_RC_AVG_WGT_SIField;
        
        private System.Nullable<decimal> BM1_RC_AVG_WGT_YTDField;
        
        private string COUNTRYField;
        
        private string COUNTRY_NAMEField;
        
        private System.Nullable<decimal> F_BM1_ASH_ASSET_ALLOC_1MField;
        
        private System.Nullable<decimal> F_BM1_ASH_ASSET_ALLOC_1YField;
        
        private System.Nullable<decimal> F_BM1_ASH_ASSET_ALLOC_3MField;
        
        private System.Nullable<decimal> F_BM1_ASH_ASSET_ALLOC_3YField;
        
        private System.Nullable<decimal> F_BM1_ASH_ASSET_ALLOC_5YField;
        
        private System.Nullable<decimal> F_BM1_ASH_ASSET_ALLOC_6MField;
        
        private System.Nullable<decimal> F_BM1_ASH_ASSET_ALLOC_SIField;
        
        private System.Nullable<decimal> F_BM1_ASH_ASSET_ALLOC_YTDField;
        
        private System.Nullable<decimal> F_BM1_ASH_RC_CTN_1MField;
        
        private System.Nullable<decimal> F_BM1_ASH_RC_CTN_1YField;
        
        private System.Nullable<decimal> F_BM1_ASH_RC_CTN_3MField;
        
        private System.Nullable<decimal> F_BM1_ASH_RC_CTN_3YField;
        
        private System.Nullable<decimal> F_BM1_ASH_RC_CTN_5YField;
        
        private System.Nullable<decimal> F_BM1_ASH_RC_CTN_6MField;
        
        private System.Nullable<decimal> F_BM1_ASH_RC_CTN_SIField;
        
        private System.Nullable<decimal> F_BM1_ASH_RC_CTN_YTDField;
        
        private System.Nullable<decimal> F_BM1_ASH_SEC_SELEC_1MField;
        
        private System.Nullable<decimal> F_BM1_ASH_SEC_SELEC_1YField;
        
        private System.Nullable<decimal> F_BM1_ASH_SEC_SELEC_3MField;
        
        private System.Nullable<decimal> F_BM1_ASH_SEC_SELEC_3YField;
        
        private System.Nullable<decimal> F_BM1_ASH_SEC_SELEC_5YField;
        
        private System.Nullable<decimal> F_BM1_ASH_SEC_SELEC_6MField;
        
        private System.Nullable<decimal> F_BM1_ASH_SEC_SELEC_SIField;
        
        private System.Nullable<decimal> F_BM1_ASH_SEC_SELEC_YTDField;
        
        private System.Nullable<decimal> F_POR_ASH_RC_CTN_1MField;
        
        private System.Nullable<decimal> F_POR_ASH_RC_CTN_1YField;
        
        private System.Nullable<decimal> F_POR_ASH_RC_CTN_3MField;
        
        private System.Nullable<decimal> F_POR_ASH_RC_CTN_3YField;
        
        private System.Nullable<decimal> F_POR_ASH_RC_CTN_5YField;
        
        private System.Nullable<decimal> F_POR_ASH_RC_CTN_6MField;
        
        private System.Nullable<decimal> F_POR_ASH_RC_CTN_SIField;
        
        private System.Nullable<decimal> F_POR_ASH_RC_CTN_YTDField;
        
        private System.Nullable<decimal> POR_RC_AVG_WGT_1MField;
        
        private System.Nullable<decimal> POR_RC_AVG_WGT_1YField;
        
        private System.Nullable<decimal> POR_RC_AVG_WGT_3MField;
        
        private System.Nullable<decimal> POR_RC_AVG_WGT_3YField;
        
        private System.Nullable<decimal> POR_RC_AVG_WGT_5YField;
        
        private System.Nullable<decimal> POR_RC_AVG_WGT_6MField;
        
        private System.Nullable<decimal> POR_RC_AVG_WGT_SIField;
        
        private System.Nullable<decimal> POR_RC_AVG_WGT_YTDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> BM1_RC_AVG_WGT_1M {
            get {
                return this.BM1_RC_AVG_WGT_1MField;
            }
            set {
                if ((this.BM1_RC_AVG_WGT_1MField.Equals(value) != true)) {
                    this.BM1_RC_AVG_WGT_1MField = value;
                    this.RaisePropertyChanged("BM1_RC_AVG_WGT_1M");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> BM1_RC_AVG_WGT_1Y {
            get {
                return this.BM1_RC_AVG_WGT_1YField;
            }
            set {
                if ((this.BM1_RC_AVG_WGT_1YField.Equals(value) != true)) {
                    this.BM1_RC_AVG_WGT_1YField = value;
                    this.RaisePropertyChanged("BM1_RC_AVG_WGT_1Y");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> BM1_RC_AVG_WGT_3M {
            get {
                return this.BM1_RC_AVG_WGT_3MField;
            }
            set {
                if ((this.BM1_RC_AVG_WGT_3MField.Equals(value) != true)) {
                    this.BM1_RC_AVG_WGT_3MField = value;
                    this.RaisePropertyChanged("BM1_RC_AVG_WGT_3M");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> BM1_RC_AVG_WGT_3Y {
            get {
                return this.BM1_RC_AVG_WGT_3YField;
            }
            set {
                if ((this.BM1_RC_AVG_WGT_3YField.Equals(value) != true)) {
                    this.BM1_RC_AVG_WGT_3YField = value;
                    this.RaisePropertyChanged("BM1_RC_AVG_WGT_3Y");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> BM1_RC_AVG_WGT_5Y {
            get {
                return this.BM1_RC_AVG_WGT_5YField;
            }
            set {
                if ((this.BM1_RC_AVG_WGT_5YField.Equals(value) != true)) {
                    this.BM1_RC_AVG_WGT_5YField = value;
                    this.RaisePropertyChanged("BM1_RC_AVG_WGT_5Y");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> BM1_RC_AVG_WGT_6M {
            get {
                return this.BM1_RC_AVG_WGT_6MField;
            }
            set {
                if ((this.BM1_RC_AVG_WGT_6MField.Equals(value) != true)) {
                    this.BM1_RC_AVG_WGT_6MField = value;
                    this.RaisePropertyChanged("BM1_RC_AVG_WGT_6M");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> BM1_RC_AVG_WGT_SI {
            get {
                return this.BM1_RC_AVG_WGT_SIField;
            }
            set {
                if ((this.BM1_RC_AVG_WGT_SIField.Equals(value) != true)) {
                    this.BM1_RC_AVG_WGT_SIField = value;
                    this.RaisePropertyChanged("BM1_RC_AVG_WGT_SI");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> BM1_RC_AVG_WGT_YTD {
            get {
                return this.BM1_RC_AVG_WGT_YTDField;
            }
            set {
                if ((this.BM1_RC_AVG_WGT_YTDField.Equals(value) != true)) {
                    this.BM1_RC_AVG_WGT_YTDField = value;
                    this.RaisePropertyChanged("BM1_RC_AVG_WGT_YTD");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string COUNTRY {
            get {
                return this.COUNTRYField;
            }
            set {
                if ((object.ReferenceEquals(this.COUNTRYField, value) != true)) {
                    this.COUNTRYField = value;
                    this.RaisePropertyChanged("COUNTRY");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string COUNTRY_NAME {
            get {
                return this.COUNTRY_NAMEField;
            }
            set {
                if ((object.ReferenceEquals(this.COUNTRY_NAMEField, value) != true)) {
                    this.COUNTRY_NAMEField = value;
                    this.RaisePropertyChanged("COUNTRY_NAME");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> F_BM1_ASH_ASSET_ALLOC_1M {
            get {
                return this.F_BM1_ASH_ASSET_ALLOC_1MField;
            }
            set {
                if ((this.F_BM1_ASH_ASSET_ALLOC_1MField.Equals(value) != true)) {
                    this.F_BM1_ASH_ASSET_ALLOC_1MField = value;
                    this.RaisePropertyChanged("F_BM1_ASH_ASSET_ALLOC_1M");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> F_BM1_ASH_ASSET_ALLOC_1Y {
            get {
                return this.F_BM1_ASH_ASSET_ALLOC_1YField;
            }
            set {
                if ((this.F_BM1_ASH_ASSET_ALLOC_1YField.Equals(value) != true)) {
                    this.F_BM1_ASH_ASSET_ALLOC_1YField = value;
                    this.RaisePropertyChanged("F_BM1_ASH_ASSET_ALLOC_1Y");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> F_BM1_ASH_ASSET_ALLOC_3M {
            get {
                return this.F_BM1_ASH_ASSET_ALLOC_3MField;
            }
            set {
                if ((this.F_BM1_ASH_ASSET_ALLOC_3MField.Equals(value) != true)) {
                    this.F_BM1_ASH_ASSET_ALLOC_3MField = value;
                    this.RaisePropertyChanged("F_BM1_ASH_ASSET_ALLOC_3M");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> F_BM1_ASH_ASSET_ALLOC_3Y {
            get {
                return this.F_BM1_ASH_ASSET_ALLOC_3YField;
            }
            set {
                if ((this.F_BM1_ASH_ASSET_ALLOC_3YField.Equals(value) != true)) {
                    this.F_BM1_ASH_ASSET_ALLOC_3YField = value;
                    this.RaisePropertyChanged("F_BM1_ASH_ASSET_ALLOC_3Y");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> F_BM1_ASH_ASSET_ALLOC_5Y {
            get {
                return this.F_BM1_ASH_ASSET_ALLOC_5YField;
            }
            set {
                if ((this.F_BM1_ASH_ASSET_ALLOC_5YField.Equals(value) != true)) {
                    this.F_BM1_ASH_ASSET_ALLOC_5YField = value;
                    this.RaisePropertyChanged("F_BM1_ASH_ASSET_ALLOC_5Y");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> F_BM1_ASH_ASSET_ALLOC_6M {
            get {
                return this.F_BM1_ASH_ASSET_ALLOC_6MField;
            }
            set {
                if ((this.F_BM1_ASH_ASSET_ALLOC_6MField.Equals(value) != true)) {
                    this.F_BM1_ASH_ASSET_ALLOC_6MField = value;
                    this.RaisePropertyChanged("F_BM1_ASH_ASSET_ALLOC_6M");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> F_BM1_ASH_ASSET_ALLOC_SI {
            get {
                return this.F_BM1_ASH_ASSET_ALLOC_SIField;
            }
            set {
                if ((this.F_BM1_ASH_ASSET_ALLOC_SIField.Equals(value) != true)) {
                    this.F_BM1_ASH_ASSET_ALLOC_SIField = value;
                    this.RaisePropertyChanged("F_BM1_ASH_ASSET_ALLOC_SI");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> F_BM1_ASH_ASSET_ALLOC_YTD {
            get {
                return this.F_BM1_ASH_ASSET_ALLOC_YTDField;
            }
            set {
                if ((this.F_BM1_ASH_ASSET_ALLOC_YTDField.Equals(value) != true)) {
                    this.F_BM1_ASH_ASSET_ALLOC_YTDField = value;
                    this.RaisePropertyChanged("F_BM1_ASH_ASSET_ALLOC_YTD");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> F_BM1_ASH_RC_CTN_1M {
            get {
                return this.F_BM1_ASH_RC_CTN_1MField;
            }
            set {
                if ((this.F_BM1_ASH_RC_CTN_1MField.Equals(value) != true)) {
                    this.F_BM1_ASH_RC_CTN_1MField = value;
                    this.RaisePropertyChanged("F_BM1_ASH_RC_CTN_1M");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> F_BM1_ASH_RC_CTN_1Y {
            get {
                return this.F_BM1_ASH_RC_CTN_1YField;
            }
            set {
                if ((this.F_BM1_ASH_RC_CTN_1YField.Equals(value) != true)) {
                    this.F_BM1_ASH_RC_CTN_1YField = value;
                    this.RaisePropertyChanged("F_BM1_ASH_RC_CTN_1Y");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> F_BM1_ASH_RC_CTN_3M {
            get {
                return this.F_BM1_ASH_RC_CTN_3MField;
            }
            set {
                if ((this.F_BM1_ASH_RC_CTN_3MField.Equals(value) != true)) {
                    this.F_BM1_ASH_RC_CTN_3MField = value;
                    this.RaisePropertyChanged("F_BM1_ASH_RC_CTN_3M");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> F_BM1_ASH_RC_CTN_3Y {
            get {
                return this.F_BM1_ASH_RC_CTN_3YField;
            }
            set {
                if ((this.F_BM1_ASH_RC_CTN_3YField.Equals(value) != true)) {
                    this.F_BM1_ASH_RC_CTN_3YField = value;
                    this.RaisePropertyChanged("F_BM1_ASH_RC_CTN_3Y");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> F_BM1_ASH_RC_CTN_5Y {
            get {
                return this.F_BM1_ASH_RC_CTN_5YField;
            }
            set {
                if ((this.F_BM1_ASH_RC_CTN_5YField.Equals(value) != true)) {
                    this.F_BM1_ASH_RC_CTN_5YField = value;
                    this.RaisePropertyChanged("F_BM1_ASH_RC_CTN_5Y");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> F_BM1_ASH_RC_CTN_6M {
            get {
                return this.F_BM1_ASH_RC_CTN_6MField;
            }
            set {
                if ((this.F_BM1_ASH_RC_CTN_6MField.Equals(value) != true)) {
                    this.F_BM1_ASH_RC_CTN_6MField = value;
                    this.RaisePropertyChanged("F_BM1_ASH_RC_CTN_6M");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> F_BM1_ASH_RC_CTN_SI {
            get {
                return this.F_BM1_ASH_RC_CTN_SIField;
            }
            set {
                if ((this.F_BM1_ASH_RC_CTN_SIField.Equals(value) != true)) {
                    this.F_BM1_ASH_RC_CTN_SIField = value;
                    this.RaisePropertyChanged("F_BM1_ASH_RC_CTN_SI");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> F_BM1_ASH_RC_CTN_YTD {
            get {
                return this.F_BM1_ASH_RC_CTN_YTDField;
            }
            set {
                if ((this.F_BM1_ASH_RC_CTN_YTDField.Equals(value) != true)) {
                    this.F_BM1_ASH_RC_CTN_YTDField = value;
                    this.RaisePropertyChanged("F_BM1_ASH_RC_CTN_YTD");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> F_BM1_ASH_SEC_SELEC_1M {
            get {
                return this.F_BM1_ASH_SEC_SELEC_1MField;
            }
            set {
                if ((this.F_BM1_ASH_SEC_SELEC_1MField.Equals(value) != true)) {
                    this.F_BM1_ASH_SEC_SELEC_1MField = value;
                    this.RaisePropertyChanged("F_BM1_ASH_SEC_SELEC_1M");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> F_BM1_ASH_SEC_SELEC_1Y {
            get {
                return this.F_BM1_ASH_SEC_SELEC_1YField;
            }
            set {
                if ((this.F_BM1_ASH_SEC_SELEC_1YField.Equals(value) != true)) {
                    this.F_BM1_ASH_SEC_SELEC_1YField = value;
                    this.RaisePropertyChanged("F_BM1_ASH_SEC_SELEC_1Y");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> F_BM1_ASH_SEC_SELEC_3M {
            get {
                return this.F_BM1_ASH_SEC_SELEC_3MField;
            }
            set {
                if ((this.F_BM1_ASH_SEC_SELEC_3MField.Equals(value) != true)) {
                    this.F_BM1_ASH_SEC_SELEC_3MField = value;
                    this.RaisePropertyChanged("F_BM1_ASH_SEC_SELEC_3M");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> F_BM1_ASH_SEC_SELEC_3Y {
            get {
                return this.F_BM1_ASH_SEC_SELEC_3YField;
            }
            set {
                if ((this.F_BM1_ASH_SEC_SELEC_3YField.Equals(value) != true)) {
                    this.F_BM1_ASH_SEC_SELEC_3YField = value;
                    this.RaisePropertyChanged("F_BM1_ASH_SEC_SELEC_3Y");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> F_BM1_ASH_SEC_SELEC_5Y {
            get {
                return this.F_BM1_ASH_SEC_SELEC_5YField;
            }
            set {
                if ((this.F_BM1_ASH_SEC_SELEC_5YField.Equals(value) != true)) {
                    this.F_BM1_ASH_SEC_SELEC_5YField = value;
                    this.RaisePropertyChanged("F_BM1_ASH_SEC_SELEC_5Y");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> F_BM1_ASH_SEC_SELEC_6M {
            get {
                return this.F_BM1_ASH_SEC_SELEC_6MField;
            }
            set {
                if ((this.F_BM1_ASH_SEC_SELEC_6MField.Equals(value) != true)) {
                    this.F_BM1_ASH_SEC_SELEC_6MField = value;
                    this.RaisePropertyChanged("F_BM1_ASH_SEC_SELEC_6M");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> F_BM1_ASH_SEC_SELEC_SI {
            get {
                return this.F_BM1_ASH_SEC_SELEC_SIField;
            }
            set {
                if ((this.F_BM1_ASH_SEC_SELEC_SIField.Equals(value) != true)) {
                    this.F_BM1_ASH_SEC_SELEC_SIField = value;
                    this.RaisePropertyChanged("F_BM1_ASH_SEC_SELEC_SI");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> F_BM1_ASH_SEC_SELEC_YTD {
            get {
                return this.F_BM1_ASH_SEC_SELEC_YTDField;
            }
            set {
                if ((this.F_BM1_ASH_SEC_SELEC_YTDField.Equals(value) != true)) {
                    this.F_BM1_ASH_SEC_SELEC_YTDField = value;
                    this.RaisePropertyChanged("F_BM1_ASH_SEC_SELEC_YTD");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> F_POR_ASH_RC_CTN_1M {
            get {
                return this.F_POR_ASH_RC_CTN_1MField;
            }
            set {
                if ((this.F_POR_ASH_RC_CTN_1MField.Equals(value) != true)) {
                    this.F_POR_ASH_RC_CTN_1MField = value;
                    this.RaisePropertyChanged("F_POR_ASH_RC_CTN_1M");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> F_POR_ASH_RC_CTN_1Y {
            get {
                return this.F_POR_ASH_RC_CTN_1YField;
            }
            set {
                if ((this.F_POR_ASH_RC_CTN_1YField.Equals(value) != true)) {
                    this.F_POR_ASH_RC_CTN_1YField = value;
                    this.RaisePropertyChanged("F_POR_ASH_RC_CTN_1Y");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> F_POR_ASH_RC_CTN_3M {
            get {
                return this.F_POR_ASH_RC_CTN_3MField;
            }
            set {
                if ((this.F_POR_ASH_RC_CTN_3MField.Equals(value) != true)) {
                    this.F_POR_ASH_RC_CTN_3MField = value;
                    this.RaisePropertyChanged("F_POR_ASH_RC_CTN_3M");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> F_POR_ASH_RC_CTN_3Y {
            get {
                return this.F_POR_ASH_RC_CTN_3YField;
            }
            set {
                if ((this.F_POR_ASH_RC_CTN_3YField.Equals(value) != true)) {
                    this.F_POR_ASH_RC_CTN_3YField = value;
                    this.RaisePropertyChanged("F_POR_ASH_RC_CTN_3Y");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> F_POR_ASH_RC_CTN_5Y {
            get {
                return this.F_POR_ASH_RC_CTN_5YField;
            }
            set {
                if ((this.F_POR_ASH_RC_CTN_5YField.Equals(value) != true)) {
                    this.F_POR_ASH_RC_CTN_5YField = value;
                    this.RaisePropertyChanged("F_POR_ASH_RC_CTN_5Y");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> F_POR_ASH_RC_CTN_6M {
            get {
                return this.F_POR_ASH_RC_CTN_6MField;
            }
            set {
                if ((this.F_POR_ASH_RC_CTN_6MField.Equals(value) != true)) {
                    this.F_POR_ASH_RC_CTN_6MField = value;
                    this.RaisePropertyChanged("F_POR_ASH_RC_CTN_6M");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> F_POR_ASH_RC_CTN_SI {
            get {
                return this.F_POR_ASH_RC_CTN_SIField;
            }
            set {
                if ((this.F_POR_ASH_RC_CTN_SIField.Equals(value) != true)) {
                    this.F_POR_ASH_RC_CTN_SIField = value;
                    this.RaisePropertyChanged("F_POR_ASH_RC_CTN_SI");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> F_POR_ASH_RC_CTN_YTD {
            get {
                return this.F_POR_ASH_RC_CTN_YTDField;
            }
            set {
                if ((this.F_POR_ASH_RC_CTN_YTDField.Equals(value) != true)) {
                    this.F_POR_ASH_RC_CTN_YTDField = value;
                    this.RaisePropertyChanged("F_POR_ASH_RC_CTN_YTD");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> POR_RC_AVG_WGT_1M {
            get {
                return this.POR_RC_AVG_WGT_1MField;
            }
            set {
                if ((this.POR_RC_AVG_WGT_1MField.Equals(value) != true)) {
                    this.POR_RC_AVG_WGT_1MField = value;
                    this.RaisePropertyChanged("POR_RC_AVG_WGT_1M");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> POR_RC_AVG_WGT_1Y {
            get {
                return this.POR_RC_AVG_WGT_1YField;
            }
            set {
                if ((this.POR_RC_AVG_WGT_1YField.Equals(value) != true)) {
                    this.POR_RC_AVG_WGT_1YField = value;
                    this.RaisePropertyChanged("POR_RC_AVG_WGT_1Y");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> POR_RC_AVG_WGT_3M {
            get {
                return this.POR_RC_AVG_WGT_3MField;
            }
            set {
                if ((this.POR_RC_AVG_WGT_3MField.Equals(value) != true)) {
                    this.POR_RC_AVG_WGT_3MField = value;
                    this.RaisePropertyChanged("POR_RC_AVG_WGT_3M");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> POR_RC_AVG_WGT_3Y {
            get {
                return this.POR_RC_AVG_WGT_3YField;
            }
            set {
                if ((this.POR_RC_AVG_WGT_3YField.Equals(value) != true)) {
                    this.POR_RC_AVG_WGT_3YField = value;
                    this.RaisePropertyChanged("POR_RC_AVG_WGT_3Y");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> POR_RC_AVG_WGT_5Y {
            get {
                return this.POR_RC_AVG_WGT_5YField;
            }
            set {
                if ((this.POR_RC_AVG_WGT_5YField.Equals(value) != true)) {
                    this.POR_RC_AVG_WGT_5YField = value;
                    this.RaisePropertyChanged("POR_RC_AVG_WGT_5Y");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> POR_RC_AVG_WGT_6M {
            get {
                return this.POR_RC_AVG_WGT_6MField;
            }
            set {
                if ((this.POR_RC_AVG_WGT_6MField.Equals(value) != true)) {
                    this.POR_RC_AVG_WGT_6MField = value;
                    this.RaisePropertyChanged("POR_RC_AVG_WGT_6M");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> POR_RC_AVG_WGT_SI {
            get {
                return this.POR_RC_AVG_WGT_SIField;
            }
            set {
                if ((this.POR_RC_AVG_WGT_SIField.Equals(value) != true)) {
                    this.POR_RC_AVG_WGT_SIField = value;
                    this.RaisePropertyChanged("POR_RC_AVG_WGT_SI");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> POR_RC_AVG_WGT_YTD {
            get {
                return this.POR_RC_AVG_WGT_YTDField;
            }
            set {
                if ((this.POR_RC_AVG_WGT_YTDField.Equals(value) != true)) {
                    this.POR_RC_AVG_WGT_YTDField = value;
                    this.RaisePropertyChanged("POR_RC_AVG_WGT_YTD");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations")]
    public interface BenchmarkHoldingsPerformanceOperations {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/Temp", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/TempResponse")]
        System.IAsyncResult BeginTemp(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PeriodSelectionData data, System.AsyncCallback callback, object asyncState);
        
        void EndTemp(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrievePortfolioSelect" +
            "ionData", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrievePortfolioSelect" +
            "ionDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.ServiceFault), Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrievePortfolioSelect" +
            "ionDataServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrievePortfolioSelectionData(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData> EndRetrievePortfolioSelectionData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveBenchmarkSelect" +
            "ionData", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveBenchmarkSelect" +
            "ionDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.ServiceFault), Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveBenchmarkSelect" +
            "ionDataServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrieveBenchmarkSelectionData(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData> EndRetrieveBenchmarkSelectionData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveSectorBreakdown" +
            "Data", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveSectorBreakdown" +
            "DataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.ServiceFault), Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveSectorBreakdown" +
            "DataServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrieveSectorBreakdownData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.SectorBreakdownData> EndRetrieveSectorBreakdownData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveRegionBreakdown" +
            "Data", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveRegionBreakdown" +
            "DataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.ServiceFault), Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveRegionBreakdown" +
            "DataServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrieveRegionBreakdownData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RegionBreakdownData> EndRetrieveRegionBreakdownData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveTopHoldingsData" +
            "", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveTopHoldingsData" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.ServiceFault), Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveTopHoldingsData" +
            "ServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrieveTopHoldingsData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.TopHoldingsData> EndRetrieveTopHoldingsData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveIndexConstituen" +
            "tsData", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveIndexConstituen" +
            "tsDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.ServiceFault), Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveIndexConstituen" +
            "tsDataServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrieveIndexConstituentsData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.IndexConstituentsData> EndRetrieveIndexConstituentsData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveFilterSelection" +
            "Data", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveFilterSelection" +
            "DataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.ServiceFault), Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveFilterSelection" +
            "DataServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrieveFilterSelectionData(System.Nullable<System.DateTime> effectiveDate, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.FilterSelectionData> EndRetrieveFilterSelectionData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrievePortfolioDetail" +
            "sData", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrievePortfolioDetail" +
            "sDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.ServiceFault), Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrievePortfolioDetail" +
            "sDataServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrievePortfolioDetailsData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData objPortfolioIdentifier, System.DateTime effectiveDate, bool objGetBenchmark, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioDetailsData> EndRetrievePortfolioDetailsData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveBenchmarkChartR" +
            "eturnData", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveBenchmarkChartR" +
            "eturnDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.ServiceFault), Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveBenchmarkChartR" +
            "eturnDataServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrieveBenchmarkChartReturnData(System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData> objBenchmarkIdentifier, System.DateTime objEffectiveDate, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkChartReturnData> EndRetrieveBenchmarkChartReturnData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveBenchmarkGridRe" +
            "turnData", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveBenchmarkGridRe" +
            "turnDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.ServiceFault), Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveBenchmarkGridRe" +
            "turnDataServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrieveBenchmarkGridReturnData(System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData> objBenchmarkIdentifier, System.DateTime objEffectiveDate, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkGridReturnData> EndRetrieveBenchmarkGridReturnData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveAssetAllocation" +
            "Data", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveAssetAllocation" +
            "DataResponse")]
        System.IAsyncResult BeginRetrieveAssetAllocationData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.AssetAllocationData> EndRetrieveAssetAllocationData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveHoldingsPercent" +
            "ageData", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveHoldingsPercent" +
            "ageDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.ServiceFault), Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveHoldingsPercent" +
            "ageDataServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrieveHoldingsPercentageData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string filterType, string filterValue, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.HoldingsPercentageData> EndRetrieveHoldingsPercentageData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveHoldingsPercent" +
            "ageDataForRegion", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveHoldingsPercent" +
            "ageDataForRegionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.ServiceFault), Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveHoldingsPercent" +
            "ageDataForRegionServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrieveHoldingsPercentageDataForRegion(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string filterType, string filterValue, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.HoldingsPercentageData> EndRetrieveHoldingsPercentageDataForRegion(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveTopBenchmarkSec" +
            "uritiesData", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveTopBenchmarkSec" +
            "uritiesDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.ServiceFault), Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveTopBenchmarkSec" +
            "uritiesDataServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrieveTopBenchmarkSecuritiesData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.TopBenchmarkSecuritiesData> EndRetrieveTopBenchmarkSecuritiesData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveMarketCapitaliz" +
            "ationData", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveMarketCapitaliz" +
            "ationDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.ServiceFault), Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveMarketCapitaliz" +
            "ationDataServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrieveMarketCapitalizationData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string filterType, string filterValue, bool isExCashSecurity, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketCapitalizationData> EndRetrieveMarketCapitalizationData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrievePortfolioRiskRe" +
            "turnData", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrievePortfolioRiskRe" +
            "turnDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.ServiceFault), Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrievePortfolioRiskRe" +
            "turnDataServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrievePortfolioRiskReturnData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioRiskReturnData> EndRetrievePortfolioRiskReturnData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveHeatMapData", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveHeatMapDataResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.ServiceFault), Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveHeatMapDataServ" +
            "iceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrieveHeatMapData(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.HeatMapData> EndRetrieveHeatMapData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveRelativePerform" +
            "anceSectorData", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveRelativePerform" +
            "anceSectorDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.ServiceFault), Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveRelativePerform" +
            "anceSectorDataServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrieveRelativePerformanceSectorData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceSectorData> EndRetrieveRelativePerformanceSectorData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveRelativePerform" +
            "anceCountryActivePositionData", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveRelativePerform" +
            "anceCountryActivePositionDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.ServiceFault), Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveRelativePerform" +
            "anceCountryActivePositionDataServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrieveRelativePerformanceCountryActivePositionData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate, string countryID, System.Nullable<int> sectorID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceActivePositionData> EndRetrieveRelativePerformanceCountryActivePositionData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveRelativePerform" +
            "anceSectorActivePositionData", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveRelativePerform" +
            "anceSectorActivePositionDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.ServiceFault), Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveRelativePerform" +
            "anceSectorActivePositionDataServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrieveRelativePerformanceSectorActivePositionData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate, string countryID, System.Nullable<int> sectorID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceActivePositionData> EndRetrieveRelativePerformanceSectorActivePositionData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveRelativePerform" +
            "anceSecurityActivePositionData", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveRelativePerform" +
            "anceSecurityActivePositionDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.ServiceFault), Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveRelativePerform" +
            "anceSecurityActivePositionDataServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrieveRelativePerformanceSecurityActivePositionData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate, string countryID, System.Nullable<int> sectorID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceActivePositionData> EndRetrieveRelativePerformanceSecurityActivePositionData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveRelativePerform" +
            "anceSecurityData", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveRelativePerform" +
            "anceSecurityDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.ServiceFault), Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveRelativePerform" +
            "anceSecurityDataServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrieveRelativePerformanceSecurityData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, System.DateTime effectiveDate, string countryID, System.Nullable<int> sectorID, int order, System.Nullable<int> maxRecords, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceSecurityData> EndRetrieveRelativePerformanceSecurityData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveRelativePerform" +
            "anceData", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveRelativePerform" +
            "anceDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.ServiceFault), Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveRelativePerform" +
            "anceDataServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrieveRelativePerformanceData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceData> EndRetrieveRelativePerformanceData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrievePerformanceGrap" +
            "hData", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrievePerformanceGrap" +
            "hDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.ServiceFault), Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrievePerformanceGrap" +
            "hDataServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrievePerformanceGraphData(string nameOfFund, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PerformanceGraphData> EndRetrievePerformanceGraphData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrievePerformanceGrid" +
            "Data", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrievePerformanceGrid" +
            "DataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.ServiceFault), Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrievePerformanceGrid" +
            "DataServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrievePerformanceGridData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PerformanceGridData> EndRetrievePerformanceGridData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveAttributionData" +
            "", ReplyAction="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveAttributionData" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.ServiceFault), Action="http://tempuri.org/BenchmarkHoldingsPerformanceOperations/RetrieveAttributionData" +
            "ServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/GreenField.Web.Helpers.Service_Faults")]
        System.IAsyncResult BeginRetrieveAttributionData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.AttributionData> EndRetrieveAttributionData(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface BenchmarkHoldingsPerformanceOperationsChannel : GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrievePortfolioSelectionDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrievePortfolioSelectionDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveBenchmarkSelectionDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveBenchmarkSelectionDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveSectorBreakdownDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveSectorBreakdownDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.SectorBreakdownData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.SectorBreakdownData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveRegionBreakdownDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveRegionBreakdownDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RegionBreakdownData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RegionBreakdownData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveTopHoldingsDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveTopHoldingsDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.TopHoldingsData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.TopHoldingsData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveIndexConstituentsDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveIndexConstituentsDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.IndexConstituentsData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.IndexConstituentsData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveFilterSelectionDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveFilterSelectionDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.FilterSelectionData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.FilterSelectionData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrievePortfolioDetailsDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrievePortfolioDetailsDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioDetailsData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioDetailsData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveBenchmarkChartReturnDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveBenchmarkChartReturnDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkChartReturnData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkChartReturnData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveBenchmarkGridReturnDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveBenchmarkGridReturnDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkGridReturnData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkGridReturnData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveAssetAllocationDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveAssetAllocationDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.AssetAllocationData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.AssetAllocationData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveHoldingsPercentageDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveHoldingsPercentageDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.HoldingsPercentageData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.HoldingsPercentageData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveHoldingsPercentageDataForRegionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveHoldingsPercentageDataForRegionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.HoldingsPercentageData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.HoldingsPercentageData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveTopBenchmarkSecuritiesDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveTopBenchmarkSecuritiesDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.TopBenchmarkSecuritiesData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.TopBenchmarkSecuritiesData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveMarketCapitalizationDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveMarketCapitalizationDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketCapitalizationData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketCapitalizationData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrievePortfolioRiskReturnDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrievePortfolioRiskReturnDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioRiskReturnData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioRiskReturnData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveHeatMapDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveHeatMapDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.HeatMapData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.HeatMapData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveRelativePerformanceSectorDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveRelativePerformanceSectorDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceSectorData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceSectorData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveRelativePerformanceCountryActivePositionDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveRelativePerformanceCountryActivePositionDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceActivePositionData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceActivePositionData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveRelativePerformanceSectorActivePositionDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveRelativePerformanceSectorActivePositionDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceActivePositionData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceActivePositionData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveRelativePerformanceSecurityActivePositionDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveRelativePerformanceSecurityActivePositionDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceActivePositionData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceActivePositionData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveRelativePerformanceSecurityDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveRelativePerformanceSecurityDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceSecurityData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceSecurityData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveRelativePerformanceDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveRelativePerformanceDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrievePerformanceGraphDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrievePerformanceGraphDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PerformanceGraphData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PerformanceGraphData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrievePerformanceGridDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrievePerformanceGridDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PerformanceGridData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PerformanceGridData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveAttributionDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveAttributionDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.AttributionData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.AttributionData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BenchmarkHoldingsPerformanceOperationsClient : System.ServiceModel.ClientBase<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations>, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations {
        
        private BeginOperationDelegate onBeginTempDelegate;
        
        private EndOperationDelegate onEndTempDelegate;
        
        private System.Threading.SendOrPostCallback onTempCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrievePortfolioSelectionDataDelegate;
        
        private EndOperationDelegate onEndRetrievePortfolioSelectionDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrievePortfolioSelectionDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveBenchmarkSelectionDataDelegate;
        
        private EndOperationDelegate onEndRetrieveBenchmarkSelectionDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveBenchmarkSelectionDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveSectorBreakdownDataDelegate;
        
        private EndOperationDelegate onEndRetrieveSectorBreakdownDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveSectorBreakdownDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveRegionBreakdownDataDelegate;
        
        private EndOperationDelegate onEndRetrieveRegionBreakdownDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveRegionBreakdownDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveTopHoldingsDataDelegate;
        
        private EndOperationDelegate onEndRetrieveTopHoldingsDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveTopHoldingsDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveIndexConstituentsDataDelegate;
        
        private EndOperationDelegate onEndRetrieveIndexConstituentsDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveIndexConstituentsDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveFilterSelectionDataDelegate;
        
        private EndOperationDelegate onEndRetrieveFilterSelectionDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveFilterSelectionDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrievePortfolioDetailsDataDelegate;
        
        private EndOperationDelegate onEndRetrievePortfolioDetailsDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrievePortfolioDetailsDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveBenchmarkChartReturnDataDelegate;
        
        private EndOperationDelegate onEndRetrieveBenchmarkChartReturnDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveBenchmarkChartReturnDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveBenchmarkGridReturnDataDelegate;
        
        private EndOperationDelegate onEndRetrieveBenchmarkGridReturnDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveBenchmarkGridReturnDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveAssetAllocationDataDelegate;
        
        private EndOperationDelegate onEndRetrieveAssetAllocationDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveAssetAllocationDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveHoldingsPercentageDataDelegate;
        
        private EndOperationDelegate onEndRetrieveHoldingsPercentageDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveHoldingsPercentageDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveHoldingsPercentageDataForRegionDelegate;
        
        private EndOperationDelegate onEndRetrieveHoldingsPercentageDataForRegionDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveHoldingsPercentageDataForRegionCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveTopBenchmarkSecuritiesDataDelegate;
        
        private EndOperationDelegate onEndRetrieveTopBenchmarkSecuritiesDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveTopBenchmarkSecuritiesDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveMarketCapitalizationDataDelegate;
        
        private EndOperationDelegate onEndRetrieveMarketCapitalizationDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveMarketCapitalizationDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrievePortfolioRiskReturnDataDelegate;
        
        private EndOperationDelegate onEndRetrievePortfolioRiskReturnDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrievePortfolioRiskReturnDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveHeatMapDataDelegate;
        
        private EndOperationDelegate onEndRetrieveHeatMapDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveHeatMapDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveRelativePerformanceSectorDataDelegate;
        
        private EndOperationDelegate onEndRetrieveRelativePerformanceSectorDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveRelativePerformanceSectorDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveRelativePerformanceCountryActivePositionDataDelegate;
        
        private EndOperationDelegate onEndRetrieveRelativePerformanceCountryActivePositionDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveRelativePerformanceCountryActivePositionDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveRelativePerformanceSectorActivePositionDataDelegate;
        
        private EndOperationDelegate onEndRetrieveRelativePerformanceSectorActivePositionDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveRelativePerformanceSectorActivePositionDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveRelativePerformanceSecurityActivePositionDataDelegate;
        
        private EndOperationDelegate onEndRetrieveRelativePerformanceSecurityActivePositionDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveRelativePerformanceSecurityActivePositionDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveRelativePerformanceSecurityDataDelegate;
        
        private EndOperationDelegate onEndRetrieveRelativePerformanceSecurityDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveRelativePerformanceSecurityDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveRelativePerformanceDataDelegate;
        
        private EndOperationDelegate onEndRetrieveRelativePerformanceDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveRelativePerformanceDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrievePerformanceGraphDataDelegate;
        
        private EndOperationDelegate onEndRetrievePerformanceGraphDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrievePerformanceGraphDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrievePerformanceGridDataDelegate;
        
        private EndOperationDelegate onEndRetrievePerformanceGridDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrievePerformanceGridDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveAttributionDataDelegate;
        
        private EndOperationDelegate onEndRetrieveAttributionDataDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveAttributionDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public BenchmarkHoldingsPerformanceOperationsClient() {
        }
        
        public BenchmarkHoldingsPerformanceOperationsClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BenchmarkHoldingsPerformanceOperationsClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BenchmarkHoldingsPerformanceOperationsClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BenchmarkHoldingsPerformanceOperationsClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> TempCompleted;
        
        public event System.EventHandler<RetrievePortfolioSelectionDataCompletedEventArgs> RetrievePortfolioSelectionDataCompleted;
        
        public event System.EventHandler<RetrieveBenchmarkSelectionDataCompletedEventArgs> RetrieveBenchmarkSelectionDataCompleted;
        
        public event System.EventHandler<RetrieveSectorBreakdownDataCompletedEventArgs> RetrieveSectorBreakdownDataCompleted;
        
        public event System.EventHandler<RetrieveRegionBreakdownDataCompletedEventArgs> RetrieveRegionBreakdownDataCompleted;
        
        public event System.EventHandler<RetrieveTopHoldingsDataCompletedEventArgs> RetrieveTopHoldingsDataCompleted;
        
        public event System.EventHandler<RetrieveIndexConstituentsDataCompletedEventArgs> RetrieveIndexConstituentsDataCompleted;
        
        public event System.EventHandler<RetrieveFilterSelectionDataCompletedEventArgs> RetrieveFilterSelectionDataCompleted;
        
        public event System.EventHandler<RetrievePortfolioDetailsDataCompletedEventArgs> RetrievePortfolioDetailsDataCompleted;
        
        public event System.EventHandler<RetrieveBenchmarkChartReturnDataCompletedEventArgs> RetrieveBenchmarkChartReturnDataCompleted;
        
        public event System.EventHandler<RetrieveBenchmarkGridReturnDataCompletedEventArgs> RetrieveBenchmarkGridReturnDataCompleted;
        
        public event System.EventHandler<RetrieveAssetAllocationDataCompletedEventArgs> RetrieveAssetAllocationDataCompleted;
        
        public event System.EventHandler<RetrieveHoldingsPercentageDataCompletedEventArgs> RetrieveHoldingsPercentageDataCompleted;
        
        public event System.EventHandler<RetrieveHoldingsPercentageDataForRegionCompletedEventArgs> RetrieveHoldingsPercentageDataForRegionCompleted;
        
        public event System.EventHandler<RetrieveTopBenchmarkSecuritiesDataCompletedEventArgs> RetrieveTopBenchmarkSecuritiesDataCompleted;
        
        public event System.EventHandler<RetrieveMarketCapitalizationDataCompletedEventArgs> RetrieveMarketCapitalizationDataCompleted;
        
        public event System.EventHandler<RetrievePortfolioRiskReturnDataCompletedEventArgs> RetrievePortfolioRiskReturnDataCompleted;
        
        public event System.EventHandler<RetrieveHeatMapDataCompletedEventArgs> RetrieveHeatMapDataCompleted;
        
        public event System.EventHandler<RetrieveRelativePerformanceSectorDataCompletedEventArgs> RetrieveRelativePerformanceSectorDataCompleted;
        
        public event System.EventHandler<RetrieveRelativePerformanceCountryActivePositionDataCompletedEventArgs> RetrieveRelativePerformanceCountryActivePositionDataCompleted;
        
        public event System.EventHandler<RetrieveRelativePerformanceSectorActivePositionDataCompletedEventArgs> RetrieveRelativePerformanceSectorActivePositionDataCompleted;
        
        public event System.EventHandler<RetrieveRelativePerformanceSecurityActivePositionDataCompletedEventArgs> RetrieveRelativePerformanceSecurityActivePositionDataCompleted;
        
        public event System.EventHandler<RetrieveRelativePerformanceSecurityDataCompletedEventArgs> RetrieveRelativePerformanceSecurityDataCompleted;
        
        public event System.EventHandler<RetrieveRelativePerformanceDataCompletedEventArgs> RetrieveRelativePerformanceDataCompleted;
        
        public event System.EventHandler<RetrievePerformanceGraphDataCompletedEventArgs> RetrievePerformanceGraphDataCompleted;
        
        public event System.EventHandler<RetrievePerformanceGridDataCompletedEventArgs> RetrievePerformanceGridDataCompleted;
        
        public event System.EventHandler<RetrieveAttributionDataCompletedEventArgs> RetrieveAttributionDataCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginTemp(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PeriodSelectionData data, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTemp(data, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndTemp(System.IAsyncResult result) {
            base.Channel.EndTemp(result);
        }
        
        private System.IAsyncResult OnBeginTemp(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PeriodSelectionData data = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PeriodSelectionData)(inValues[0]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginTemp(data, callback, asyncState);
        }
        
        private object[] OnEndTemp(System.IAsyncResult result) {
            ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndTemp(result);
            return null;
        }
        
        private void OnTempCompleted(object state) {
            if ((this.TempCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TempCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TempAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PeriodSelectionData data) {
            this.TempAsync(data, null);
        }
        
        public void TempAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PeriodSelectionData data, object userState) {
            if ((this.onBeginTempDelegate == null)) {
                this.onBeginTempDelegate = new BeginOperationDelegate(this.OnBeginTemp);
            }
            if ((this.onEndTempDelegate == null)) {
                this.onEndTempDelegate = new EndOperationDelegate(this.OnEndTemp);
            }
            if ((this.onTempCompletedDelegate == null)) {
                this.onTempCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTempCompleted);
            }
            base.InvokeAsync(this.onBeginTempDelegate, new object[] {
                        data}, this.onEndTempDelegate, this.onTempCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginRetrievePortfolioSelectionData(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrievePortfolioSelectionData(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData> GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndRetrievePortfolioSelectionData(System.IAsyncResult result) {
            return base.Channel.EndRetrievePortfolioSelectionData(result);
        }
        
        private System.IAsyncResult OnBeginRetrievePortfolioSelectionData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginRetrievePortfolioSelectionData(callback, asyncState);
        }
        
        private object[] OnEndRetrievePortfolioSelectionData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndRetrievePortfolioSelectionData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrievePortfolioSelectionDataCompleted(object state) {
            if ((this.RetrievePortfolioSelectionDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrievePortfolioSelectionDataCompleted(this, new RetrievePortfolioSelectionDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrievePortfolioSelectionDataAsync() {
            this.RetrievePortfolioSelectionDataAsync(null);
        }
        
        public void RetrievePortfolioSelectionDataAsync(object userState) {
            if ((this.onBeginRetrievePortfolioSelectionDataDelegate == null)) {
                this.onBeginRetrievePortfolioSelectionDataDelegate = new BeginOperationDelegate(this.OnBeginRetrievePortfolioSelectionData);
            }
            if ((this.onEndRetrievePortfolioSelectionDataDelegate == null)) {
                this.onEndRetrievePortfolioSelectionDataDelegate = new EndOperationDelegate(this.OnEndRetrievePortfolioSelectionData);
            }
            if ((this.onRetrievePortfolioSelectionDataCompletedDelegate == null)) {
                this.onRetrievePortfolioSelectionDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrievePortfolioSelectionDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrievePortfolioSelectionDataDelegate, null, this.onEndRetrievePortfolioSelectionDataDelegate, this.onRetrievePortfolioSelectionDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginRetrieveBenchmarkSelectionData(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveBenchmarkSelectionData(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData> GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndRetrieveBenchmarkSelectionData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveBenchmarkSelectionData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveBenchmarkSelectionData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginRetrieveBenchmarkSelectionData(callback, asyncState);
        }
        
        private object[] OnEndRetrieveBenchmarkSelectionData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndRetrieveBenchmarkSelectionData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveBenchmarkSelectionDataCompleted(object state) {
            if ((this.RetrieveBenchmarkSelectionDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveBenchmarkSelectionDataCompleted(this, new RetrieveBenchmarkSelectionDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveBenchmarkSelectionDataAsync() {
            this.RetrieveBenchmarkSelectionDataAsync(null);
        }
        
        public void RetrieveBenchmarkSelectionDataAsync(object userState) {
            if ((this.onBeginRetrieveBenchmarkSelectionDataDelegate == null)) {
                this.onBeginRetrieveBenchmarkSelectionDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveBenchmarkSelectionData);
            }
            if ((this.onEndRetrieveBenchmarkSelectionDataDelegate == null)) {
                this.onEndRetrieveBenchmarkSelectionDataDelegate = new EndOperationDelegate(this.OnEndRetrieveBenchmarkSelectionData);
            }
            if ((this.onRetrieveBenchmarkSelectionDataCompletedDelegate == null)) {
                this.onRetrieveBenchmarkSelectionDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveBenchmarkSelectionDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveBenchmarkSelectionDataDelegate, null, this.onEndRetrieveBenchmarkSelectionDataDelegate, this.onRetrieveBenchmarkSelectionDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginRetrieveSectorBreakdownData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveSectorBreakdownData(portfolioSelectionData, effectiveDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.SectorBreakdownData> GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndRetrieveSectorBreakdownData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveSectorBreakdownData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveSectorBreakdownData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData)(inValues[0]));
            System.DateTime effectiveDate = ((System.DateTime)(inValues[1]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginRetrieveSectorBreakdownData(portfolioSelectionData, effectiveDate, callback, asyncState);
        }
        
        private object[] OnEndRetrieveSectorBreakdownData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.SectorBreakdownData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndRetrieveSectorBreakdownData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveSectorBreakdownDataCompleted(object state) {
            if ((this.RetrieveSectorBreakdownDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveSectorBreakdownDataCompleted(this, new RetrieveSectorBreakdownDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveSectorBreakdownDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate) {
            this.RetrieveSectorBreakdownDataAsync(portfolioSelectionData, effectiveDate, null);
        }
        
        public void RetrieveSectorBreakdownDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, object userState) {
            if ((this.onBeginRetrieveSectorBreakdownDataDelegate == null)) {
                this.onBeginRetrieveSectorBreakdownDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveSectorBreakdownData);
            }
            if ((this.onEndRetrieveSectorBreakdownDataDelegate == null)) {
                this.onEndRetrieveSectorBreakdownDataDelegate = new EndOperationDelegate(this.OnEndRetrieveSectorBreakdownData);
            }
            if ((this.onRetrieveSectorBreakdownDataCompletedDelegate == null)) {
                this.onRetrieveSectorBreakdownDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveSectorBreakdownDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveSectorBreakdownDataDelegate, new object[] {
                        portfolioSelectionData,
                        effectiveDate}, this.onEndRetrieveSectorBreakdownDataDelegate, this.onRetrieveSectorBreakdownDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginRetrieveRegionBreakdownData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveRegionBreakdownData(portfolioSelectionData, effectiveDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RegionBreakdownData> GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndRetrieveRegionBreakdownData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveRegionBreakdownData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveRegionBreakdownData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData)(inValues[0]));
            System.DateTime effectiveDate = ((System.DateTime)(inValues[1]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginRetrieveRegionBreakdownData(portfolioSelectionData, effectiveDate, callback, asyncState);
        }
        
        private object[] OnEndRetrieveRegionBreakdownData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RegionBreakdownData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndRetrieveRegionBreakdownData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveRegionBreakdownDataCompleted(object state) {
            if ((this.RetrieveRegionBreakdownDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveRegionBreakdownDataCompleted(this, new RetrieveRegionBreakdownDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveRegionBreakdownDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate) {
            this.RetrieveRegionBreakdownDataAsync(portfolioSelectionData, effectiveDate, null);
        }
        
        public void RetrieveRegionBreakdownDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, object userState) {
            if ((this.onBeginRetrieveRegionBreakdownDataDelegate == null)) {
                this.onBeginRetrieveRegionBreakdownDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveRegionBreakdownData);
            }
            if ((this.onEndRetrieveRegionBreakdownDataDelegate == null)) {
                this.onEndRetrieveRegionBreakdownDataDelegate = new EndOperationDelegate(this.OnEndRetrieveRegionBreakdownData);
            }
            if ((this.onRetrieveRegionBreakdownDataCompletedDelegate == null)) {
                this.onRetrieveRegionBreakdownDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveRegionBreakdownDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveRegionBreakdownDataDelegate, new object[] {
                        portfolioSelectionData,
                        effectiveDate}, this.onEndRetrieveRegionBreakdownDataDelegate, this.onRetrieveRegionBreakdownDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginRetrieveTopHoldingsData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveTopHoldingsData(portfolioSelectionData, effectiveDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.TopHoldingsData> GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndRetrieveTopHoldingsData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveTopHoldingsData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveTopHoldingsData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData)(inValues[0]));
            System.DateTime effectiveDate = ((System.DateTime)(inValues[1]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginRetrieveTopHoldingsData(portfolioSelectionData, effectiveDate, callback, asyncState);
        }
        
        private object[] OnEndRetrieveTopHoldingsData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.TopHoldingsData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndRetrieveTopHoldingsData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveTopHoldingsDataCompleted(object state) {
            if ((this.RetrieveTopHoldingsDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveTopHoldingsDataCompleted(this, new RetrieveTopHoldingsDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveTopHoldingsDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate) {
            this.RetrieveTopHoldingsDataAsync(portfolioSelectionData, effectiveDate, null);
        }
        
        public void RetrieveTopHoldingsDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, object userState) {
            if ((this.onBeginRetrieveTopHoldingsDataDelegate == null)) {
                this.onBeginRetrieveTopHoldingsDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveTopHoldingsData);
            }
            if ((this.onEndRetrieveTopHoldingsDataDelegate == null)) {
                this.onEndRetrieveTopHoldingsDataDelegate = new EndOperationDelegate(this.OnEndRetrieveTopHoldingsData);
            }
            if ((this.onRetrieveTopHoldingsDataCompletedDelegate == null)) {
                this.onRetrieveTopHoldingsDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveTopHoldingsDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveTopHoldingsDataDelegate, new object[] {
                        portfolioSelectionData,
                        effectiveDate}, this.onEndRetrieveTopHoldingsDataDelegate, this.onRetrieveTopHoldingsDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginRetrieveIndexConstituentsData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveIndexConstituentsData(portfolioSelectionData, effectiveDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.IndexConstituentsData> GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndRetrieveIndexConstituentsData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveIndexConstituentsData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveIndexConstituentsData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData)(inValues[0]));
            System.DateTime effectiveDate = ((System.DateTime)(inValues[1]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginRetrieveIndexConstituentsData(portfolioSelectionData, effectiveDate, callback, asyncState);
        }
        
        private object[] OnEndRetrieveIndexConstituentsData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.IndexConstituentsData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndRetrieveIndexConstituentsData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveIndexConstituentsDataCompleted(object state) {
            if ((this.RetrieveIndexConstituentsDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveIndexConstituentsDataCompleted(this, new RetrieveIndexConstituentsDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveIndexConstituentsDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate) {
            this.RetrieveIndexConstituentsDataAsync(portfolioSelectionData, effectiveDate, null);
        }
        
        public void RetrieveIndexConstituentsDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, object userState) {
            if ((this.onBeginRetrieveIndexConstituentsDataDelegate == null)) {
                this.onBeginRetrieveIndexConstituentsDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveIndexConstituentsData);
            }
            if ((this.onEndRetrieveIndexConstituentsDataDelegate == null)) {
                this.onEndRetrieveIndexConstituentsDataDelegate = new EndOperationDelegate(this.OnEndRetrieveIndexConstituentsData);
            }
            if ((this.onRetrieveIndexConstituentsDataCompletedDelegate == null)) {
                this.onRetrieveIndexConstituentsDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveIndexConstituentsDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveIndexConstituentsDataDelegate, new object[] {
                        portfolioSelectionData,
                        effectiveDate}, this.onEndRetrieveIndexConstituentsDataDelegate, this.onRetrieveIndexConstituentsDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginRetrieveFilterSelectionData(System.Nullable<System.DateTime> effectiveDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveFilterSelectionData(effectiveDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.FilterSelectionData> GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndRetrieveFilterSelectionData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveFilterSelectionData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveFilterSelectionData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Nullable<System.DateTime> effectiveDate = ((System.Nullable<System.DateTime>)(inValues[0]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginRetrieveFilterSelectionData(effectiveDate, callback, asyncState);
        }
        
        private object[] OnEndRetrieveFilterSelectionData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.FilterSelectionData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndRetrieveFilterSelectionData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveFilterSelectionDataCompleted(object state) {
            if ((this.RetrieveFilterSelectionDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveFilterSelectionDataCompleted(this, new RetrieveFilterSelectionDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveFilterSelectionDataAsync(System.Nullable<System.DateTime> effectiveDate) {
            this.RetrieveFilterSelectionDataAsync(effectiveDate, null);
        }
        
        public void RetrieveFilterSelectionDataAsync(System.Nullable<System.DateTime> effectiveDate, object userState) {
            if ((this.onBeginRetrieveFilterSelectionDataDelegate == null)) {
                this.onBeginRetrieveFilterSelectionDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveFilterSelectionData);
            }
            if ((this.onEndRetrieveFilterSelectionDataDelegate == null)) {
                this.onEndRetrieveFilterSelectionDataDelegate = new EndOperationDelegate(this.OnEndRetrieveFilterSelectionData);
            }
            if ((this.onRetrieveFilterSelectionDataCompletedDelegate == null)) {
                this.onRetrieveFilterSelectionDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveFilterSelectionDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveFilterSelectionDataDelegate, new object[] {
                        effectiveDate}, this.onEndRetrieveFilterSelectionDataDelegate, this.onRetrieveFilterSelectionDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginRetrievePortfolioDetailsData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData objPortfolioIdentifier, System.DateTime effectiveDate, bool objGetBenchmark, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrievePortfolioDetailsData(objPortfolioIdentifier, effectiveDate, objGetBenchmark, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioDetailsData> GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndRetrievePortfolioDetailsData(System.IAsyncResult result) {
            return base.Channel.EndRetrievePortfolioDetailsData(result);
        }
        
        private System.IAsyncResult OnBeginRetrievePortfolioDetailsData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData objPortfolioIdentifier = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData)(inValues[0]));
            System.DateTime effectiveDate = ((System.DateTime)(inValues[1]));
            bool objGetBenchmark = ((bool)(inValues[2]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginRetrievePortfolioDetailsData(objPortfolioIdentifier, effectiveDate, objGetBenchmark, callback, asyncState);
        }
        
        private object[] OnEndRetrievePortfolioDetailsData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioDetailsData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndRetrievePortfolioDetailsData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrievePortfolioDetailsDataCompleted(object state) {
            if ((this.RetrievePortfolioDetailsDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrievePortfolioDetailsDataCompleted(this, new RetrievePortfolioDetailsDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrievePortfolioDetailsDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData objPortfolioIdentifier, System.DateTime effectiveDate, bool objGetBenchmark) {
            this.RetrievePortfolioDetailsDataAsync(objPortfolioIdentifier, effectiveDate, objGetBenchmark, null);
        }
        
        public void RetrievePortfolioDetailsDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData objPortfolioIdentifier, System.DateTime effectiveDate, bool objGetBenchmark, object userState) {
            if ((this.onBeginRetrievePortfolioDetailsDataDelegate == null)) {
                this.onBeginRetrievePortfolioDetailsDataDelegate = new BeginOperationDelegate(this.OnBeginRetrievePortfolioDetailsData);
            }
            if ((this.onEndRetrievePortfolioDetailsDataDelegate == null)) {
                this.onEndRetrievePortfolioDetailsDataDelegate = new EndOperationDelegate(this.OnEndRetrievePortfolioDetailsData);
            }
            if ((this.onRetrievePortfolioDetailsDataCompletedDelegate == null)) {
                this.onRetrievePortfolioDetailsDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrievePortfolioDetailsDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrievePortfolioDetailsDataDelegate, new object[] {
                        objPortfolioIdentifier,
                        effectiveDate,
                        objGetBenchmark}, this.onEndRetrievePortfolioDetailsDataDelegate, this.onRetrievePortfolioDetailsDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginRetrieveBenchmarkChartReturnData(System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData> objBenchmarkIdentifier, System.DateTime objEffectiveDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveBenchmarkChartReturnData(objBenchmarkIdentifier, objEffectiveDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkChartReturnData> GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndRetrieveBenchmarkChartReturnData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveBenchmarkChartReturnData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveBenchmarkChartReturnData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData> objBenchmarkIdentifier = ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData>)(inValues[0]));
            System.DateTime objEffectiveDate = ((System.DateTime)(inValues[1]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginRetrieveBenchmarkChartReturnData(objBenchmarkIdentifier, objEffectiveDate, callback, asyncState);
        }
        
        private object[] OnEndRetrieveBenchmarkChartReturnData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkChartReturnData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndRetrieveBenchmarkChartReturnData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveBenchmarkChartReturnDataCompleted(object state) {
            if ((this.RetrieveBenchmarkChartReturnDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveBenchmarkChartReturnDataCompleted(this, new RetrieveBenchmarkChartReturnDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveBenchmarkChartReturnDataAsync(System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData> objBenchmarkIdentifier, System.DateTime objEffectiveDate) {
            this.RetrieveBenchmarkChartReturnDataAsync(objBenchmarkIdentifier, objEffectiveDate, null);
        }
        
        public void RetrieveBenchmarkChartReturnDataAsync(System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData> objBenchmarkIdentifier, System.DateTime objEffectiveDate, object userState) {
            if ((this.onBeginRetrieveBenchmarkChartReturnDataDelegate == null)) {
                this.onBeginRetrieveBenchmarkChartReturnDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveBenchmarkChartReturnData);
            }
            if ((this.onEndRetrieveBenchmarkChartReturnDataDelegate == null)) {
                this.onEndRetrieveBenchmarkChartReturnDataDelegate = new EndOperationDelegate(this.OnEndRetrieveBenchmarkChartReturnData);
            }
            if ((this.onRetrieveBenchmarkChartReturnDataCompletedDelegate == null)) {
                this.onRetrieveBenchmarkChartReturnDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveBenchmarkChartReturnDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveBenchmarkChartReturnDataDelegate, new object[] {
                        objBenchmarkIdentifier,
                        objEffectiveDate}, this.onEndRetrieveBenchmarkChartReturnDataDelegate, this.onRetrieveBenchmarkChartReturnDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginRetrieveBenchmarkGridReturnData(System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData> objBenchmarkIdentifier, System.DateTime objEffectiveDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveBenchmarkGridReturnData(objBenchmarkIdentifier, objEffectiveDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkGridReturnData> GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndRetrieveBenchmarkGridReturnData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveBenchmarkGridReturnData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveBenchmarkGridReturnData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData> objBenchmarkIdentifier = ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData>)(inValues[0]));
            System.DateTime objEffectiveDate = ((System.DateTime)(inValues[1]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginRetrieveBenchmarkGridReturnData(objBenchmarkIdentifier, objEffectiveDate, callback, asyncState);
        }
        
        private object[] OnEndRetrieveBenchmarkGridReturnData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkGridReturnData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndRetrieveBenchmarkGridReturnData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveBenchmarkGridReturnDataCompleted(object state) {
            if ((this.RetrieveBenchmarkGridReturnDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveBenchmarkGridReturnDataCompleted(this, new RetrieveBenchmarkGridReturnDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveBenchmarkGridReturnDataAsync(System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData> objBenchmarkIdentifier, System.DateTime objEffectiveDate) {
            this.RetrieveBenchmarkGridReturnDataAsync(objBenchmarkIdentifier, objEffectiveDate, null);
        }
        
        public void RetrieveBenchmarkGridReturnDataAsync(System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData> objBenchmarkIdentifier, System.DateTime objEffectiveDate, object userState) {
            if ((this.onBeginRetrieveBenchmarkGridReturnDataDelegate == null)) {
                this.onBeginRetrieveBenchmarkGridReturnDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveBenchmarkGridReturnData);
            }
            if ((this.onEndRetrieveBenchmarkGridReturnDataDelegate == null)) {
                this.onEndRetrieveBenchmarkGridReturnDataDelegate = new EndOperationDelegate(this.OnEndRetrieveBenchmarkGridReturnData);
            }
            if ((this.onRetrieveBenchmarkGridReturnDataCompletedDelegate == null)) {
                this.onRetrieveBenchmarkGridReturnDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveBenchmarkGridReturnDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveBenchmarkGridReturnDataDelegate, new object[] {
                        objBenchmarkIdentifier,
                        objEffectiveDate}, this.onEndRetrieveBenchmarkGridReturnDataDelegate, this.onRetrieveBenchmarkGridReturnDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginRetrieveAssetAllocationData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveAssetAllocationData(portfolioSelectionData, effectiveDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.AssetAllocationData> GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndRetrieveAssetAllocationData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveAssetAllocationData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveAssetAllocationData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData)(inValues[0]));
            System.DateTime effectiveDate = ((System.DateTime)(inValues[1]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginRetrieveAssetAllocationData(portfolioSelectionData, effectiveDate, callback, asyncState);
        }
        
        private object[] OnEndRetrieveAssetAllocationData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.AssetAllocationData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndRetrieveAssetAllocationData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveAssetAllocationDataCompleted(object state) {
            if ((this.RetrieveAssetAllocationDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveAssetAllocationDataCompleted(this, new RetrieveAssetAllocationDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveAssetAllocationDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate) {
            this.RetrieveAssetAllocationDataAsync(portfolioSelectionData, effectiveDate, null);
        }
        
        public void RetrieveAssetAllocationDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, object userState) {
            if ((this.onBeginRetrieveAssetAllocationDataDelegate == null)) {
                this.onBeginRetrieveAssetAllocationDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveAssetAllocationData);
            }
            if ((this.onEndRetrieveAssetAllocationDataDelegate == null)) {
                this.onEndRetrieveAssetAllocationDataDelegate = new EndOperationDelegate(this.OnEndRetrieveAssetAllocationData);
            }
            if ((this.onRetrieveAssetAllocationDataCompletedDelegate == null)) {
                this.onRetrieveAssetAllocationDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveAssetAllocationDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveAssetAllocationDataDelegate, new object[] {
                        portfolioSelectionData,
                        effectiveDate}, this.onEndRetrieveAssetAllocationDataDelegate, this.onRetrieveAssetAllocationDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginRetrieveHoldingsPercentageData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string filterType, string filterValue, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveHoldingsPercentageData(portfolioSelectionData, effectiveDate, filterType, filterValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.HoldingsPercentageData> GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndRetrieveHoldingsPercentageData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveHoldingsPercentageData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveHoldingsPercentageData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData)(inValues[0]));
            System.DateTime effectiveDate = ((System.DateTime)(inValues[1]));
            string filterType = ((string)(inValues[2]));
            string filterValue = ((string)(inValues[3]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginRetrieveHoldingsPercentageData(portfolioSelectionData, effectiveDate, filterType, filterValue, callback, asyncState);
        }
        
        private object[] OnEndRetrieveHoldingsPercentageData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.HoldingsPercentageData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndRetrieveHoldingsPercentageData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveHoldingsPercentageDataCompleted(object state) {
            if ((this.RetrieveHoldingsPercentageDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveHoldingsPercentageDataCompleted(this, new RetrieveHoldingsPercentageDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveHoldingsPercentageDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string filterType, string filterValue) {
            this.RetrieveHoldingsPercentageDataAsync(portfolioSelectionData, effectiveDate, filterType, filterValue, null);
        }
        
        public void RetrieveHoldingsPercentageDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string filterType, string filterValue, object userState) {
            if ((this.onBeginRetrieveHoldingsPercentageDataDelegate == null)) {
                this.onBeginRetrieveHoldingsPercentageDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveHoldingsPercentageData);
            }
            if ((this.onEndRetrieveHoldingsPercentageDataDelegate == null)) {
                this.onEndRetrieveHoldingsPercentageDataDelegate = new EndOperationDelegate(this.OnEndRetrieveHoldingsPercentageData);
            }
            if ((this.onRetrieveHoldingsPercentageDataCompletedDelegate == null)) {
                this.onRetrieveHoldingsPercentageDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveHoldingsPercentageDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveHoldingsPercentageDataDelegate, new object[] {
                        portfolioSelectionData,
                        effectiveDate,
                        filterType,
                        filterValue}, this.onEndRetrieveHoldingsPercentageDataDelegate, this.onRetrieveHoldingsPercentageDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginRetrieveHoldingsPercentageDataForRegion(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string filterType, string filterValue, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveHoldingsPercentageDataForRegion(portfolioSelectionData, effectiveDate, filterType, filterValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.HoldingsPercentageData> GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndRetrieveHoldingsPercentageDataForRegion(System.IAsyncResult result) {
            return base.Channel.EndRetrieveHoldingsPercentageDataForRegion(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveHoldingsPercentageDataForRegion(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData)(inValues[0]));
            System.DateTime effectiveDate = ((System.DateTime)(inValues[1]));
            string filterType = ((string)(inValues[2]));
            string filterValue = ((string)(inValues[3]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginRetrieveHoldingsPercentageDataForRegion(portfolioSelectionData, effectiveDate, filterType, filterValue, callback, asyncState);
        }
        
        private object[] OnEndRetrieveHoldingsPercentageDataForRegion(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.HoldingsPercentageData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndRetrieveHoldingsPercentageDataForRegion(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveHoldingsPercentageDataForRegionCompleted(object state) {
            if ((this.RetrieveHoldingsPercentageDataForRegionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveHoldingsPercentageDataForRegionCompleted(this, new RetrieveHoldingsPercentageDataForRegionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveHoldingsPercentageDataForRegionAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string filterType, string filterValue) {
            this.RetrieveHoldingsPercentageDataForRegionAsync(portfolioSelectionData, effectiveDate, filterType, filterValue, null);
        }
        
        public void RetrieveHoldingsPercentageDataForRegionAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string filterType, string filterValue, object userState) {
            if ((this.onBeginRetrieveHoldingsPercentageDataForRegionDelegate == null)) {
                this.onBeginRetrieveHoldingsPercentageDataForRegionDelegate = new BeginOperationDelegate(this.OnBeginRetrieveHoldingsPercentageDataForRegion);
            }
            if ((this.onEndRetrieveHoldingsPercentageDataForRegionDelegate == null)) {
                this.onEndRetrieveHoldingsPercentageDataForRegionDelegate = new EndOperationDelegate(this.OnEndRetrieveHoldingsPercentageDataForRegion);
            }
            if ((this.onRetrieveHoldingsPercentageDataForRegionCompletedDelegate == null)) {
                this.onRetrieveHoldingsPercentageDataForRegionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveHoldingsPercentageDataForRegionCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveHoldingsPercentageDataForRegionDelegate, new object[] {
                        portfolioSelectionData,
                        effectiveDate,
                        filterType,
                        filterValue}, this.onEndRetrieveHoldingsPercentageDataForRegionDelegate, this.onRetrieveHoldingsPercentageDataForRegionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginRetrieveTopBenchmarkSecuritiesData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveTopBenchmarkSecuritiesData(portfolioSelectionData, effectiveDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.TopBenchmarkSecuritiesData> GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndRetrieveTopBenchmarkSecuritiesData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveTopBenchmarkSecuritiesData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveTopBenchmarkSecuritiesData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData)(inValues[0]));
            System.DateTime effectiveDate = ((System.DateTime)(inValues[1]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginRetrieveTopBenchmarkSecuritiesData(portfolioSelectionData, effectiveDate, callback, asyncState);
        }
        
        private object[] OnEndRetrieveTopBenchmarkSecuritiesData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.TopBenchmarkSecuritiesData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndRetrieveTopBenchmarkSecuritiesData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveTopBenchmarkSecuritiesDataCompleted(object state) {
            if ((this.RetrieveTopBenchmarkSecuritiesDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveTopBenchmarkSecuritiesDataCompleted(this, new RetrieveTopBenchmarkSecuritiesDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveTopBenchmarkSecuritiesDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate) {
            this.RetrieveTopBenchmarkSecuritiesDataAsync(portfolioSelectionData, effectiveDate, null);
        }
        
        public void RetrieveTopBenchmarkSecuritiesDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, object userState) {
            if ((this.onBeginRetrieveTopBenchmarkSecuritiesDataDelegate == null)) {
                this.onBeginRetrieveTopBenchmarkSecuritiesDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveTopBenchmarkSecuritiesData);
            }
            if ((this.onEndRetrieveTopBenchmarkSecuritiesDataDelegate == null)) {
                this.onEndRetrieveTopBenchmarkSecuritiesDataDelegate = new EndOperationDelegate(this.OnEndRetrieveTopBenchmarkSecuritiesData);
            }
            if ((this.onRetrieveTopBenchmarkSecuritiesDataCompletedDelegate == null)) {
                this.onRetrieveTopBenchmarkSecuritiesDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveTopBenchmarkSecuritiesDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveTopBenchmarkSecuritiesDataDelegate, new object[] {
                        portfolioSelectionData,
                        effectiveDate}, this.onEndRetrieveTopBenchmarkSecuritiesDataDelegate, this.onRetrieveTopBenchmarkSecuritiesDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginRetrieveMarketCapitalizationData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string filterType, string filterValue, bool isExCashSecurity, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveMarketCapitalizationData(portfolioSelectionData, effectiveDate, filterType, filterValue, isExCashSecurity, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketCapitalizationData> GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndRetrieveMarketCapitalizationData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveMarketCapitalizationData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveMarketCapitalizationData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData)(inValues[0]));
            System.DateTime effectiveDate = ((System.DateTime)(inValues[1]));
            string filterType = ((string)(inValues[2]));
            string filterValue = ((string)(inValues[3]));
            bool isExCashSecurity = ((bool)(inValues[4]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginRetrieveMarketCapitalizationData(portfolioSelectionData, effectiveDate, filterType, filterValue, isExCashSecurity, callback, asyncState);
        }
        
        private object[] OnEndRetrieveMarketCapitalizationData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketCapitalizationData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndRetrieveMarketCapitalizationData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveMarketCapitalizationDataCompleted(object state) {
            if ((this.RetrieveMarketCapitalizationDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveMarketCapitalizationDataCompleted(this, new RetrieveMarketCapitalizationDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveMarketCapitalizationDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string filterType, string filterValue, bool isExCashSecurity) {
            this.RetrieveMarketCapitalizationDataAsync(portfolioSelectionData, effectiveDate, filterType, filterValue, isExCashSecurity, null);
        }
        
        public void RetrieveMarketCapitalizationDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string filterType, string filterValue, bool isExCashSecurity, object userState) {
            if ((this.onBeginRetrieveMarketCapitalizationDataDelegate == null)) {
                this.onBeginRetrieveMarketCapitalizationDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveMarketCapitalizationData);
            }
            if ((this.onEndRetrieveMarketCapitalizationDataDelegate == null)) {
                this.onEndRetrieveMarketCapitalizationDataDelegate = new EndOperationDelegate(this.OnEndRetrieveMarketCapitalizationData);
            }
            if ((this.onRetrieveMarketCapitalizationDataCompletedDelegate == null)) {
                this.onRetrieveMarketCapitalizationDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveMarketCapitalizationDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveMarketCapitalizationDataDelegate, new object[] {
                        portfolioSelectionData,
                        effectiveDate,
                        filterType,
                        filterValue,
                        isExCashSecurity}, this.onEndRetrieveMarketCapitalizationDataDelegate, this.onRetrieveMarketCapitalizationDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginRetrievePortfolioRiskReturnData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrievePortfolioRiskReturnData(fundSelectionData, benchmarkSelectionData, effectiveDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioRiskReturnData> GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndRetrievePortfolioRiskReturnData(System.IAsyncResult result) {
            return base.Channel.EndRetrievePortfolioRiskReturnData(result);
        }
        
        private System.IAsyncResult OnBeginRetrievePortfolioRiskReturnData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData)(inValues[0]));
            GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData)(inValues[1]));
            System.DateTime effectiveDate = ((System.DateTime)(inValues[2]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginRetrievePortfolioRiskReturnData(fundSelectionData, benchmarkSelectionData, effectiveDate, callback, asyncState);
        }
        
        private object[] OnEndRetrievePortfolioRiskReturnData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioRiskReturnData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndRetrievePortfolioRiskReturnData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrievePortfolioRiskReturnDataCompleted(object state) {
            if ((this.RetrievePortfolioRiskReturnDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrievePortfolioRiskReturnDataCompleted(this, new RetrievePortfolioRiskReturnDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrievePortfolioRiskReturnDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate) {
            this.RetrievePortfolioRiskReturnDataAsync(fundSelectionData, benchmarkSelectionData, effectiveDate, null);
        }
        
        public void RetrievePortfolioRiskReturnDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate, object userState) {
            if ((this.onBeginRetrievePortfolioRiskReturnDataDelegate == null)) {
                this.onBeginRetrievePortfolioRiskReturnDataDelegate = new BeginOperationDelegate(this.OnBeginRetrievePortfolioRiskReturnData);
            }
            if ((this.onEndRetrievePortfolioRiskReturnDataDelegate == null)) {
                this.onEndRetrievePortfolioRiskReturnDataDelegate = new EndOperationDelegate(this.OnEndRetrievePortfolioRiskReturnData);
            }
            if ((this.onRetrievePortfolioRiskReturnDataCompletedDelegate == null)) {
                this.onRetrievePortfolioRiskReturnDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrievePortfolioRiskReturnDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrievePortfolioRiskReturnDataDelegate, new object[] {
                        fundSelectionData,
                        benchmarkSelectionData,
                        effectiveDate}, this.onEndRetrievePortfolioRiskReturnDataDelegate, this.onRetrievePortfolioRiskReturnDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginRetrieveHeatMapData(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveHeatMapData(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.HeatMapData> GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndRetrieveHeatMapData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveHeatMapData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveHeatMapData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginRetrieveHeatMapData(callback, asyncState);
        }
        
        private object[] OnEndRetrieveHeatMapData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.HeatMapData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndRetrieveHeatMapData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveHeatMapDataCompleted(object state) {
            if ((this.RetrieveHeatMapDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveHeatMapDataCompleted(this, new RetrieveHeatMapDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveHeatMapDataAsync() {
            this.RetrieveHeatMapDataAsync(null);
        }
        
        public void RetrieveHeatMapDataAsync(object userState) {
            if ((this.onBeginRetrieveHeatMapDataDelegate == null)) {
                this.onBeginRetrieveHeatMapDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveHeatMapData);
            }
            if ((this.onEndRetrieveHeatMapDataDelegate == null)) {
                this.onEndRetrieveHeatMapDataDelegate = new EndOperationDelegate(this.OnEndRetrieveHeatMapData);
            }
            if ((this.onRetrieveHeatMapDataCompletedDelegate == null)) {
                this.onRetrieveHeatMapDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveHeatMapDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveHeatMapDataDelegate, null, this.onEndRetrieveHeatMapDataDelegate, this.onRetrieveHeatMapDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginRetrieveRelativePerformanceSectorData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveRelativePerformanceSectorData(fundSelectionData, effectiveDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceSectorData> GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndRetrieveRelativePerformanceSectorData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveRelativePerformanceSectorData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveRelativePerformanceSectorData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData)(inValues[0]));
            System.DateTime effectiveDate = ((System.DateTime)(inValues[1]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginRetrieveRelativePerformanceSectorData(fundSelectionData, effectiveDate, callback, asyncState);
        }
        
        private object[] OnEndRetrieveRelativePerformanceSectorData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceSectorData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndRetrieveRelativePerformanceSectorData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveRelativePerformanceSectorDataCompleted(object state) {
            if ((this.RetrieveRelativePerformanceSectorDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveRelativePerformanceSectorDataCompleted(this, new RetrieveRelativePerformanceSectorDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveRelativePerformanceSectorDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, System.DateTime effectiveDate) {
            this.RetrieveRelativePerformanceSectorDataAsync(fundSelectionData, effectiveDate, null);
        }
        
        public void RetrieveRelativePerformanceSectorDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, System.DateTime effectiveDate, object userState) {
            if ((this.onBeginRetrieveRelativePerformanceSectorDataDelegate == null)) {
                this.onBeginRetrieveRelativePerformanceSectorDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveRelativePerformanceSectorData);
            }
            if ((this.onEndRetrieveRelativePerformanceSectorDataDelegate == null)) {
                this.onEndRetrieveRelativePerformanceSectorDataDelegate = new EndOperationDelegate(this.OnEndRetrieveRelativePerformanceSectorData);
            }
            if ((this.onRetrieveRelativePerformanceSectorDataCompletedDelegate == null)) {
                this.onRetrieveRelativePerformanceSectorDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveRelativePerformanceSectorDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveRelativePerformanceSectorDataDelegate, new object[] {
                        fundSelectionData,
                        effectiveDate}, this.onEndRetrieveRelativePerformanceSectorDataDelegate, this.onRetrieveRelativePerformanceSectorDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginRetrieveRelativePerformanceCountryActivePositionData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate, string countryID, System.Nullable<int> sectorID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveRelativePerformanceCountryActivePositionData(fundSelectionData, benchmarkSelectionData, effectiveDate, countryID, sectorID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceActivePositionData> GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndRetrieveRelativePerformanceCountryActivePositionData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveRelativePerformanceCountryActivePositionData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveRelativePerformanceCountryActivePositionData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData)(inValues[0]));
            GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData)(inValues[1]));
            System.DateTime effectiveDate = ((System.DateTime)(inValues[2]));
            string countryID = ((string)(inValues[3]));
            System.Nullable<int> sectorID = ((System.Nullable<int>)(inValues[4]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginRetrieveRelativePerformanceCountryActivePositionData(fundSelectionData, benchmarkSelectionData, effectiveDate, countryID, sectorID, callback, asyncState);
        }
        
        private object[] OnEndRetrieveRelativePerformanceCountryActivePositionData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceActivePositionData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndRetrieveRelativePerformanceCountryActivePositionData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveRelativePerformanceCountryActivePositionDataCompleted(object state) {
            if ((this.RetrieveRelativePerformanceCountryActivePositionDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveRelativePerformanceCountryActivePositionDataCompleted(this, new RetrieveRelativePerformanceCountryActivePositionDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveRelativePerformanceCountryActivePositionDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate, string countryID, System.Nullable<int> sectorID) {
            this.RetrieveRelativePerformanceCountryActivePositionDataAsync(fundSelectionData, benchmarkSelectionData, effectiveDate, countryID, sectorID, null);
        }
        
        public void RetrieveRelativePerformanceCountryActivePositionDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate, string countryID, System.Nullable<int> sectorID, object userState) {
            if ((this.onBeginRetrieveRelativePerformanceCountryActivePositionDataDelegate == null)) {
                this.onBeginRetrieveRelativePerformanceCountryActivePositionDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveRelativePerformanceCountryActivePositionData);
            }
            if ((this.onEndRetrieveRelativePerformanceCountryActivePositionDataDelegate == null)) {
                this.onEndRetrieveRelativePerformanceCountryActivePositionDataDelegate = new EndOperationDelegate(this.OnEndRetrieveRelativePerformanceCountryActivePositionData);
            }
            if ((this.onRetrieveRelativePerformanceCountryActivePositionDataCompletedDelegate == null)) {
                this.onRetrieveRelativePerformanceCountryActivePositionDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveRelativePerformanceCountryActivePositionDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveRelativePerformanceCountryActivePositionDataDelegate, new object[] {
                        fundSelectionData,
                        benchmarkSelectionData,
                        effectiveDate,
                        countryID,
                        sectorID}, this.onEndRetrieveRelativePerformanceCountryActivePositionDataDelegate, this.onRetrieveRelativePerformanceCountryActivePositionDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginRetrieveRelativePerformanceSectorActivePositionData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate, string countryID, System.Nullable<int> sectorID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveRelativePerformanceSectorActivePositionData(fundSelectionData, benchmarkSelectionData, effectiveDate, countryID, sectorID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceActivePositionData> GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndRetrieveRelativePerformanceSectorActivePositionData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveRelativePerformanceSectorActivePositionData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveRelativePerformanceSectorActivePositionData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData)(inValues[0]));
            GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData)(inValues[1]));
            System.DateTime effectiveDate = ((System.DateTime)(inValues[2]));
            string countryID = ((string)(inValues[3]));
            System.Nullable<int> sectorID = ((System.Nullable<int>)(inValues[4]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginRetrieveRelativePerformanceSectorActivePositionData(fundSelectionData, benchmarkSelectionData, effectiveDate, countryID, sectorID, callback, asyncState);
        }
        
        private object[] OnEndRetrieveRelativePerformanceSectorActivePositionData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceActivePositionData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndRetrieveRelativePerformanceSectorActivePositionData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveRelativePerformanceSectorActivePositionDataCompleted(object state) {
            if ((this.RetrieveRelativePerformanceSectorActivePositionDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveRelativePerformanceSectorActivePositionDataCompleted(this, new RetrieveRelativePerformanceSectorActivePositionDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveRelativePerformanceSectorActivePositionDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate, string countryID, System.Nullable<int> sectorID) {
            this.RetrieveRelativePerformanceSectorActivePositionDataAsync(fundSelectionData, benchmarkSelectionData, effectiveDate, countryID, sectorID, null);
        }
        
        public void RetrieveRelativePerformanceSectorActivePositionDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate, string countryID, System.Nullable<int> sectorID, object userState) {
            if ((this.onBeginRetrieveRelativePerformanceSectorActivePositionDataDelegate == null)) {
                this.onBeginRetrieveRelativePerformanceSectorActivePositionDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveRelativePerformanceSectorActivePositionData);
            }
            if ((this.onEndRetrieveRelativePerformanceSectorActivePositionDataDelegate == null)) {
                this.onEndRetrieveRelativePerformanceSectorActivePositionDataDelegate = new EndOperationDelegate(this.OnEndRetrieveRelativePerformanceSectorActivePositionData);
            }
            if ((this.onRetrieveRelativePerformanceSectorActivePositionDataCompletedDelegate == null)) {
                this.onRetrieveRelativePerformanceSectorActivePositionDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveRelativePerformanceSectorActivePositionDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveRelativePerformanceSectorActivePositionDataDelegate, new object[] {
                        fundSelectionData,
                        benchmarkSelectionData,
                        effectiveDate,
                        countryID,
                        sectorID}, this.onEndRetrieveRelativePerformanceSectorActivePositionDataDelegate, this.onRetrieveRelativePerformanceSectorActivePositionDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginRetrieveRelativePerformanceSecurityActivePositionData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate, string countryID, System.Nullable<int> sectorID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveRelativePerformanceSecurityActivePositionData(fundSelectionData, benchmarkSelectionData, effectiveDate, countryID, sectorID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceActivePositionData> GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndRetrieveRelativePerformanceSecurityActivePositionData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveRelativePerformanceSecurityActivePositionData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveRelativePerformanceSecurityActivePositionData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData)(inValues[0]));
            GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData)(inValues[1]));
            System.DateTime effectiveDate = ((System.DateTime)(inValues[2]));
            string countryID = ((string)(inValues[3]));
            System.Nullable<int> sectorID = ((System.Nullable<int>)(inValues[4]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginRetrieveRelativePerformanceSecurityActivePositionData(fundSelectionData, benchmarkSelectionData, effectiveDate, countryID, sectorID, callback, asyncState);
        }
        
        private object[] OnEndRetrieveRelativePerformanceSecurityActivePositionData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceActivePositionData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndRetrieveRelativePerformanceSecurityActivePositionData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveRelativePerformanceSecurityActivePositionDataCompleted(object state) {
            if ((this.RetrieveRelativePerformanceSecurityActivePositionDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveRelativePerformanceSecurityActivePositionDataCompleted(this, new RetrieveRelativePerformanceSecurityActivePositionDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveRelativePerformanceSecurityActivePositionDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate, string countryID, System.Nullable<int> sectorID) {
            this.RetrieveRelativePerformanceSecurityActivePositionDataAsync(fundSelectionData, benchmarkSelectionData, effectiveDate, countryID, sectorID, null);
        }
        
        public void RetrieveRelativePerformanceSecurityActivePositionDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate, string countryID, System.Nullable<int> sectorID, object userState) {
            if ((this.onBeginRetrieveRelativePerformanceSecurityActivePositionDataDelegate == null)) {
                this.onBeginRetrieveRelativePerformanceSecurityActivePositionDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveRelativePerformanceSecurityActivePositionData);
            }
            if ((this.onEndRetrieveRelativePerformanceSecurityActivePositionDataDelegate == null)) {
                this.onEndRetrieveRelativePerformanceSecurityActivePositionDataDelegate = new EndOperationDelegate(this.OnEndRetrieveRelativePerformanceSecurityActivePositionData);
            }
            if ((this.onRetrieveRelativePerformanceSecurityActivePositionDataCompletedDelegate == null)) {
                this.onRetrieveRelativePerformanceSecurityActivePositionDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveRelativePerformanceSecurityActivePositionDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveRelativePerformanceSecurityActivePositionDataDelegate, new object[] {
                        fundSelectionData,
                        benchmarkSelectionData,
                        effectiveDate,
                        countryID,
                        sectorID}, this.onEndRetrieveRelativePerformanceSecurityActivePositionDataDelegate, this.onRetrieveRelativePerformanceSecurityActivePositionDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginRetrieveRelativePerformanceSecurityData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, System.DateTime effectiveDate, string countryID, System.Nullable<int> sectorID, int order, System.Nullable<int> maxRecords, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveRelativePerformanceSecurityData(fundSelectionData, effectiveDate, countryID, sectorID, order, maxRecords, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceSecurityData> GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndRetrieveRelativePerformanceSecurityData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveRelativePerformanceSecurityData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveRelativePerformanceSecurityData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData)(inValues[0]));
            System.DateTime effectiveDate = ((System.DateTime)(inValues[1]));
            string countryID = ((string)(inValues[2]));
            System.Nullable<int> sectorID = ((System.Nullable<int>)(inValues[3]));
            int order = ((int)(inValues[4]));
            System.Nullable<int> maxRecords = ((System.Nullable<int>)(inValues[5]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginRetrieveRelativePerformanceSecurityData(fundSelectionData, effectiveDate, countryID, sectorID, order, maxRecords, callback, asyncState);
        }
        
        private object[] OnEndRetrieveRelativePerformanceSecurityData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceSecurityData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndRetrieveRelativePerformanceSecurityData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveRelativePerformanceSecurityDataCompleted(object state) {
            if ((this.RetrieveRelativePerformanceSecurityDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveRelativePerformanceSecurityDataCompleted(this, new RetrieveRelativePerformanceSecurityDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveRelativePerformanceSecurityDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, System.DateTime effectiveDate, string countryID, System.Nullable<int> sectorID, int order, System.Nullable<int> maxRecords) {
            this.RetrieveRelativePerformanceSecurityDataAsync(fundSelectionData, effectiveDate, countryID, sectorID, order, maxRecords, null);
        }
        
        public void RetrieveRelativePerformanceSecurityDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, System.DateTime effectiveDate, string countryID, System.Nullable<int> sectorID, int order, System.Nullable<int> maxRecords, object userState) {
            if ((this.onBeginRetrieveRelativePerformanceSecurityDataDelegate == null)) {
                this.onBeginRetrieveRelativePerformanceSecurityDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveRelativePerformanceSecurityData);
            }
            if ((this.onEndRetrieveRelativePerformanceSecurityDataDelegate == null)) {
                this.onEndRetrieveRelativePerformanceSecurityDataDelegate = new EndOperationDelegate(this.OnEndRetrieveRelativePerformanceSecurityData);
            }
            if ((this.onRetrieveRelativePerformanceSecurityDataCompletedDelegate == null)) {
                this.onRetrieveRelativePerformanceSecurityDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveRelativePerformanceSecurityDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveRelativePerformanceSecurityDataDelegate, new object[] {
                        fundSelectionData,
                        effectiveDate,
                        countryID,
                        sectorID,
                        order,
                        maxRecords}, this.onEndRetrieveRelativePerformanceSecurityDataDelegate, this.onRetrieveRelativePerformanceSecurityDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginRetrieveRelativePerformanceData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveRelativePerformanceData(fundSelectionData, effectiveDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceData> GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndRetrieveRelativePerformanceData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveRelativePerformanceData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveRelativePerformanceData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData)(inValues[0]));
            System.DateTime effectiveDate = ((System.DateTime)(inValues[1]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginRetrieveRelativePerformanceData(fundSelectionData, effectiveDate, callback, asyncState);
        }
        
        private object[] OnEndRetrieveRelativePerformanceData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndRetrieveRelativePerformanceData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveRelativePerformanceDataCompleted(object state) {
            if ((this.RetrieveRelativePerformanceDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveRelativePerformanceDataCompleted(this, new RetrieveRelativePerformanceDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveRelativePerformanceDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, System.DateTime effectiveDate) {
            this.RetrieveRelativePerformanceDataAsync(fundSelectionData, effectiveDate, null);
        }
        
        public void RetrieveRelativePerformanceDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, System.DateTime effectiveDate, object userState) {
            if ((this.onBeginRetrieveRelativePerformanceDataDelegate == null)) {
                this.onBeginRetrieveRelativePerformanceDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveRelativePerformanceData);
            }
            if ((this.onEndRetrieveRelativePerformanceDataDelegate == null)) {
                this.onEndRetrieveRelativePerformanceDataDelegate = new EndOperationDelegate(this.OnEndRetrieveRelativePerformanceData);
            }
            if ((this.onRetrieveRelativePerformanceDataCompletedDelegate == null)) {
                this.onRetrieveRelativePerformanceDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveRelativePerformanceDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveRelativePerformanceDataDelegate, new object[] {
                        fundSelectionData,
                        effectiveDate}, this.onEndRetrieveRelativePerformanceDataDelegate, this.onRetrieveRelativePerformanceDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginRetrievePerformanceGraphData(string nameOfFund, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrievePerformanceGraphData(nameOfFund, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PerformanceGraphData> GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndRetrievePerformanceGraphData(System.IAsyncResult result) {
            return base.Channel.EndRetrievePerformanceGraphData(result);
        }
        
        private System.IAsyncResult OnBeginRetrievePerformanceGraphData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string nameOfFund = ((string)(inValues[0]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginRetrievePerformanceGraphData(nameOfFund, callback, asyncState);
        }
        
        private object[] OnEndRetrievePerformanceGraphData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PerformanceGraphData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndRetrievePerformanceGraphData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrievePerformanceGraphDataCompleted(object state) {
            if ((this.RetrievePerformanceGraphDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrievePerformanceGraphDataCompleted(this, new RetrievePerformanceGraphDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrievePerformanceGraphDataAsync(string nameOfFund) {
            this.RetrievePerformanceGraphDataAsync(nameOfFund, null);
        }
        
        public void RetrievePerformanceGraphDataAsync(string nameOfFund, object userState) {
            if ((this.onBeginRetrievePerformanceGraphDataDelegate == null)) {
                this.onBeginRetrievePerformanceGraphDataDelegate = new BeginOperationDelegate(this.OnBeginRetrievePerformanceGraphData);
            }
            if ((this.onEndRetrievePerformanceGraphDataDelegate == null)) {
                this.onEndRetrievePerformanceGraphDataDelegate = new EndOperationDelegate(this.OnEndRetrievePerformanceGraphData);
            }
            if ((this.onRetrievePerformanceGraphDataCompletedDelegate == null)) {
                this.onRetrievePerformanceGraphDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrievePerformanceGraphDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrievePerformanceGraphDataDelegate, new object[] {
                        nameOfFund}, this.onEndRetrievePerformanceGraphDataDelegate, this.onRetrievePerformanceGraphDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginRetrievePerformanceGridData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrievePerformanceGridData(portfolioSelectionData, effectiveDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PerformanceGridData> GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndRetrievePerformanceGridData(System.IAsyncResult result) {
            return base.Channel.EndRetrievePerformanceGridData(result);
        }
        
        private System.IAsyncResult OnBeginRetrievePerformanceGridData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData)(inValues[0]));
            System.DateTime effectiveDate = ((System.DateTime)(inValues[1]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginRetrievePerformanceGridData(portfolioSelectionData, effectiveDate, callback, asyncState);
        }
        
        private object[] OnEndRetrievePerformanceGridData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PerformanceGridData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndRetrievePerformanceGridData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrievePerformanceGridDataCompleted(object state) {
            if ((this.RetrievePerformanceGridDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrievePerformanceGridDataCompleted(this, new RetrievePerformanceGridDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrievePerformanceGridDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate) {
            this.RetrievePerformanceGridDataAsync(portfolioSelectionData, effectiveDate, null);
        }
        
        public void RetrievePerformanceGridDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, object userState) {
            if ((this.onBeginRetrievePerformanceGridDataDelegate == null)) {
                this.onBeginRetrievePerformanceGridDataDelegate = new BeginOperationDelegate(this.OnBeginRetrievePerformanceGridData);
            }
            if ((this.onEndRetrievePerformanceGridDataDelegate == null)) {
                this.onEndRetrievePerformanceGridDataDelegate = new EndOperationDelegate(this.OnEndRetrievePerformanceGridData);
            }
            if ((this.onRetrievePerformanceGridDataCompletedDelegate == null)) {
                this.onRetrievePerformanceGridDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrievePerformanceGridDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrievePerformanceGridDataDelegate, new object[] {
                        portfolioSelectionData,
                        effectiveDate}, this.onEndRetrievePerformanceGridDataDelegate, this.onRetrievePerformanceGridDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.BeginRetrieveAttributionData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveAttributionData(portfolioSelectionData, effectiveDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.AttributionData> GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations.EndRetrieveAttributionData(System.IAsyncResult result) {
            return base.Channel.EndRetrieveAttributionData(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveAttributionData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData)(inValues[0]));
            System.DateTime effectiveDate = ((System.DateTime)(inValues[1]));
            return ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).BeginRetrieveAttributionData(portfolioSelectionData, effectiveDate, callback, asyncState);
        }
        
        private object[] OnEndRetrieveAttributionData(System.IAsyncResult result) {
            System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.AttributionData> retVal = ((GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations)(this)).EndRetrieveAttributionData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveAttributionDataCompleted(object state) {
            if ((this.RetrieveAttributionDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveAttributionDataCompleted(this, new RetrieveAttributionDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveAttributionDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate) {
            this.RetrieveAttributionDataAsync(portfolioSelectionData, effectiveDate, null);
        }
        
        public void RetrieveAttributionDataAsync(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, object userState) {
            if ((this.onBeginRetrieveAttributionDataDelegate == null)) {
                this.onBeginRetrieveAttributionDataDelegate = new BeginOperationDelegate(this.OnBeginRetrieveAttributionData);
            }
            if ((this.onEndRetrieveAttributionDataDelegate == null)) {
                this.onEndRetrieveAttributionDataDelegate = new EndOperationDelegate(this.OnEndRetrieveAttributionData);
            }
            if ((this.onRetrieveAttributionDataCompletedDelegate == null)) {
                this.onRetrieveAttributionDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveAttributionDataCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveAttributionDataDelegate, new object[] {
                        portfolioSelectionData,
                        effectiveDate}, this.onEndRetrieveAttributionDataDelegate, this.onRetrieveAttributionDataCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations CreateChannel() {
            return new BenchmarkHoldingsPerformanceOperationsClientChannel(this);
        }
        
        private class BenchmarkHoldingsPerformanceOperationsClientChannel : ChannelBase<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations>, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations {
            
            public BenchmarkHoldingsPerformanceOperationsClientChannel(System.ServiceModel.ClientBase<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkHoldingsPerformanceOperations> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginTemp(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PeriodSelectionData data, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = data;
                System.IAsyncResult _result = base.BeginInvoke("Temp", _args, callback, asyncState);
                return _result;
            }
            
            public void EndTemp(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("Temp", _args, result);
            }
            
            public System.IAsyncResult BeginRetrievePortfolioSelectionData(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("RetrievePortfolioSelectionData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData> EndRetrievePortfolioSelectionData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData>)(base.EndInvoke("RetrievePortfolioSelectionData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveBenchmarkSelectionData(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("RetrieveBenchmarkSelectionData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData> EndRetrieveBenchmarkSelectionData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData>)(base.EndInvoke("RetrieveBenchmarkSelectionData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveSectorBreakdownData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = portfolioSelectionData;
                _args[1] = effectiveDate;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveSectorBreakdownData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.SectorBreakdownData> EndRetrieveSectorBreakdownData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.SectorBreakdownData> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.SectorBreakdownData>)(base.EndInvoke("RetrieveSectorBreakdownData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveRegionBreakdownData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = portfolioSelectionData;
                _args[1] = effectiveDate;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveRegionBreakdownData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RegionBreakdownData> EndRetrieveRegionBreakdownData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RegionBreakdownData> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RegionBreakdownData>)(base.EndInvoke("RetrieveRegionBreakdownData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveTopHoldingsData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = portfolioSelectionData;
                _args[1] = effectiveDate;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveTopHoldingsData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.TopHoldingsData> EndRetrieveTopHoldingsData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.TopHoldingsData> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.TopHoldingsData>)(base.EndInvoke("RetrieveTopHoldingsData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveIndexConstituentsData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = portfolioSelectionData;
                _args[1] = effectiveDate;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveIndexConstituentsData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.IndexConstituentsData> EndRetrieveIndexConstituentsData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.IndexConstituentsData> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.IndexConstituentsData>)(base.EndInvoke("RetrieveIndexConstituentsData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveFilterSelectionData(System.Nullable<System.DateTime> effectiveDate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = effectiveDate;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveFilterSelectionData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.FilterSelectionData> EndRetrieveFilterSelectionData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.FilterSelectionData> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.FilterSelectionData>)(base.EndInvoke("RetrieveFilterSelectionData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrievePortfolioDetailsData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData objPortfolioIdentifier, System.DateTime effectiveDate, bool objGetBenchmark, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = objPortfolioIdentifier;
                _args[1] = effectiveDate;
                _args[2] = objGetBenchmark;
                System.IAsyncResult _result = base.BeginInvoke("RetrievePortfolioDetailsData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioDetailsData> EndRetrievePortfolioDetailsData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioDetailsData> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioDetailsData>)(base.EndInvoke("RetrievePortfolioDetailsData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveBenchmarkChartReturnData(System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData> objBenchmarkIdentifier, System.DateTime objEffectiveDate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = objBenchmarkIdentifier;
                _args[1] = objEffectiveDate;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveBenchmarkChartReturnData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkChartReturnData> EndRetrieveBenchmarkChartReturnData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkChartReturnData> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkChartReturnData>)(base.EndInvoke("RetrieveBenchmarkChartReturnData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveBenchmarkGridReturnData(System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData> objBenchmarkIdentifier, System.DateTime objEffectiveDate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = objBenchmarkIdentifier;
                _args[1] = objEffectiveDate;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveBenchmarkGridReturnData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkGridReturnData> EndRetrieveBenchmarkGridReturnData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkGridReturnData> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkGridReturnData>)(base.EndInvoke("RetrieveBenchmarkGridReturnData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveAssetAllocationData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = portfolioSelectionData;
                _args[1] = effectiveDate;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveAssetAllocationData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.AssetAllocationData> EndRetrieveAssetAllocationData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.AssetAllocationData> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.AssetAllocationData>)(base.EndInvoke("RetrieveAssetAllocationData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveHoldingsPercentageData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string filterType, string filterValue, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = portfolioSelectionData;
                _args[1] = effectiveDate;
                _args[2] = filterType;
                _args[3] = filterValue;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveHoldingsPercentageData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.HoldingsPercentageData> EndRetrieveHoldingsPercentageData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.HoldingsPercentageData> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.HoldingsPercentageData>)(base.EndInvoke("RetrieveHoldingsPercentageData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveHoldingsPercentageDataForRegion(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string filterType, string filterValue, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = portfolioSelectionData;
                _args[1] = effectiveDate;
                _args[2] = filterType;
                _args[3] = filterValue;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveHoldingsPercentageDataForRegion", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.HoldingsPercentageData> EndRetrieveHoldingsPercentageDataForRegion(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.HoldingsPercentageData> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.HoldingsPercentageData>)(base.EndInvoke("RetrieveHoldingsPercentageDataForRegion", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveTopBenchmarkSecuritiesData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = portfolioSelectionData;
                _args[1] = effectiveDate;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveTopBenchmarkSecuritiesData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.TopBenchmarkSecuritiesData> EndRetrieveTopBenchmarkSecuritiesData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.TopBenchmarkSecuritiesData> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.TopBenchmarkSecuritiesData>)(base.EndInvoke("RetrieveTopBenchmarkSecuritiesData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveMarketCapitalizationData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, string filterType, string filterValue, bool isExCashSecurity, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = portfolioSelectionData;
                _args[1] = effectiveDate;
                _args[2] = filterType;
                _args[3] = filterValue;
                _args[4] = isExCashSecurity;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveMarketCapitalizationData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketCapitalizationData> EndRetrieveMarketCapitalizationData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketCapitalizationData> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.MarketCapitalizationData>)(base.EndInvoke("RetrieveMarketCapitalizationData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrievePortfolioRiskReturnData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = fundSelectionData;
                _args[1] = benchmarkSelectionData;
                _args[2] = effectiveDate;
                System.IAsyncResult _result = base.BeginInvoke("RetrievePortfolioRiskReturnData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioRiskReturnData> EndRetrievePortfolioRiskReturnData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioRiskReturnData> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioRiskReturnData>)(base.EndInvoke("RetrievePortfolioRiskReturnData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveHeatMapData(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("RetrieveHeatMapData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.HeatMapData> EndRetrieveHeatMapData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.HeatMapData> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.HeatMapData>)(base.EndInvoke("RetrieveHeatMapData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveRelativePerformanceSectorData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = fundSelectionData;
                _args[1] = effectiveDate;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveRelativePerformanceSectorData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceSectorData> EndRetrieveRelativePerformanceSectorData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceSectorData> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceSectorData>)(base.EndInvoke("RetrieveRelativePerformanceSectorData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveRelativePerformanceCountryActivePositionData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate, string countryID, System.Nullable<int> sectorID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = fundSelectionData;
                _args[1] = benchmarkSelectionData;
                _args[2] = effectiveDate;
                _args[3] = countryID;
                _args[4] = sectorID;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveRelativePerformanceCountryActivePositionData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceActivePositionData> EndRetrieveRelativePerformanceCountryActivePositionData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceActivePositionData> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceActivePositionData>)(base.EndInvoke("RetrieveRelativePerformanceCountryActivePositionData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveRelativePerformanceSectorActivePositionData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate, string countryID, System.Nullable<int> sectorID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = fundSelectionData;
                _args[1] = benchmarkSelectionData;
                _args[2] = effectiveDate;
                _args[3] = countryID;
                _args[4] = sectorID;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveRelativePerformanceSectorActivePositionData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceActivePositionData> EndRetrieveRelativePerformanceSectorActivePositionData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceActivePositionData> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceActivePositionData>)(base.EndInvoke("RetrieveRelativePerformanceSectorActivePositionData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveRelativePerformanceSecurityActivePositionData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.BenchmarkSelectionData benchmarkSelectionData, System.DateTime effectiveDate, string countryID, System.Nullable<int> sectorID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = fundSelectionData;
                _args[1] = benchmarkSelectionData;
                _args[2] = effectiveDate;
                _args[3] = countryID;
                _args[4] = sectorID;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveRelativePerformanceSecurityActivePositionData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceActivePositionData> EndRetrieveRelativePerformanceSecurityActivePositionData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceActivePositionData> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceActivePositionData>)(base.EndInvoke("RetrieveRelativePerformanceSecurityActivePositionData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveRelativePerformanceSecurityData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, System.DateTime effectiveDate, string countryID, System.Nullable<int> sectorID, int order, System.Nullable<int> maxRecords, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[6];
                _args[0] = fundSelectionData;
                _args[1] = effectiveDate;
                _args[2] = countryID;
                _args[3] = sectorID;
                _args[4] = order;
                _args[5] = maxRecords;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveRelativePerformanceSecurityData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceSecurityData> EndRetrieveRelativePerformanceSecurityData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceSecurityData> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceSecurityData>)(base.EndInvoke("RetrieveRelativePerformanceSecurityData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveRelativePerformanceData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData fundSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = fundSelectionData;
                _args[1] = effectiveDate;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveRelativePerformanceData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceData> EndRetrieveRelativePerformanceData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceData> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.RelativePerformanceData>)(base.EndInvoke("RetrieveRelativePerformanceData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrievePerformanceGraphData(string nameOfFund, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = nameOfFund;
                System.IAsyncResult _result = base.BeginInvoke("RetrievePerformanceGraphData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PerformanceGraphData> EndRetrievePerformanceGraphData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PerformanceGraphData> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PerformanceGraphData>)(base.EndInvoke("RetrievePerformanceGraphData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrievePerformanceGridData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = portfolioSelectionData;
                _args[1] = effectiveDate;
                System.IAsyncResult _result = base.BeginInvoke("RetrievePerformanceGridData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PerformanceGridData> EndRetrievePerformanceGridData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PerformanceGridData> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PerformanceGridData>)(base.EndInvoke("RetrievePerformanceGridData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveAttributionData(GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.PortfolioSelectionData portfolioSelectionData, System.DateTime effectiveDate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = portfolioSelectionData;
                _args[1] = effectiveDate;
                System.IAsyncResult _result = base.BeginInvoke("RetrieveAttributionData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.AttributionData> EndRetrieveAttributionData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.AttributionData> _result = ((System.Collections.Generic.List<GreenField.ServiceCaller.BenchmarkHoldingsPerformanceDefinitions.AttributionData>)(base.EndInvoke("RetrieveAttributionData", _args, result)));
                return _result;
            }
        }
    }
}
