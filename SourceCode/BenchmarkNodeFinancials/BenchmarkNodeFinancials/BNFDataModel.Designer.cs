//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]

namespace BenchmarkNodeFinancials
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class AIMSDataEntity : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new AIMSDataEntity object using the connection string found in the 'AIMSDataEntity' section of the application configuration file.
        /// </summary>
        public AIMSDataEntity() : base("name=AIMSDataEntity", "AIMSDataEntity")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new AIMSDataEntity object.
        /// </summary>
        public AIMSDataEntity(string connectionString) : base(connectionString, "AIMSDataEntity")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new AIMSDataEntity object.
        /// </summary>
        public AIMSDataEntity(EntityConnection connection) : base(connection, "AIMSDataEntity")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<BENCHMARK_NODE_FINANCIALS> BENCHMARK_NODE_FINANCIALS
        {
            get
            {
                if ((_BENCHMARK_NODE_FINANCIALS == null))
                {
                    _BENCHMARK_NODE_FINANCIALS = base.CreateObjectSet<BENCHMARK_NODE_FINANCIALS>("BENCHMARK_NODE_FINANCIALS");
                }
                return _BENCHMARK_NODE_FINANCIALS;
            }
        }
        private ObjectSet<BENCHMARK_NODE_FINANCIALS> _BENCHMARK_NODE_FINANCIALS;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<PERIOD_FINANCIALS> PERIOD_FINANCIALS
        {
            get
            {
                if ((_PERIOD_FINANCIALS == null))
                {
                    _PERIOD_FINANCIALS = base.CreateObjectSet<PERIOD_FINANCIALS>("PERIOD_FINANCIALS");
                }
                return _PERIOD_FINANCIALS;
            }
        }
        private ObjectSet<PERIOD_FINANCIALS> _PERIOD_FINANCIALS;

        #endregion
        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the BENCHMARK_NODE_FINANCIALS EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToBENCHMARK_NODE_FINANCIALS(BENCHMARK_NODE_FINANCIALS bENCHMARK_NODE_FINANCIALS)
        {
            base.AddObject("BENCHMARK_NODE_FINANCIALS", bENCHMARK_NODE_FINANCIALS);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the PERIOD_FINANCIALS EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPERIOD_FINANCIALS(PERIOD_FINANCIALS pERIOD_FINANCIALS)
        {
            base.AddObject("PERIOD_FINANCIALS", pERIOD_FINANCIALS);
        }

        #endregion
        #region Function Imports
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="issuerIds">No Metadata Documentation available.</param>
        /// <param name="securityIds">No Metadata Documentation available.</param>
        public ObjectResult<PeriodFinancialForwardRatios> usp_GetDataForBenchmarkNodefinancials(global::System.String issuerIds, global::System.String securityIds)
        {
            ObjectParameter issuerIdsParameter;
            if (issuerIds != null)
            {
                issuerIdsParameter = new ObjectParameter("issuerIds", issuerIds);
            }
            else
            {
                issuerIdsParameter = new ObjectParameter("issuerIds", typeof(global::System.String));
            }
    
            ObjectParameter securityIdsParameter;
            if (securityIds != null)
            {
                securityIdsParameter = new ObjectParameter("securityIds", securityIds);
            }
            else
            {
                securityIdsParameter = new ObjectParameter("securityIds", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<PeriodFinancialForwardRatios>("usp_GetDataForBenchmarkNodefinancials", issuerIdsParameter, securityIdsParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="issuerIds">No Metadata Documentation available.</param>
        /// <param name="securityIds">No Metadata Documentation available.</param>
        public ObjectResult<PeriodFinancialPeriodRatios> usp_GetDataForBenchNodefinPeriodYear(global::System.String issuerIds, global::System.String securityIds)
        {
            ObjectParameter issuerIdsParameter;
            if (issuerIds != null)
            {
                issuerIdsParameter = new ObjectParameter("issuerIds", issuerIds);
            }
            else
            {
                issuerIdsParameter = new ObjectParameter("issuerIds", typeof(global::System.String));
            }
    
            ObjectParameter securityIdsParameter;
            if (securityIds != null)
            {
                securityIdsParameter = new ObjectParameter("securityIds", securityIds);
            }
            else
            {
                securityIdsParameter = new ObjectParameter("securityIds", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<PeriodFinancialPeriodRatios>("usp_GetDataForBenchNodefinPeriodYear", issuerIdsParameter, securityIdsParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="xmlScript">No Metadata Documentation available.</param>
        public int InsertIntoBenchmarkNodeFinancials(global::System.String xmlScript)
        {
            ObjectParameter xmlScriptParameter;
            if (xmlScript != null)
            {
                xmlScriptParameter = new ObjectParameter("xmlScript", xmlScript);
            }
            else
            {
                xmlScriptParameter = new ObjectParameter("xmlScript", typeof(global::System.String));
            }
    
            return base.ExecuteFunction("InsertIntoBenchmarkNodeFinancials", xmlScriptParameter);
        }

        #endregion
    }
    

    #endregion
    
    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="AIMSDataModel", Name="BENCHMARK_NODE_FINANCIALS")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class BENCHMARK_NODE_FINANCIALS : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new BENCHMARK_NODE_FINANCIALS object.
        /// </summary>
        /// <param name="bENCHMARK_ID">Initial value of the BENCHMARK_ID property.</param>
        /// <param name="dATA_ID">Initial value of the DATA_ID property.</param>
        /// <param name="pERIOD_TYPE">Initial value of the PERIOD_TYPE property.</param>
        /// <param name="pERIOD_YEAR">Initial value of the PERIOD_YEAR property.</param>
        /// <param name="cURRENCY">Initial value of the CURRENCY property.</param>
        /// <param name="aMOUNT">Initial value of the AMOUNT property.</param>
        /// <param name="uPDATE_DATE">Initial value of the UPDATE_DATE property.</param>
        public static BENCHMARK_NODE_FINANCIALS CreateBENCHMARK_NODE_FINANCIALS(global::System.String bENCHMARK_ID, global::System.Int32 dATA_ID, global::System.String pERIOD_TYPE, global::System.Int32 pERIOD_YEAR, global::System.String cURRENCY, global::System.Decimal aMOUNT, global::System.DateTime uPDATE_DATE)
        {
            BENCHMARK_NODE_FINANCIALS bENCHMARK_NODE_FINANCIALS = new BENCHMARK_NODE_FINANCIALS();
            bENCHMARK_NODE_FINANCIALS.BENCHMARK_ID = bENCHMARK_ID;
            bENCHMARK_NODE_FINANCIALS.DATA_ID = dATA_ID;
            bENCHMARK_NODE_FINANCIALS.PERIOD_TYPE = pERIOD_TYPE;
            bENCHMARK_NODE_FINANCIALS.PERIOD_YEAR = pERIOD_YEAR;
            bENCHMARK_NODE_FINANCIALS.CURRENCY = cURRENCY;
            bENCHMARK_NODE_FINANCIALS.AMOUNT = aMOUNT;
            bENCHMARK_NODE_FINANCIALS.UPDATE_DATE = uPDATE_DATE;
            return bENCHMARK_NODE_FINANCIALS;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String BENCHMARK_ID
        {
            get
            {
                return _BENCHMARK_ID;
            }
            set
            {
                if (_BENCHMARK_ID != value)
                {
                    OnBENCHMARK_IDChanging(value);
                    ReportPropertyChanging("BENCHMARK_ID");
                    _BENCHMARK_ID = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("BENCHMARK_ID");
                    OnBENCHMARK_IDChanged();
                }
            }
        }
        private global::System.String _BENCHMARK_ID;
        partial void OnBENCHMARK_IDChanging(global::System.String value);
        partial void OnBENCHMARK_IDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String NODE_NAME1
        {
            get
            {
                return _NODE_NAME1;
            }
            set
            {
                OnNODE_NAME1Changing(value);
                ReportPropertyChanging("NODE_NAME1");
                _NODE_NAME1 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("NODE_NAME1");
                OnNODE_NAME1Changed();
            }
        }
        private global::System.String _NODE_NAME1;
        partial void OnNODE_NAME1Changing(global::System.String value);
        partial void OnNODE_NAME1Changed();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String NODE_ID1
        {
            get
            {
                return _NODE_ID1;
            }
            set
            {
                OnNODE_ID1Changing(value);
                ReportPropertyChanging("NODE_ID1");
                _NODE_ID1 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("NODE_ID1");
                OnNODE_ID1Changed();
            }
        }
        private global::System.String _NODE_ID1;
        partial void OnNODE_ID1Changing(global::System.String value);
        partial void OnNODE_ID1Changed();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String NODE_NAME2
        {
            get
            {
                return _NODE_NAME2;
            }
            set
            {
                OnNODE_NAME2Changing(value);
                ReportPropertyChanging("NODE_NAME2");
                _NODE_NAME2 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("NODE_NAME2");
                OnNODE_NAME2Changed();
            }
        }
        private global::System.String _NODE_NAME2;
        partial void OnNODE_NAME2Changing(global::System.String value);
        partial void OnNODE_NAME2Changed();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String NODE_ID2
        {
            get
            {
                return _NODE_ID2;
            }
            set
            {
                OnNODE_ID2Changing(value);
                ReportPropertyChanging("NODE_ID2");
                _NODE_ID2 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("NODE_ID2");
                OnNODE_ID2Changed();
            }
        }
        private global::System.String _NODE_ID2;
        partial void OnNODE_ID2Changing(global::System.String value);
        partial void OnNODE_ID2Changed();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DATA_ID
        {
            get
            {
                return _DATA_ID;
            }
            set
            {
                if (_DATA_ID != value)
                {
                    OnDATA_IDChanging(value);
                    ReportPropertyChanging("DATA_ID");
                    _DATA_ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DATA_ID");
                    OnDATA_IDChanged();
                }
            }
        }
        private global::System.Int32 _DATA_ID;
        partial void OnDATA_IDChanging(global::System.Int32 value);
        partial void OnDATA_IDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String PERIOD_TYPE
        {
            get
            {
                return _PERIOD_TYPE;
            }
            set
            {
                if (_PERIOD_TYPE != value)
                {
                    OnPERIOD_TYPEChanging(value);
                    ReportPropertyChanging("PERIOD_TYPE");
                    _PERIOD_TYPE = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("PERIOD_TYPE");
                    OnPERIOD_TYPEChanged();
                }
            }
        }
        private global::System.String _PERIOD_TYPE;
        partial void OnPERIOD_TYPEChanging(global::System.String value);
        partial void OnPERIOD_TYPEChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 PERIOD_YEAR
        {
            get
            {
                return _PERIOD_YEAR;
            }
            set
            {
                if (_PERIOD_YEAR != value)
                {
                    OnPERIOD_YEARChanging(value);
                    ReportPropertyChanging("PERIOD_YEAR");
                    _PERIOD_YEAR = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("PERIOD_YEAR");
                    OnPERIOD_YEARChanged();
                }
            }
        }
        private global::System.Int32 _PERIOD_YEAR;
        partial void OnPERIOD_YEARChanging(global::System.Int32 value);
        partial void OnPERIOD_YEARChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String CURRENCY
        {
            get
            {
                return _CURRENCY;
            }
            set
            {
                if (_CURRENCY != value)
                {
                    OnCURRENCYChanging(value);
                    ReportPropertyChanging("CURRENCY");
                    _CURRENCY = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("CURRENCY");
                    OnCURRENCYChanged();
                }
            }
        }
        private global::System.String _CURRENCY;
        partial void OnCURRENCYChanging(global::System.String value);
        partial void OnCURRENCYChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal AMOUNT
        {
            get
            {
                return _AMOUNT;
            }
            set
            {
                if (_AMOUNT != value)
                {
                    OnAMOUNTChanging(value);
                    ReportPropertyChanging("AMOUNT");
                    _AMOUNT = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("AMOUNT");
                    OnAMOUNTChanged();
                }
            }
        }
        private global::System.Decimal _AMOUNT;
        partial void OnAMOUNTChanging(global::System.Decimal value);
        partial void OnAMOUNTChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime UPDATE_DATE
        {
            get
            {
                return _UPDATE_DATE;
            }
            set
            {
                if (_UPDATE_DATE != value)
                {
                    OnUPDATE_DATEChanging(value);
                    ReportPropertyChanging("UPDATE_DATE");
                    _UPDATE_DATE = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("UPDATE_DATE");
                    OnUPDATE_DATEChanged();
                }
            }
        }
        private global::System.DateTime _UPDATE_DATE;
        partial void OnUPDATE_DATEChanging(global::System.DateTime value);
        partial void OnUPDATE_DATEChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="AIMSDataModel", Name="PERIOD_FINANCIALS")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class PERIOD_FINANCIALS : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new PERIOD_FINANCIALS object.
        /// </summary>
        /// <param name="iSSUER_ID">Initial value of the ISSUER_ID property.</param>
        /// <param name="sECURITY_ID">Initial value of the SECURITY_ID property.</param>
        /// <param name="cOA_TYPE">Initial value of the COA_TYPE property.</param>
        /// <param name="dATA_SOURCE">Initial value of the DATA_SOURCE property.</param>
        /// <param name="rOOT_SOURCE">Initial value of the ROOT_SOURCE property.</param>
        /// <param name="rOOT_SOURCE_DATE">Initial value of the ROOT_SOURCE_DATE property.</param>
        /// <param name="pERIOD_TYPE">Initial value of the PERIOD_TYPE property.</param>
        /// <param name="pERIOD_YEAR">Initial value of the PERIOD_YEAR property.</param>
        /// <param name="pERIOD_END_DATE">Initial value of the PERIOD_END_DATE property.</param>
        /// <param name="fISCAL_TYPE">Initial value of the FISCAL_TYPE property.</param>
        /// <param name="cURRENCY">Initial value of the CURRENCY property.</param>
        /// <param name="dATA_ID">Initial value of the DATA_ID property.</param>
        /// <param name="aMOUNT">Initial value of the AMOUNT property.</param>
        /// <param name="sOURCE_CURRENCY">Initial value of the SOURCE_CURRENCY property.</param>
        /// <param name="aMOUNT_TYPE">Initial value of the AMOUNT_TYPE property.</param>
        public static PERIOD_FINANCIALS CreatePERIOD_FINANCIALS(global::System.String iSSUER_ID, global::System.String sECURITY_ID, global::System.String cOA_TYPE, global::System.String dATA_SOURCE, global::System.String rOOT_SOURCE, global::System.DateTime rOOT_SOURCE_DATE, global::System.String pERIOD_TYPE, global::System.Int32 pERIOD_YEAR, global::System.DateTime pERIOD_END_DATE, global::System.String fISCAL_TYPE, global::System.String cURRENCY, global::System.Int32 dATA_ID, global::System.Decimal aMOUNT, global::System.String sOURCE_CURRENCY, global::System.String aMOUNT_TYPE)
        {
            PERIOD_FINANCIALS pERIOD_FINANCIALS = new PERIOD_FINANCIALS();
            pERIOD_FINANCIALS.ISSUER_ID = iSSUER_ID;
            pERIOD_FINANCIALS.SECURITY_ID = sECURITY_ID;
            pERIOD_FINANCIALS.COA_TYPE = cOA_TYPE;
            pERIOD_FINANCIALS.DATA_SOURCE = dATA_SOURCE;
            pERIOD_FINANCIALS.ROOT_SOURCE = rOOT_SOURCE;
            pERIOD_FINANCIALS.ROOT_SOURCE_DATE = rOOT_SOURCE_DATE;
            pERIOD_FINANCIALS.PERIOD_TYPE = pERIOD_TYPE;
            pERIOD_FINANCIALS.PERIOD_YEAR = pERIOD_YEAR;
            pERIOD_FINANCIALS.PERIOD_END_DATE = pERIOD_END_DATE;
            pERIOD_FINANCIALS.FISCAL_TYPE = fISCAL_TYPE;
            pERIOD_FINANCIALS.CURRENCY = cURRENCY;
            pERIOD_FINANCIALS.DATA_ID = dATA_ID;
            pERIOD_FINANCIALS.AMOUNT = aMOUNT;
            pERIOD_FINANCIALS.SOURCE_CURRENCY = sOURCE_CURRENCY;
            pERIOD_FINANCIALS.AMOUNT_TYPE = aMOUNT_TYPE;
            return pERIOD_FINANCIALS;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ISSUER_ID
        {
            get
            {
                return _ISSUER_ID;
            }
            set
            {
                if (_ISSUER_ID != value)
                {
                    OnISSUER_IDChanging(value);
                    ReportPropertyChanging("ISSUER_ID");
                    _ISSUER_ID = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("ISSUER_ID");
                    OnISSUER_IDChanged();
                }
            }
        }
        private global::System.String _ISSUER_ID;
        partial void OnISSUER_IDChanging(global::System.String value);
        partial void OnISSUER_IDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String SECURITY_ID
        {
            get
            {
                return _SECURITY_ID;
            }
            set
            {
                if (_SECURITY_ID != value)
                {
                    OnSECURITY_IDChanging(value);
                    ReportPropertyChanging("SECURITY_ID");
                    _SECURITY_ID = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("SECURITY_ID");
                    OnSECURITY_IDChanged();
                }
            }
        }
        private global::System.String _SECURITY_ID;
        partial void OnSECURITY_IDChanging(global::System.String value);
        partial void OnSECURITY_IDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String COA_TYPE
        {
            get
            {
                return _COA_TYPE;
            }
            set
            {
                if (_COA_TYPE != value)
                {
                    OnCOA_TYPEChanging(value);
                    ReportPropertyChanging("COA_TYPE");
                    _COA_TYPE = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("COA_TYPE");
                    OnCOA_TYPEChanged();
                }
            }
        }
        private global::System.String _COA_TYPE;
        partial void OnCOA_TYPEChanging(global::System.String value);
        partial void OnCOA_TYPEChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String DATA_SOURCE
        {
            get
            {
                return _DATA_SOURCE;
            }
            set
            {
                if (_DATA_SOURCE != value)
                {
                    OnDATA_SOURCEChanging(value);
                    ReportPropertyChanging("DATA_SOURCE");
                    _DATA_SOURCE = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("DATA_SOURCE");
                    OnDATA_SOURCEChanged();
                }
            }
        }
        private global::System.String _DATA_SOURCE;
        partial void OnDATA_SOURCEChanging(global::System.String value);
        partial void OnDATA_SOURCEChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ROOT_SOURCE
        {
            get
            {
                return _ROOT_SOURCE;
            }
            set
            {
                if (_ROOT_SOURCE != value)
                {
                    OnROOT_SOURCEChanging(value);
                    ReportPropertyChanging("ROOT_SOURCE");
                    _ROOT_SOURCE = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("ROOT_SOURCE");
                    OnROOT_SOURCEChanged();
                }
            }
        }
        private global::System.String _ROOT_SOURCE;
        partial void OnROOT_SOURCEChanging(global::System.String value);
        partial void OnROOT_SOURCEChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime ROOT_SOURCE_DATE
        {
            get
            {
                return _ROOT_SOURCE_DATE;
            }
            set
            {
                if (_ROOT_SOURCE_DATE != value)
                {
                    OnROOT_SOURCE_DATEChanging(value);
                    ReportPropertyChanging("ROOT_SOURCE_DATE");
                    _ROOT_SOURCE_DATE = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ROOT_SOURCE_DATE");
                    OnROOT_SOURCE_DATEChanged();
                }
            }
        }
        private global::System.DateTime _ROOT_SOURCE_DATE;
        partial void OnROOT_SOURCE_DATEChanging(global::System.DateTime value);
        partial void OnROOT_SOURCE_DATEChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String PERIOD_TYPE
        {
            get
            {
                return _PERIOD_TYPE;
            }
            set
            {
                if (_PERIOD_TYPE != value)
                {
                    OnPERIOD_TYPEChanging(value);
                    ReportPropertyChanging("PERIOD_TYPE");
                    _PERIOD_TYPE = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("PERIOD_TYPE");
                    OnPERIOD_TYPEChanged();
                }
            }
        }
        private global::System.String _PERIOD_TYPE;
        partial void OnPERIOD_TYPEChanging(global::System.String value);
        partial void OnPERIOD_TYPEChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 PERIOD_YEAR
        {
            get
            {
                return _PERIOD_YEAR;
            }
            set
            {
                if (_PERIOD_YEAR != value)
                {
                    OnPERIOD_YEARChanging(value);
                    ReportPropertyChanging("PERIOD_YEAR");
                    _PERIOD_YEAR = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("PERIOD_YEAR");
                    OnPERIOD_YEARChanged();
                }
            }
        }
        private global::System.Int32 _PERIOD_YEAR;
        partial void OnPERIOD_YEARChanging(global::System.Int32 value);
        partial void OnPERIOD_YEARChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime PERIOD_END_DATE
        {
            get
            {
                return _PERIOD_END_DATE;
            }
            set
            {
                if (_PERIOD_END_DATE != value)
                {
                    OnPERIOD_END_DATEChanging(value);
                    ReportPropertyChanging("PERIOD_END_DATE");
                    _PERIOD_END_DATE = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("PERIOD_END_DATE");
                    OnPERIOD_END_DATEChanged();
                }
            }
        }
        private global::System.DateTime _PERIOD_END_DATE;
        partial void OnPERIOD_END_DATEChanging(global::System.DateTime value);
        partial void OnPERIOD_END_DATEChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String FISCAL_TYPE
        {
            get
            {
                return _FISCAL_TYPE;
            }
            set
            {
                if (_FISCAL_TYPE != value)
                {
                    OnFISCAL_TYPEChanging(value);
                    ReportPropertyChanging("FISCAL_TYPE");
                    _FISCAL_TYPE = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("FISCAL_TYPE");
                    OnFISCAL_TYPEChanged();
                }
            }
        }
        private global::System.String _FISCAL_TYPE;
        partial void OnFISCAL_TYPEChanging(global::System.String value);
        partial void OnFISCAL_TYPEChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String CURRENCY
        {
            get
            {
                return _CURRENCY;
            }
            set
            {
                if (_CURRENCY != value)
                {
                    OnCURRENCYChanging(value);
                    ReportPropertyChanging("CURRENCY");
                    _CURRENCY = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("CURRENCY");
                    OnCURRENCYChanged();
                }
            }
        }
        private global::System.String _CURRENCY;
        partial void OnCURRENCYChanging(global::System.String value);
        partial void OnCURRENCYChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DATA_ID
        {
            get
            {
                return _DATA_ID;
            }
            set
            {
                if (_DATA_ID != value)
                {
                    OnDATA_IDChanging(value);
                    ReportPropertyChanging("DATA_ID");
                    _DATA_ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DATA_ID");
                    OnDATA_IDChanged();
                }
            }
        }
        private global::System.Int32 _DATA_ID;
        partial void OnDATA_IDChanging(global::System.Int32 value);
        partial void OnDATA_IDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal AMOUNT
        {
            get
            {
                return _AMOUNT;
            }
            set
            {
                if (_AMOUNT != value)
                {
                    OnAMOUNTChanging(value);
                    ReportPropertyChanging("AMOUNT");
                    _AMOUNT = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("AMOUNT");
                    OnAMOUNTChanged();
                }
            }
        }
        private global::System.Decimal _AMOUNT;
        partial void OnAMOUNTChanging(global::System.Decimal value);
        partial void OnAMOUNTChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CALCULATION_DIAGRAM
        {
            get
            {
                return _CALCULATION_DIAGRAM;
            }
            set
            {
                OnCALCULATION_DIAGRAMChanging(value);
                ReportPropertyChanging("CALCULATION_DIAGRAM");
                _CALCULATION_DIAGRAM = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CALCULATION_DIAGRAM");
                OnCALCULATION_DIAGRAMChanged();
            }
        }
        private global::System.String _CALCULATION_DIAGRAM;
        partial void OnCALCULATION_DIAGRAMChanging(global::System.String value);
        partial void OnCALCULATION_DIAGRAMChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String SOURCE_CURRENCY
        {
            get
            {
                return _SOURCE_CURRENCY;
            }
            set
            {
                if (_SOURCE_CURRENCY != value)
                {
                    OnSOURCE_CURRENCYChanging(value);
                    ReportPropertyChanging("SOURCE_CURRENCY");
                    _SOURCE_CURRENCY = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("SOURCE_CURRENCY");
                    OnSOURCE_CURRENCYChanged();
                }
            }
        }
        private global::System.String _SOURCE_CURRENCY;
        partial void OnSOURCE_CURRENCYChanging(global::System.String value);
        partial void OnSOURCE_CURRENCYChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String AMOUNT_TYPE
        {
            get
            {
                return _AMOUNT_TYPE;
            }
            set
            {
                if (_AMOUNT_TYPE != value)
                {
                    OnAMOUNT_TYPEChanging(value);
                    ReportPropertyChanging("AMOUNT_TYPE");
                    _AMOUNT_TYPE = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("AMOUNT_TYPE");
                    OnAMOUNT_TYPEChanged();
                }
            }
        }
        private global::System.String _AMOUNT_TYPE;
        partial void OnAMOUNT_TYPEChanging(global::System.String value);
        partial void OnAMOUNT_TYPEChanged();

        #endregion
    
    }

    #endregion
    #region ComplexTypes
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmComplexTypeAttribute(NamespaceName="AIMSDataModel", Name="PeriodFinancialForwardRatios")]
    [DataContractAttribute(IsReference=true)]
    [Serializable()]
    public partial class PeriodFinancialForwardRatios : ComplexObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new PeriodFinancialForwardRatios object.
        /// </summary>
        /// <param name="issuerID">Initial value of the IssuerID property.</param>
        /// <param name="securityID">Initial value of the SecurityID property.</param>
        /// <param name="dataID">Initial value of the DataID property.</param>
        /// <param name="amount">Initial value of the Amount property.</param>
        public static PeriodFinancialForwardRatios CreatePeriodFinancialForwardRatios(global::System.String issuerID, global::System.String securityID, global::System.Int32 dataID, global::System.Decimal amount)
        {
            PeriodFinancialForwardRatios periodFinancialForwardRatios = new PeriodFinancialForwardRatios();
            periodFinancialForwardRatios.IssuerID = issuerID;
            periodFinancialForwardRatios.SecurityID = securityID;
            periodFinancialForwardRatios.DataID = dataID;
            periodFinancialForwardRatios.Amount = amount;
            return periodFinancialForwardRatios;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String IssuerID
        {
            get
            {
                return _IssuerID;
            }
            set
            {
                OnIssuerIDChanging(value);
                ReportPropertyChanging("IssuerID");
                _IssuerID = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("IssuerID");
                OnIssuerIDChanged();
            }
        }
        private global::System.String _IssuerID;
        partial void OnIssuerIDChanging(global::System.String value);
        partial void OnIssuerIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String SecurityID
        {
            get
            {
                return _SecurityID;
            }
            set
            {
                OnSecurityIDChanging(value);
                ReportPropertyChanging("SecurityID");
                _SecurityID = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("SecurityID");
                OnSecurityIDChanged();
            }
        }
        private global::System.String _SecurityID;
        partial void OnSecurityIDChanging(global::System.String value);
        partial void OnSecurityIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DataID
        {
            get
            {
                return _DataID;
            }
            set
            {
                OnDataIDChanging(value);
                ReportPropertyChanging("DataID");
                _DataID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DataID");
                OnDataIDChanged();
            }
        }
        private global::System.Int32 _DataID;
        partial void OnDataIDChanging(global::System.Int32 value);
        partial void OnDataIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal Amount
        {
            get
            {
                return _Amount;
            }
            set
            {
                OnAmountChanging(value);
                ReportPropertyChanging("Amount");
                _Amount = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Amount");
                OnAmountChanged();
            }
        }
        private global::System.Decimal _Amount;
        partial void OnAmountChanging(global::System.Decimal value);
        partial void OnAmountChanged();

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmComplexTypeAttribute(NamespaceName="AIMSDataModel", Name="PeriodFinancialPeriodRatios")]
    [DataContractAttribute(IsReference=true)]
    [Serializable()]
    public partial class PeriodFinancialPeriodRatios : ComplexObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new PeriodFinancialPeriodRatios object.
        /// </summary>
        /// <param name="issuerID">Initial value of the IssuerID property.</param>
        /// <param name="securityID">Initial value of the SecurityID property.</param>
        /// <param name="amount">Initial value of the Amount property.</param>
        /// <param name="dataID">Initial value of the DataID property.</param>
        /// <param name="periodYear">Initial value of the PeriodYear property.</param>
        public static PeriodFinancialPeriodRatios CreatePeriodFinancialPeriodRatios(global::System.String issuerID, global::System.String securityID, global::System.Decimal amount, global::System.Int32 dataID, global::System.Int32 periodYear)
        {
            PeriodFinancialPeriodRatios periodFinancialPeriodRatios = new PeriodFinancialPeriodRatios();
            periodFinancialPeriodRatios.IssuerID = issuerID;
            periodFinancialPeriodRatios.SecurityID = securityID;
            periodFinancialPeriodRatios.Amount = amount;
            periodFinancialPeriodRatios.DataID = dataID;
            periodFinancialPeriodRatios.PeriodYear = periodYear;
            return periodFinancialPeriodRatios;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String IssuerID
        {
            get
            {
                return _IssuerID;
            }
            set
            {
                OnIssuerIDChanging(value);
                ReportPropertyChanging("IssuerID");
                _IssuerID = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("IssuerID");
                OnIssuerIDChanged();
            }
        }
        private global::System.String _IssuerID;
        partial void OnIssuerIDChanging(global::System.String value);
        partial void OnIssuerIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String SecurityID
        {
            get
            {
                return _SecurityID;
            }
            set
            {
                OnSecurityIDChanging(value);
                ReportPropertyChanging("SecurityID");
                _SecurityID = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("SecurityID");
                OnSecurityIDChanged();
            }
        }
        private global::System.String _SecurityID;
        partial void OnSecurityIDChanging(global::System.String value);
        partial void OnSecurityIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal Amount
        {
            get
            {
                return _Amount;
            }
            set
            {
                OnAmountChanging(value);
                ReportPropertyChanging("Amount");
                _Amount = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Amount");
                OnAmountChanged();
            }
        }
        private global::System.Decimal _Amount;
        partial void OnAmountChanging(global::System.Decimal value);
        partial void OnAmountChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DataID
        {
            get
            {
                return _DataID;
            }
            set
            {
                OnDataIDChanging(value);
                ReportPropertyChanging("DataID");
                _DataID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DataID");
                OnDataIDChanged();
            }
        }
        private global::System.Int32 _DataID;
        partial void OnDataIDChanging(global::System.Int32 value);
        partial void OnDataIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 PeriodYear
        {
            get
            {
                return _PeriodYear;
            }
            set
            {
                OnPeriodYearChanging(value);
                ReportPropertyChanging("PeriodYear");
                _PeriodYear = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PeriodYear");
                OnPeriodYearChanged();
            }
        }
        private global::System.Int32 _PeriodYear;
        partial void OnPeriodYearChanging(global::System.Int32 value);
        partial void OnPeriodYearChanged();

        #endregion
    }

    #endregion
    
}
